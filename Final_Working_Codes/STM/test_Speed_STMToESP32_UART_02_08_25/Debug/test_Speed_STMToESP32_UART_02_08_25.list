
test_Speed_STMToESP32_UART_02_08_25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08009b90  08009b90  0000ab90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ac  0800a3ac  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a3ac  0800a3ac  0000b3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b4  0800a3b4  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b4  0800a3b4  0000b3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3b8  0800a3b8  0000b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a3bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          000003e8  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005c0  200005c0  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea8e  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f23  00000000  00000000  0001ac96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  0001cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad3  00000000  00000000  0001d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002215d  00000000  00000000  0001e473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e698  00000000  00000000  000405d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf92d  00000000  00000000  0004ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e595  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005000  00000000  00000000  0011e5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001235d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b74 	.word	0x08009b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009b74 	.word	0x08009b74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <UART_Transmit_String>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send string over UART (for PC Putty - USART2)
void UART_Transmit_String(UART_HandleTypeDef *huart, char *str)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f7ff f920 	bl	8000270 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f003 fe7a 	bl	8004d34 <HAL_UART_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <UART_Transmit_To_ESP32>:

// Function to send string over UART to ESP32 (USART3)
void UART_Transmit_To_ESP32(char *str)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f90d 	bl	8000270 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <UART_Transmit_To_ESP32+0x28>)
 8001062:	f003 fe67 	bl	8004d34 <HAL_UART_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002ac 	.word	0x200002ac

08001074 <Toggle_LED>:

// Function to toggle an LED
void Toggle_LED(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f002 f99c 	bl	80033c2 <HAL_GPIO_TogglePin>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <PrintRawCanData>:

// Function to print raw CAN data to UART (for debugging)
void PrintRawCanData(uint8_t *data, uint8_t len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
    char temp_str[10];
    UART_Transmit_String(&huart2, "Raw Data: ");
 80010a0:	4913      	ldr	r1, [pc, #76]	@ (80010f0 <PrintRawCanData+0x5c>)
 80010a2:	4814      	ldr	r0, [pc, #80]	@ (80010f4 <PrintRawCanData+0x60>)
 80010a4:	f7ff ffbc 	bl	8001020 <UART_Transmit_String>
    for (int i = 0; i < len; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e013      	b.n	80010d6 <PrintRawCanData+0x42>
    {
        sprintf(temp_str, "0x%02X ", data[i]);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	490e      	ldr	r1, [pc, #56]	@ (80010f8 <PrintRawCanData+0x64>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 f91a 	bl	80062f8 <siprintf>
        UART_Transmit_String(&huart2, temp_str);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	480a      	ldr	r0, [pc, #40]	@ (80010f4 <PrintRawCanData+0x60>)
 80010cc:	f7ff ffa8 	bl	8001020 <UART_Transmit_String>
    for (int i = 0; i < len; i++)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbe7      	blt.n	80010ae <PrintRawCanData+0x1a>
    }
    UART_Transmit_String(&huart2, "\r\n");
 80010de:	4907      	ldr	r1, [pc, #28]	@ (80010fc <PrintRawCanData+0x68>)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <PrintRawCanData+0x60>)
 80010e2:	f7ff ff9d 	bl	8001020 <UART_Transmit_String>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08009bd4 	.word	0x08009bd4
 80010f4:	20000264 	.word	0x20000264
 80010f8:	08009be0 	.word	0x08009be0
 80010fc:	08009be8 	.word	0x08009be8

08001100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback.
  * @param  htim pointer to a TIM_HandleTypeDef structure.
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7f1b      	ldrb	r3, [r3, #28]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d17a      	bne.n	8001206 <HAL_TIM_IC_CaptureCallback+0x106>
    {
        if (is_first_captured == 0)
 8001110:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10a      	bne.n	8001130 <HAL_TIM_IC_CaptureCallback+0x30>
        {
            ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800111a:	2100      	movs	r1, #0
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f003 fa27 	bl	8004570 <HAL_TIM_ReadCapturedValue>
 8001122:	4603      	mov	r3, r0
 8001124:	4a3b      	ldr	r2, [pc, #236]	@ (8001214 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001126:	6013      	str	r3, [r2, #0]
            is_first_captured = 1;
 8001128:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <HAL_TIM_IC_CaptureCallback+0x110>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
            is_first_captured = 0;
            ic_val1 = 0;
            ic_val2 = 0;
        }
    }
}
 800112e:	e06a      	b.n	8001206 <HAL_TIM_IC_CaptureCallback+0x106>
        else if (is_first_captured == 1)
 8001130:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d165      	bne.n	8001206 <HAL_TIM_IC_CaptureCallback+0x106>
            ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f003 fa17 	bl	8004570 <HAL_TIM_ReadCapturedValue>
 8001142:	4603      	mov	r3, r0
 8001144:	4a34      	ldr	r2, [pc, #208]	@ (8001218 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001146:	6013      	str	r3, [r2, #0]
            if (ic_val2 > ic_val1)
 8001148:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <HAL_TIM_IC_CaptureCallback+0x118>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_TIM_IC_CaptureCallback+0x114>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d907      	bls.n	8001164 <HAL_TIM_IC_CaptureCallback+0x64>
                difference = ic_val2 - ic_val1;
 8001154:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <HAL_TIM_IC_CaptureCallback+0x114>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e007      	b.n	8001174 <HAL_TIM_IC_CaptureCallback+0x74>
                difference = (0xFFFFFFFF - ic_val1) + ic_val2;
 8001164:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <HAL_TIM_IC_CaptureCallback+0x114>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	4a2a      	ldr	r2, [pc, #168]	@ (800121c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001172:	6013      	str	r3, [r2, #0]
            float pulse_interval_ms = (float)difference / 10.0f;
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001180:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	edc7 7a03 	vstr	s15, [r7, #12]
            if (pulse_interval_ms < 500.0f) // A reasonable threshold to avoid false readings
 800118c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001190:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001220 <HAL_TIM_IC_CaptureCallback+0x120>
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	d510      	bpl.n	80011c0 <HAL_TIM_IC_CaptureCallback+0xc0>
                current_rpm = (uint32_t)(60000.0f / (PULSES_PER_REVOLUTION * pulse_interval_ms));
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80011a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011aa:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001224 <HAL_TIM_IC_CaptureCallback+0x124>
 80011ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b6:	ee17 2a90 	vmov	r2, s15
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e002      	b.n	80011c6 <HAL_TIM_IC_CaptureCallback+0xc6>
                current_rpm = 0;
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
            float wheel_circumference_m = (float)3.14159f * (WHEEL_DIAMETER_CM / 100.0f);
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011c8:	60bb      	str	r3, [r7, #8]
            current_speed_kmh = ((float)current_rpm * wheel_circumference_m / 60.0f) * 3.6f;
 80011ca:	4b17      	ldr	r3, [pc, #92]	@ (8001228 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011de:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001230 <HAL_TIM_IC_CaptureCallback+0x130>
 80011e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001234 <HAL_TIM_IC_CaptureCallback+0x134>
 80011ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ee:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
            is_first_captured = 0;
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
            ic_val1 = 0;
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_TIM_IC_CaptureCallback+0x114>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
            ic_val2 = 0;
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000468 	.word	0x20000468
 8001214:	2000045c 	.word	0x2000045c
 8001218:	20000460 	.word	0x20000460
 800121c:	20000464 	.word	0x20000464
 8001220:	43fa0000 	.word	0x43fa0000
 8001224:	476a6000 	.word	0x476a6000
 8001228:	2000044c 	.word	0x2000044c
 800122c:	3e511aaf 	.word	0x3e511aaf
 8001230:	42700000 	.word	0x42700000
 8001234:	40666666 	.word	0x40666666
 8001238:	20000440 	.word	0x20000440

0800123c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  * the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001240:	b095      	sub	sp, #84	@ 0x54
 8001242:	af0c      	add	r7, sp, #48	@ 0x30
 8001244:	60f8      	str	r0, [r7, #12]
    if (hcan->Instance == CAN1)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a82      	ldr	r2, [pc, #520]	@ (8001454 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800124c:	4293      	cmp	r3, r2
 800124e:	f040 8189 	bne.w	8001564 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>
    {
        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001252:	4b81      	ldr	r3, [pc, #516]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001254:	4a81      	ldr	r2, [pc, #516]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001256:	2100      	movs	r1, #0
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f001 fa72 	bl	8002742 <HAL_CAN_GetRxMessage>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 817f 	bne.w	8001564 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>
        {
            // Process the received message
            sprintf(uart_buffer, "CAN Rx Int! ID: 0x%lX, DLC: %lu. ", RxHeader.StdId, RxHeader.DLC);
 8001266:	4b7d      	ldr	r3, [pc, #500]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b7c      	ldr	r3, [pc, #496]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	497c      	ldr	r1, [pc, #496]	@ (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001270:	487c      	ldr	r0, [pc, #496]	@ (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001272:	f005 f841 	bl	80062f8 <siprintf>
            UART_Transmit_String(&huart2, uart_buffer);
 8001276:	497b      	ldr	r1, [pc, #492]	@ (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001278:	487b      	ldr	r0, [pc, #492]	@ (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800127a:	f7ff fed1 	bl	8001020 <UART_Transmit_String>
            PrintRawCanData(RxData, RxHeader.DLC); // Print raw data for debugging to Putty
 800127e:	4b77      	ldr	r3, [pc, #476]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4619      	mov	r1, r3
 8001286:	4874      	ldr	r0, [pc, #464]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001288:	f7ff ff04 	bl	8001094 <PrintRawCanData>

            // --- Multi-Sensor Data Parsing ---
            if (RxHeader.StdId == 0x457 && RxHeader.DLC >= 7)
 800128c:	4b73      	ldr	r3, [pc, #460]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f240 4257 	movw	r2, #1111	@ 0x457
 8001294:	4293      	cmp	r3, r2
 8001296:	f040 815d 	bne.w	8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
 800129a:	4b70      	ldr	r3, [pc, #448]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b06      	cmp	r3, #6
 80012a0:	f240 8158 	bls.w	8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
            {
                // DHT11 Data
                received_temperature = (float)RxData[0] + (float)RxData[1] / 10.0f;
 80012a4:	4b6c      	ldr	r3, [pc, #432]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012b0:	4b69      	ldr	r3, [pc, #420]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012bc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80012c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	4b68      	ldr	r3, [pc, #416]	@ (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
                received_humidity = (float)RxData[2] + (float)RxData[3] / 10.0f;
 80012ce:	4b62      	ldr	r3, [pc, #392]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012da:	4b5f      	ldr	r3, [pc, #380]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80012dc:	78db      	ldrb	r3, [r3, #3]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012e6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80012ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012f4:	edc3 7a00 	vstr	s15, [r3]

                // IR Sensor State
                received_ir_state = RxData[4]; // 0 or 1
 80012f8:	4b57      	ldr	r3, [pc, #348]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 80012fa:	791a      	ldrb	r2, [r3, #4]
 80012fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80012fe:	701a      	strb	r2, [r3, #0]

                // Sound Sensor Value (reconstruct 10-bit analog value)
                received_sound_value = ((uint16_t)RxData[6] << 8) | RxData[5];
 8001300:	4b55      	ldr	r3, [pc, #340]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001302:	799b      	ldrb	r3, [r3, #6]
 8001304:	b21b      	sxth	r3, r3
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b53      	ldr	r3, [pc, #332]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21b      	sxth	r3, r3
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b58      	ldr	r3, [pc, #352]	@ (8001478 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001318:	801a      	strh	r2, [r3, #0]

                // Sequence Number
                if (RxHeader.DLC >= 8) {
 800131a:	4b50      	ldr	r3, [pc, #320]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b07      	cmp	r3, #7
 8001320:	d903      	bls.n	800132a <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
                    received_sequence_num = RxData[7];
 8001322:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001324:	79da      	ldrb	r2, [r3, #7]
 8001326:	4b55      	ldr	r3, [pc, #340]	@ (800147c <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001328:	701a      	strb	r2, [r3, #0]
                }

                // Print all received sensor data to Putty
                sprintf(uart_buffer, "DHT11: T=%.1f C, H=%.1f %%. IR: %s. Sound: %u. (Seq: %u)\r\n",
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_f2d>
 8001334:	4604      	mov	r4, r0
 8001336:	460d      	mov	r5, r1
 8001338:	4b4d      	ldr	r3, [pc, #308]	@ (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f903 	bl	8000548 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
                        received_temperature, received_humidity,
                        (received_ir_state == IR_OBSTACLE_DETECTED ? "OBSTACLE" : "CLEAR"),
 8001346:	494b      	ldr	r1, [pc, #300]	@ (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001348:	7809      	ldrb	r1, [r1, #0]
                sprintf(uart_buffer, "DHT11: T=%.1f C, H=%.1f %%. IR: %s. Sound: %u. (Seq: %u)\r\n",
 800134a:	2901      	cmp	r1, #1
 800134c:	d101      	bne.n	8001352 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
 800134e:	494c      	ldr	r1, [pc, #304]	@ (8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001350:	e000      	b.n	8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8001352:	494c      	ldr	r1, [pc, #304]	@ (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001354:	4848      	ldr	r0, [pc, #288]	@ (8001478 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001356:	8800      	ldrh	r0, [r0, #0]
 8001358:	4606      	mov	r6, r0
 800135a:	4848      	ldr	r0, [pc, #288]	@ (800147c <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800135c:	7800      	ldrb	r0, [r0, #0]
 800135e:	9004      	str	r0, [sp, #16]
 8001360:	9603      	str	r6, [sp, #12]
 8001362:	9102      	str	r1, [sp, #8]
 8001364:	e9cd 2300 	strd	r2, r3, [sp]
 8001368:	4622      	mov	r2, r4
 800136a:	462b      	mov	r3, r5
 800136c:	4946      	ldr	r1, [pc, #280]	@ (8001488 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 800136e:	483d      	ldr	r0, [pc, #244]	@ (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001370:	f004 ffc2 	bl	80062f8 <siprintf>
                        received_sound_value,
                        received_sequence_num);
                UART_Transmit_String(&huart2, uart_buffer);
 8001374:	493b      	ldr	r1, [pc, #236]	@ (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001376:	483c      	ldr	r0, [pc, #240]	@ (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001378:	f7ff fe52 	bl	8001020 <UART_Transmit_String>

                // --- ALERT CHECKS (for Putty) ---
                if (received_ir_state == IR_OBSTACLE_DETECTED) {
 800137c:	4b3d      	ldr	r3, [pc, #244]	@ (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d103      	bne.n	800138c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
                    UART_Transmit_String(&huart2, "--> ALERT! Obstacle ahead. Be cautious! Potential crash detected!\r\n");
 8001384:	4941      	ldr	r1, [pc, #260]	@ (800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001386:	4838      	ldr	r0, [pc, #224]	@ (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001388:	f7ff fe4a 	bl	8001020 <UART_Transmit_String>
                }
                if (received_sound_value > SOUND_ALERT_THRESHOLD) {
 800138c:	4b3a      	ldr	r3, [pc, #232]	@ (8001478 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8001394:	d903      	bls.n	800139e <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
                    UART_Transmit_String(&huart2, "--> ALERT! Crash detected!!!\r\n");
 8001396:	493e      	ldr	r1, [pc, #248]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001398:	4833      	ldr	r0, [pc, #204]	@ (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800139a:	f7ff fe41 	bl	8001020 <UART_Transmit_String>
                }
                if (received_temperature > TEMP_ALERT_THRESHOLD) {
 800139e:	4b33      	ldr	r3, [pc, #204]	@ (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	dd03      	ble.n	80013ba <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
                    UART_Transmit_String(&huart2, "--> ALERT! High temperature detected! FIRE\r\n");
 80013b2:	4938      	ldr	r1, [pc, #224]	@ (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 80013b4:	482c      	ldr	r0, [pc, #176]	@ (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80013b6:	f7ff fe33 	bl	8001020 <UART_Transmit_String>
                // --- END ALERT CHECKS ---


                // --- NEW: CALCULATE ACCELERATION/BRAKING AND IDLING ---
                // Calculate time difference since last speed update
                uint32_t current_time_ms = HAL_GetTick();
 80013ba:	f000 ff29 	bl	8002210 <HAL_GetTick>
 80013be:	61f8      	str	r0, [r7, #28]
                if (current_time_ms - last_speed_update_time >= 500) // Update every 500ms
 80013c0:	4b35      	ldr	r3, [pc, #212]	@ (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013cc:	d333      	bcc.n	8001436 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fa>
                {
                    // Calculate Acceleration
                    float time_diff_s = (float)(current_time_ms - last_speed_update_time) / 1000.0f;
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013de:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 800149c <HAL_CAN_RxFifo0MsgPendingCallback+0x260>
 80013e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e6:	edc7 7a06 	vstr	s15, [r7, #24]
                    float current_speed_mps = current_speed_kmh / 3.6f;
 80013ea:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
 80013f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f8:	edc7 7a05 	vstr	s15, [r7, #20]
                    float previous_speed_mps = previous_speed_kmh / 3.6f;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
 8001406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140a:	edc7 7a04 	vstr	s15, [r7, #16]
                    acceleration_mps2 = (current_speed_mps - previous_speed_mps) / time_diff_s;
 800140e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001412:	edd7 7a04 	vldr	s15, [r7, #16]
 8001416:	ee77 6a67 	vsub.f32	s13, s14, s15
 800141a:	ed97 7a06 	vldr	s14, [r7, #24]
 800141e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001422:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001424:	edc3 7a00 	vstr	s15, [r3]
                    previous_speed_kmh = current_speed_kmh;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800142e:	6013      	str	r3, [r2, #0]
                    last_speed_update_time = current_time_ms;
 8001430:	4a19      	ldr	r2, [pc, #100]	@ (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	6013      	str	r3, [r2, #0]
                }

                // Check for idling (car is stopped)
                if (current_rpm == 0)
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d13e      	bne.n	80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x280>
                {
                    idling_timer_ms += (current_time_ms - last_pulse_time_ms);
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	1ad2      	subs	r2, r2, r3
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e03a      	b.n	80014c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
 8001452:	bf00      	nop
 8001454:	40006400 	.word	0x40006400
 8001458:	20000420 	.word	0x20000420
 800145c:	20000404 	.word	0x20000404
 8001460:	08009bec 	.word	0x08009bec
 8001464:	200002f4 	.word	0x200002f4
 8001468:	20000264 	.word	0x20000264
 800146c:	20000430 	.word	0x20000430
 8001470:	20000434 	.word	0x20000434
 8001474:	20000438 	.word	0x20000438
 8001478:	2000043a 	.word	0x2000043a
 800147c:	2000043c 	.word	0x2000043c
 8001480:	08009c10 	.word	0x08009c10
 8001484:	08009c1c 	.word	0x08009c1c
 8001488:	08009c24 	.word	0x08009c24
 800148c:	08009c60 	.word	0x08009c60
 8001490:	08009ca4 	.word	0x08009ca4
 8001494:	08009cc4 	.word	0x08009cc4
 8001498:	20000458 	.word	0x20000458
 800149c:	447a0000 	.word	0x447a0000
 80014a0:	20000440 	.word	0x20000440
 80014a4:	40666666 	.word	0x40666666
 80014a8:	20000444 	.word	0x20000444
 80014ac:	20000448 	.word	0x20000448
 80014b0:	2000044c 	.word	0x2000044c
 80014b4:	20000454 	.word	0x20000454
 80014b8:	20000450 	.word	0x20000450
                }
                else
                {
                    idling_timer_ms = 0;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <HAL_CAN_RxFifo0MsgPendingCallback+0x334>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
                    last_pulse_time_ms = current_time_ms;
 80014c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001574 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	6013      	str	r3, [r2, #0]


                // --- NEW: SEND ALL DATA TO ESP32 ---
                // Format: T:XX.X,H:YY.Y,IR:Z,S:AAAA,Seq:BBB,Speed:SS.S,Acc:A.A,RPM:RRRR,Idle:IIII\n
                // Corrected format specifier for RPM and Idle time (which are uint32_t / unsigned long)
                sprintf(esp32_data_buffer, "T:%.1f,H:%.1f,IR:%u,S:%u,Seq:%u,Speed:%.1f,Acc:%.1f,RPM:%lu,Idle:%lu\n",
 80014c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f83b 	bl	8000548 <__aeabi_f2d>
 80014d2:	4682      	mov	sl, r0
 80014d4:	468b      	mov	fp, r1
 80014d6:	4b29      	ldr	r3, [pc, #164]	@ (800157c <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f834 	bl	8000548 <__aeabi_f2d>
 80014e0:	4604      	mov	r4, r0
 80014e2:	460d      	mov	r5, r1
 80014e4:	4b26      	ldr	r3, [pc, #152]	@ (8001580 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f824 	bl	8000548 <__aeabi_f2d>
 8001500:	4680      	mov	r8, r0
 8001502:	4689      	mov	r9, r1
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f81d 	bl	8000548 <__aeabi_f2d>
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8001510:	681e      	ldr	r6, [r3, #0]
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_CAN_RxFifo0MsgPendingCallback+0x334>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001520:	960a      	str	r6, [sp, #40]	@ 0x28
 8001522:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001526:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	9204      	str	r2, [sp, #16]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	9203      	str	r2, [sp, #12]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	e9cd 4500 	strd	r4, r5, [sp]
 800153a:	4652      	mov	r2, sl
 800153c:	465b      	mov	r3, fp
 800153e:	4917      	ldr	r1, [pc, #92]	@ (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001540:	4817      	ldr	r0, [pc, #92]	@ (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001542:	f004 fed9 	bl	80062f8 <siprintf>
                        received_sequence_num,
                        current_speed_kmh,
                        acceleration_mps2,
                        current_rpm,
                        idling_timer_ms / 1000); // Convert milliseconds to seconds
                UART_Transmit_To_ESP32(esp32_data_buffer); // Send to ESP32!
 8001546:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001548:	f7ff fd7e 	bl	8001048 <UART_Transmit_To_ESP32>
                UART_Transmit_String(&huart2, "(Data sent to ESP32)\r\n"); // Confirm on Putty
 800154c:	4915      	ldr	r1, [pc, #84]	@ (80015a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>)
 800154e:	4816      	ldr	r0, [pc, #88]	@ (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001550:	f7ff fd66 	bl	8001020 <UART_Transmit_String>
            }

            can_rx_flag = 1; // Signal main loop
 8001554:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
            Toggle_LED(GPIOD, GPIO_PIN_15); // Toggle Blue LED (LD6) on reception
 800155a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800155e:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 8001560:	f7ff fd88 	bl	8001074 <Toggle_LED>
        }
    }
}
 8001564:	bf00      	nop
 8001566:	3724      	adds	r7, #36	@ 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800156e:	bf00      	nop
 8001570:	20000450 	.word	0x20000450
 8001574:	20000454 	.word	0x20000454
 8001578:	20000430 	.word	0x20000430
 800157c:	20000434 	.word	0x20000434
 8001580:	20000438 	.word	0x20000438
 8001584:	2000043a 	.word	0x2000043a
 8001588:	2000043c 	.word	0x2000043c
 800158c:	20000440 	.word	0x20000440
 8001590:	20000448 	.word	0x20000448
 8001594:	2000044c 	.word	0x2000044c
 8001598:	10624dd3 	.word	0x10624dd3
 800159c:	08009cf4 	.word	0x08009cf4
 80015a0:	2000036c 	.word	0x2000036c
 80015a4:	08009d3c 	.word	0x08009d3c
 80015a8:	20000264 	.word	0x20000264
 80015ac:	20000428 	.word	0x20000428
 80015b0:	40020c00 	.word	0x40020c00

080015b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  * the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_CAN_GetError(hcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f001 fc2d 	bl	8002e1c <HAL_CAN_GetError>
 80015c2:	60f8      	str	r0, [r7, #12]
    can_error_flags = error_code;
 80015c4:	4a42      	ldr	r2, [pc, #264]	@ (80016d0 <HAL_CAN_ErrorCallback+0x11c>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6013      	str	r3, [r2, #0]

    UART_Transmit_String(&huart2, "CAN Error! Code: 0x");
 80015ca:	4942      	ldr	r1, [pc, #264]	@ (80016d4 <HAL_CAN_ErrorCallback+0x120>)
 80015cc:	4842      	ldr	r0, [pc, #264]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 80015ce:	f7ff fd27 	bl	8001020 <UART_Transmit_String>
    sprintf(uart_buffer, "%lX - ", error_code);
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4941      	ldr	r1, [pc, #260]	@ (80016dc <HAL_CAN_ErrorCallback+0x128>)
 80015d6:	4842      	ldr	r0, [pc, #264]	@ (80016e0 <HAL_CAN_ErrorCallback+0x12c>)
 80015d8:	f004 fe8e 	bl	80062f8 <siprintf>
    UART_Transmit_String(&huart2, uart_buffer);
 80015dc:	4940      	ldr	r1, [pc, #256]	@ (80016e0 <HAL_CAN_ErrorCallback+0x12c>)
 80015de:	483e      	ldr	r0, [pc, #248]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 80015e0:	f7ff fd1e 	bl	8001020 <UART_Transmit_String>

    if (error_code & HAL_CAN_ERROR_EWG) { UART_Transmit_String(&huart2, "Error Warning! "); }
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_CAN_ErrorCallback+0x42>
 80015ee:	493d      	ldr	r1, [pc, #244]	@ (80016e4 <HAL_CAN_ErrorCallback+0x130>)
 80015f0:	4839      	ldr	r0, [pc, #228]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 80015f2:	f7ff fd15 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_EPV) { UART_Transmit_String(&huart2, "Error Passive! "); }
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_CAN_ErrorCallback+0x54>
 8001600:	4939      	ldr	r1, [pc, #228]	@ (80016e8 <HAL_CAN_ErrorCallback+0x134>)
 8001602:	4835      	ldr	r0, [pc, #212]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 8001604:	f7ff fd0c 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_BOF) {
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	d017      	beq.n	8001642 <HAL_CAN_ErrorCallback+0x8e>
        UART_Transmit_String(&huart2, "Bus-Off! Attempting recovery...\r\n");
 8001612:	4936      	ldr	r1, [pc, #216]	@ (80016ec <HAL_CAN_ErrorCallback+0x138>)
 8001614:	4830      	ldr	r0, [pc, #192]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 8001616:	f7ff fd03 	bl	8001020 <UART_Transmit_String>
        if (HAL_CAN_Stop(hcan) != HAL_OK) Error_Handler();
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 f848 	bl	80026b0 <HAL_CAN_Stop>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_CAN_ErrorCallback+0x76>
 8001626:	f000 fad7 	bl	8001bd8 <Error_Handler>
        if (HAL_CAN_Start(hcan) != HAL_OK) Error_Handler();
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fffc 	bl	8002628 <HAL_CAN_Start>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_CAN_ErrorCallback+0x86>
 8001636:	f000 facf 	bl	8001bd8 <Error_Handler>
        UART_Transmit_String(&huart2, "CAN Re-initialized after Bus-Off.\r\n");
 800163a:	492d      	ldr	r1, [pc, #180]	@ (80016f0 <HAL_CAN_ErrorCallback+0x13c>)
 800163c:	4826      	ldr	r0, [pc, #152]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 800163e:	f7ff fcef 	bl	8001020 <UART_Transmit_String>
    }
    if (error_code & HAL_CAN_ERROR_STF) { UART_Transmit_String(&huart2, "Stuff Error! "); }
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_CAN_ErrorCallback+0xa0>
 800164c:	4929      	ldr	r1, [pc, #164]	@ (80016f4 <HAL_CAN_ErrorCallback+0x140>)
 800164e:	4822      	ldr	r0, [pc, #136]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 8001650:	f7ff fce6 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_FOR) { UART_Transmit_String(&huart2, "Form Error! "); }
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_CAN_ErrorCallback+0xb2>
 800165e:	4926      	ldr	r1, [pc, #152]	@ (80016f8 <HAL_CAN_ErrorCallback+0x144>)
 8001660:	481d      	ldr	r0, [pc, #116]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 8001662:	f7ff fcdd 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_ACK) { UART_Transmit_String(&huart2, "Acknowledge Error! "); }
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_CAN_ErrorCallback+0xc4>
 8001670:	4922      	ldr	r1, [pc, #136]	@ (80016fc <HAL_CAN_ErrorCallback+0x148>)
 8001672:	4819      	ldr	r0, [pc, #100]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 8001674:	f7ff fcd4 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_BR) { UART_Transmit_String(&huart2, "Bit Recessive Error! "); }
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_CAN_ErrorCallback+0xd6>
 8001682:	491f      	ldr	r1, [pc, #124]	@ (8001700 <HAL_CAN_ErrorCallback+0x14c>)
 8001684:	4814      	ldr	r0, [pc, #80]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 8001686:	f7ff fccb 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_BD) { UART_Transmit_String(&huart2, "Bit Dominant Error! "); }
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_CAN_ErrorCallback+0xe8>
 8001694:	491b      	ldr	r1, [pc, #108]	@ (8001704 <HAL_CAN_ErrorCallback+0x150>)
 8001696:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 8001698:	f7ff fcc2 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_CRC) { UART_Transmit_String(&huart2, "CRC Error! "); }
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_CAN_ErrorCallback+0xfa>
 80016a6:	4918      	ldr	r1, [pc, #96]	@ (8001708 <HAL_CAN_ErrorCallback+0x154>)
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 80016aa:	f7ff fcb9 	bl	8001020 <UART_Transmit_String>
    if (error_code & HAL_CAN_ERROR_RX_FOV0) { UART_Transmit_String(&huart2, "RX FIFO0 Overrun! "); }
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_CAN_ErrorCallback+0x10c>
 80016b8:	4914      	ldr	r1, [pc, #80]	@ (800170c <HAL_CAN_ErrorCallback+0x158>)
 80016ba:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 80016bc:	f7ff fcb0 	bl	8001020 <UART_Transmit_String>
    UART_Transmit_String(&huart2, "\r\n");
 80016c0:	4913      	ldr	r1, [pc, #76]	@ (8001710 <HAL_CAN_ErrorCallback+0x15c>)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <HAL_CAN_ErrorCallback+0x124>)
 80016c4:	f7ff fcac 	bl	8001020 <UART_Transmit_String>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000042c 	.word	0x2000042c
 80016d4:	08009d54 	.word	0x08009d54
 80016d8:	20000264 	.word	0x20000264
 80016dc:	08009d68 	.word	0x08009d68
 80016e0:	200002f4 	.word	0x200002f4
 80016e4:	08009d70 	.word	0x08009d70
 80016e8:	08009d80 	.word	0x08009d80
 80016ec:	08009d90 	.word	0x08009d90
 80016f0:	08009db4 	.word	0x08009db4
 80016f4:	08009dd8 	.word	0x08009dd8
 80016f8:	08009de8 	.word	0x08009de8
 80016fc:	08009df8 	.word	0x08009df8
 8001700:	08009e0c 	.word	0x08009e0c
 8001704:	08009e24 	.word	0x08009e24
 8001708:	08009e3c 	.word	0x08009e3c
 800170c:	08009e48 	.word	0x08009e48
 8001710:	08009be8 	.word	0x08009be8

08001714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171a:	f000 fd13 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171e:	f000 f895 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001722:	f000 f9f9 	bl	8001b18 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001726:	f000 f8fb 	bl	8001920 <MX_CAN1_Init>
  MX_TIM5_Init();
 800172a:	f000 f92f 	bl	800198c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800172e:	f000 f99f 	bl	8001a70 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001732:	f000 f9c7 	bl	8001ac4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start the CAN peripheral
      if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001736:	4837      	ldr	r0, [pc, #220]	@ (8001814 <main+0x100>)
 8001738:	f000 ff76 	bl	8002628 <HAL_CAN_Start>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <main+0x3c>
      {
          UART_Transmit_String(&huart2, "CAN Start Failed!\r\n");
 8001742:	4935      	ldr	r1, [pc, #212]	@ (8001818 <main+0x104>)
 8001744:	4835      	ldr	r0, [pc, #212]	@ (800181c <main+0x108>)
 8001746:	f7ff fc6b 	bl	8001020 <UART_Transmit_String>
          Error_Handler();
 800174a:	f000 fa45 	bl	8001bd8 <Error_Handler>
 800174e:	e003      	b.n	8001758 <main+0x44>
      } else {
          UART_Transmit_String(&huart2, "CAN Started in Normal Mode.\r\n");
 8001750:	4933      	ldr	r1, [pc, #204]	@ (8001820 <main+0x10c>)
 8001752:	4832      	ldr	r0, [pc, #200]	@ (800181c <main+0x108>)
 8001754:	f7ff fc64 	bl	8001020 <UART_Transmit_String>
      }

      // Activate CAN Notifications (Interrupts)
      if (HAL_CAN_ActivateNotification(&hcan1,
 8001758:	f640 7103 	movw	r1, #3843	@ 0xf03
 800175c:	482d      	ldr	r0, [pc, #180]	@ (8001814 <main+0x100>)
 800175e:	f001 f912 	bl	8002986 <HAL_CAN_ActivateNotification>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <main+0x62>
                                       CAN_IT_ERROR_WARNING        |
                                       CAN_IT_ERROR_PASSIVE        |
                                       CAN_IT_LAST_ERROR_CODE
                                      ) != HAL_OK)
      {
          UART_Transmit_String(&huart2, "CAN Notification Activation Failed!\r\n");
 8001768:	492e      	ldr	r1, [pc, #184]	@ (8001824 <main+0x110>)
 800176a:	482c      	ldr	r0, [pc, #176]	@ (800181c <main+0x108>)
 800176c:	f7ff fc58 	bl	8001020 <UART_Transmit_String>
          Error_Handler();
 8001770:	f000 fa32 	bl	8001bd8 <Error_Handler>
 8001774:	e003      	b.n	800177e <main+0x6a>
      } else {
          UART_Transmit_String(&huart2, "CAN Notifications Activated.\r\n");
 8001776:	492c      	ldr	r1, [pc, #176]	@ (8001828 <main+0x114>)
 8001778:	4828      	ldr	r0, [pc, #160]	@ (800181c <main+0x108>)
 800177a:	f7ff fc51 	bl	8001020 <UART_Transmit_String>
      }


      // Configure CAN Filter to accept messages from Arduino (ID 0x457 for combined sensor data)
      CAN_FilterTypeDef sFilterConfig;
      sFilterConfig.FilterBank = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001786:	2301      	movs	r3, #1
 8001788:	61fb      	str	r3, [r7, #28]
      sFilterConfig.FilterIdHigh = 0x457 << 5;
 800178a:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 800178e:	603b      	str	r3, [r7, #0]
      sFilterConfig.FilterIdLow = 0x0000;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterMaskIdHigh = 0xFFF << 5;
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <main+0x118>)
 8001796:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterMaskIdLow = 0x0000;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterActivation = ENABLE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	623b      	str	r3, [r7, #32]
      sFilterConfig.SlaveStartFilterBank = 14;
 80017a4:	230e      	movs	r3, #14
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24

      if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4819      	ldr	r0, [pc, #100]	@ (8001814 <main+0x100>)
 80017ae:	f000 fe5b 	bl	8002468 <HAL_CAN_ConfigFilter>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <main+0xb2>
      {
          UART_Transmit_String(&huart2, "CAN Filter Config Failed!\r\n");
 80017b8:	491d      	ldr	r1, [pc, #116]	@ (8001830 <main+0x11c>)
 80017ba:	4818      	ldr	r0, [pc, #96]	@ (800181c <main+0x108>)
 80017bc:	f7ff fc30 	bl	8001020 <UART_Transmit_String>
          Error_Handler();
 80017c0:	f000 fa0a 	bl	8001bd8 <Error_Handler>
 80017c4:	e003      	b.n	80017ce <main+0xba>
      } else {
          UART_Transmit_String(&huart2, "CAN Filter Configured to accept 0x457.\r\n");
 80017c6:	491b      	ldr	r1, [pc, #108]	@ (8001834 <main+0x120>)
 80017c8:	4814      	ldr	r0, [pc, #80]	@ (800181c <main+0x108>)
 80017ca:	f7ff fc29 	bl	8001020 <UART_Transmit_String>
      }

      // NEW: Start the Timer in Input Capture Mode and enable its interrupt
      if (HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1) != HAL_OK)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4819      	ldr	r0, [pc, #100]	@ (8001838 <main+0x124>)
 80017d2:	f002 fb51 	bl	8003e78 <HAL_TIM_IC_Start_IT>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <main+0xd6>
      {
          UART_Transmit_String(&huart2, "Timer 5 Input Capture Start Failed!\r\n");
 80017dc:	4917      	ldr	r1, [pc, #92]	@ (800183c <main+0x128>)
 80017de:	480f      	ldr	r0, [pc, #60]	@ (800181c <main+0x108>)
 80017e0:	f7ff fc1e 	bl	8001020 <UART_Transmit_String>
          Error_Handler();
 80017e4:	f000 f9f8 	bl	8001bd8 <Error_Handler>
 80017e8:	e003      	b.n	80017f2 <main+0xde>
      }
      else
      {
          UART_Transmit_String(&huart2, "Timer 5 Input Capture Started.\r\n");
 80017ea:	4915      	ldr	r1, [pc, #84]	@ (8001840 <main+0x12c>)
 80017ec:	480b      	ldr	r0, [pc, #44]	@ (800181c <main+0x108>)
 80017ee:	f7ff fc17 	bl	8001020 <UART_Transmit_String>
      }


      UART_Transmit_String(&huart2, uart_startup_msg);
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <main+0x130>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4808      	ldr	r0, [pc, #32]	@ (800181c <main+0x108>)
 80017fa:	f7ff fc11 	bl	8001020 <UART_Transmit_String>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Toggle_LED(GPIOD, GPIO_PIN_12); // Green LED heartbeat
 80017fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001802:	4811      	ldr	r0, [pc, #68]	@ (8001848 <main+0x134>)
 8001804:	f7ff fc36 	bl	8001074 <Toggle_LED>
	  HAL_Delay(500);
 8001808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800180c:	f000 fd0c 	bl	8002228 <HAL_Delay>
	  Toggle_LED(GPIOD, GPIO_PIN_12); // Green LED heartbeat
 8001810:	bf00      	nop
 8001812:	e7f4      	b.n	80017fe <main+0xea>
 8001814:	200001f4 	.word	0x200001f4
 8001818:	08009e5c 	.word	0x08009e5c
 800181c:	20000264 	.word	0x20000264
 8001820:	08009e70 	.word	0x08009e70
 8001824:	08009e90 	.word	0x08009e90
 8001828:	08009eb8 	.word	0x08009eb8
 800182c:	0001ffe0 	.word	0x0001ffe0
 8001830:	08009ed8 	.word	0x08009ed8
 8001834:	08009ef4 	.word	0x08009ef4
 8001838:	2000021c 	.word	0x2000021c
 800183c:	08009f20 	.word	0x08009f20
 8001840:	08009f48 	.word	0x08009f48
 8001844:	20000000 	.word	0x20000000
 8001848:	40020c00 	.word	0x40020c00

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	@ 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2230      	movs	r2, #48	@ 0x30
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f004 fdb1 	bl	80063c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <SystemClock_Config+0xcc>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <SystemClock_Config+0xcc>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a21      	ldr	r2, [pc, #132]	@ (800191c <SystemClock_Config+0xd0>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <SystemClock_Config+0xd0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018bc:	2308      	movs	r3, #8
 80018be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018c0:	23c0      	movs	r3, #192	@ 0xc0
 80018c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 fd91 	bl	80033f8 <HAL_RCC_OscConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018dc:	f000 f97c 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e0:	230f      	movs	r3, #15
 80018e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e4:	2302      	movs	r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2103      	movs	r1, #3
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fff2 	bl	80038e8 <HAL_RCC_ClockConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800190a:	f000 f965 	bl	8001bd8 <Error_Handler>
  }
}
 800190e:	bf00      	nop
 8001910:	3750      	adds	r7, #80	@ 0x50
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001926:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <MX_CAN1_Init+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_CAN1_Init+0x64>)
 800192c:	2203      	movs	r2, #3
 800192e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_CAN1_Init+0x64>)
 800193e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001942:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001946:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800194a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <MX_CAN1_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <MX_CAN1_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_CAN1_Init+0x64>)
 800196c:	2200      	movs	r2, #0
 800196e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_CAN1_Init+0x64>)
 8001972:	f000 fc7d 	bl	8002270 <HAL_CAN_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800197c:	f000 f92c 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200001f4 	.word	0x200001f4
 8001988:	40006400 	.word	0x40006400

0800198c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	@ 0x28
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019b8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a6c <MX_TIM5_Init+0xe0>)
 80019ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9599;
 80019bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019be:	f242 527f 	movw	r2, #9599	@ 0x257f
 80019c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80019ca:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019de:	4822      	ldr	r0, [pc, #136]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019e0:	f002 f9a2 	bl	8003d28 <HAL_TIM_Base_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 80019ea:	f000 f8f5 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4619      	mov	r1, r3
 80019fa:	481b      	ldr	r0, [pc, #108]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 80019fc:	f002 fcf0 	bl	80043e0 <HAL_TIM_ConfigClockSource>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001a06:	f000 f8e7 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001a0a:	4817      	ldr	r0, [pc, #92]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 8001a0c:	f002 f9db 	bl	8003dc6 <HAL_TIM_IC_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001a16:	f000 f8df 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4619      	mov	r1, r3
 8001a28:	480f      	ldr	r0, [pc, #60]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 8001a2a:	f003 f8a3 	bl	8004b74 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001a34:	f000 f8d0 	bl	8001bd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <MX_TIM5_Init+0xdc>)
 8001a50:	f002 fc2a 	bl	80042a8 <HAL_TIM_IC_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8001a5a:	f000 f8bd 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	@ 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000021c 	.word	0x2000021c
 8001a6c:	40000c00 	.word	0x40000c00

08001a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <MX_USART2_UART_Init+0x50>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_USART2_UART_Init+0x4c>)
 8001aa8:	f003 f8f4 	bl	8004c94 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ab2:	f000 f891 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000264 	.word	0x20000264
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_USART3_UART_Init+0x50>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USART3_UART_Init+0x4c>)
 8001afc:	f003 f8ca 	bl	8004c94 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b06:	f000 f867 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200002ac 	.word	0x200002ac
 8001b14:	40004800 	.word	0x40004800

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b27      	ldr	r3, [pc, #156]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a26      	ldr	r2, [pc, #152]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a11      	ldr	r2, [pc, #68]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <MX_GPIO_Init+0xb8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ba4:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <MX_GPIO_Init+0xbc>)
 8001ba6:	f001 fbf3 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001baa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_GPIO_Init+0xbc>)
 8001bc4:	f001 fa48 	bl	8003058 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	@ 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020c00 	.word	0x40020c00

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <Error_Handler+0x8>

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a25      	ldr	r2, [pc, #148]	@ (8001ce8 <HAL_CAN_MspInit+0xb4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d144      	bne.n	8001ce0 <HAL_CAN_MspInit+0xac>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <HAL_CAN_MspInit+0xb8>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4a23      	ldr	r2, [pc, #140]	@ (8001cec <HAL_CAN_MspInit+0xb8>)
 8001c60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_CAN_MspInit+0xb8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_CAN_MspInit+0xb8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <HAL_CAN_MspInit+0xb8>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_CAN_MspInit+0xb8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ca0:	2309      	movs	r3, #9
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4811      	ldr	r0, [pc, #68]	@ (8001cf0 <HAL_CAN_MspInit+0xbc>)
 8001cac:	f001 f9d4 	bl	8003058 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2013      	movs	r0, #19
 8001cb6:	f001 f998 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001cba:	2013      	movs	r0, #19
 8001cbc:	f001 f9b1 	bl	8003022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f001 f990 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cca:	2014      	movs	r0, #20
 8001ccc:	f001 f9a9 	bl	8003022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2016      	movs	r0, #22
 8001cd6:	f001 f988 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001cda:	2016      	movs	r0, #22
 8001cdc:	f001 f9a1 	bl	8003022 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	@ 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40006400 	.word	0x40006400
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM5)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <HAL_TIM_Base_MspInit+0x94>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d133      	bne.n	8001d7e <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <HAL_TIM_Base_MspInit+0x98>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <HAL_TIM_Base_MspInit+0x98>)
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <HAL_TIM_Base_MspInit+0x98>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_TIM_Base_MspInit+0x98>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <HAL_TIM_Base_MspInit+0x98>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_TIM_Base_MspInit+0x98>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4809      	ldr	r0, [pc, #36]	@ (8001d90 <HAL_TIM_Base_MspInit+0x9c>)
 8001d6a:	f001 f975 	bl	8003058 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2032      	movs	r0, #50	@ 0x32
 8001d74:	f001 f939 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d78:	2032      	movs	r0, #50	@ 0x32
 8001d7a:	f001 f952 	bl	8003022 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40000c00 	.word	0x40000c00
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	@ 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a32      	ldr	r2, [pc, #200]	@ (8001e7c <HAL_UART_MspInit+0xe8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12c      	bne.n	8001e10 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	4b31      	ldr	r3, [pc, #196]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	4a30      	ldr	r2, [pc, #192]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a29      	ldr	r2, [pc, #164]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dee:	230c      	movs	r3, #12
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dfe:	2307      	movs	r3, #7
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	481e      	ldr	r0, [pc, #120]	@ (8001e84 <HAL_UART_MspInit+0xf0>)
 8001e0a:	f001 f925 	bl	8003058 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e0e:	e031      	b.n	8001e74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_UART_MspInit+0xf4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12c      	bne.n	8001e74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <HAL_UART_MspInit+0xec>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e64:	2307      	movs	r3, #7
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4807      	ldr	r0, [pc, #28]	@ (8001e8c <HAL_UART_MspInit+0xf8>)
 8001e70:	f001 f8f2 	bl	8003058 <HAL_GPIO_Init>
}
 8001e74:	bf00      	nop
 8001e76:	3730      	adds	r7, #48	@ 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40004800 	.word	0x40004800
 8001e8c:	40020400 	.word	0x40020400

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <NMI_Handler+0x4>

08001e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee6:	f000 f97f 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <CAN1_TX_IRQHandler+0x10>)
 8001ef6:	f000 fd6c 	bl	80029d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200001f4 	.word	0x200001f4

08001f04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <CAN1_RX0_IRQHandler+0x10>)
 8001f0a:	f000 fd62 	bl	80029d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200001f4 	.word	0x200001f4

08001f18 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <CAN1_SCE_IRQHandler+0x10>)
 8001f1e:	f000 fd58 	bl	80029d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200001f4 	.word	0x200001f4

08001f2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <TIM5_IRQHandler+0x10>)
 8001f32:	f002 f8c9 	bl	80040c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000021c 	.word	0x2000021c

08001f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_kill>:

int _kill(int pid, int sig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5a:	f004 fa85 	bl	8006468 <__errno>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2216      	movs	r2, #22
 8001f62:	601a      	str	r2, [r3, #0]
  return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_exit>:

void _exit (int status)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ffe7 	bl	8001f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f82:	bf00      	nop
 8001f84:	e7fd      	b.n	8001f82 <_exit+0x12>

08001f86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e00a      	b.n	8001fae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f98:	f3af 8000 	nop.w
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	60ba      	str	r2, [r7, #8]
 8001fa4:	b2ca      	uxtb	r2, r1
 8001fa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	dbf0      	blt.n	8001f98 <_read+0x12>
  }

  return len;
 8001fb6:	687b      	ldr	r3, [r7, #4]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e009      	b.n	8001fe6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	60ba      	str	r2, [r7, #8]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dbf1      	blt.n	8001fd2 <_write+0x12>
  }
  return len;
 8001fee:	687b      	ldr	r3, [r7, #4]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_close>:

int _close(int file)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002020:	605a      	str	r2, [r3, #4]
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_isatty>:

int _isatty(int file)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002068:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002074:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002090:	f004 f9ea 	bl	8006468 <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	220c      	movs	r2, #12
 8002098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a6:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20020000 	.word	0x20020000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	2000046c 	.word	0x2000046c
 80020c8:	200005c0 	.word	0x200005c0

080020cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <SystemInit+0x20>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <SystemInit+0x20>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002128 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020f4:	f7ff ffea 	bl	80020cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f004 f9a9 	bl	8006474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002122:	f7ff faf7 	bl	8001714 <main>
  bx  lr    
 8002126:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002134:	0800a3bc 	.word	0x0800a3bc
  ldr r2, =_sbss
 8002138:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800213c:	200005c0 	.word	0x200005c0

08002140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002148:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <HAL_Init+0x40>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_Init+0x40>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800215e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <HAL_Init+0x40>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f000 ff31 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002172:	200f      	movs	r0, #15
 8002174:	f000 f808 	bl	8002188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002178:	f7ff fd34 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_InitTick+0x54>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <HAL_InitTick+0x58>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 ff49 	bl	800303e <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00e      	b.n	80021d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d80a      	bhi.n	80021d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021c4:	f000 ff11 	bl	8002fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c8:	4a06      	ldr	r2, [pc, #24]	@ (80021e4 <HAL_InitTick+0x5c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000004 	.word	0x20000004
 80021e0:	2000000c 	.word	0x2000000c
 80021e4:	20000008 	.word	0x20000008

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	@ (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2000000c 	.word	0x2000000c
 800220c:	20000470 	.word	0x20000470

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000470 	.word	0x20000470

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_Delay+0x44>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffde 	bl	8002210 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000000c 	.word	0x2000000c

08002270 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0ed      	b.n	800245e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fcd0 	bl	8001c34 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a4:	f7ff ffb4 	bl	8002210 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022aa:	e012      	b.n	80022d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ac:	f7ff ffb0 	bl	8002210 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b0a      	cmp	r3, #10
 80022b8:	d90b      	bls.n	80022d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2205      	movs	r2, #5
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0c5      	b.n	800245e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0e5      	beq.n	80022ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0202 	bic.w	r2, r2, #2
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f0:	f7ff ff8e 	bl	8002210 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022f6:	e012      	b.n	800231e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022f8:	f7ff ff8a 	bl	8002210 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b0a      	cmp	r3, #10
 8002304:	d90b      	bls.n	800231e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2205      	movs	r2, #5
 8002316:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e09f      	b.n	800245e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e5      	bne.n	80022f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e1b      	ldrb	r3, [r3, #24]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d108      	bne.n	8002346 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e007      	b.n	8002356 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7e5b      	ldrb	r3, [r3, #25]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d108      	bne.n	8002370 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e007      	b.n	8002380 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800237e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e9b      	ldrb	r3, [r3, #26]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d108      	bne.n	800239a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e007      	b.n	80023aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0220 	bic.w	r2, r2, #32
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7edb      	ldrb	r3, [r3, #27]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0210 	bic.w	r2, r2, #16
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e007      	b.n	80023d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0210 	orr.w	r2, r2, #16
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7f1b      	ldrb	r3, [r3, #28]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0208 	orr.w	r2, r2, #8
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e007      	b.n	80023fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0208 	bic.w	r2, r2, #8
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7f5b      	ldrb	r3, [r3, #29]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d108      	bne.n	8002418 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0204 	orr.w	r2, r2, #4
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e007      	b.n	8002428 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0204 	bic.w	r2, r2, #4
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	ea42 0103 	orr.w	r1, r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d003      	beq.n	800248e <HAL_CAN_ConfigFilter+0x26>
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	2b02      	cmp	r3, #2
 800248a:	f040 80be 	bne.w	800260a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800248e:	4b65      	ldr	r3, [pc, #404]	@ (8002624 <HAL_CAN_ConfigFilter+0x1bc>)
 8002490:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024a8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	431a      	orrs	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2201      	movs	r2, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	401a      	ands	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d123      	bne.n	8002538 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002512:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3248      	adds	r2, #72	@ 0x48
 8002518:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800252c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800252e:	6979      	ldr	r1, [r7, #20]
 8002530:	3348      	adds	r3, #72	@ 0x48
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d122      	bne.n	8002586 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	431a      	orrs	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002560:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3248      	adds	r2, #72	@ 0x48
 8002566:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800257a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800257c:	6979      	ldr	r1, [r7, #20]
 800257e:	3348      	adds	r3, #72	@ 0x48
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43db      	mvns	r3, r3
 8002598:	401a      	ands	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80025a0:	e007      	b.n	80025b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80025cc:	e007      	b.n	80025de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025fc:	f023 0201 	bic.w	r2, r3, #1
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e006      	b.n	8002618 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40006400 	.word	0x40006400

08002628 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d12e      	bne.n	800269a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002654:	f7ff fddc 	bl	8002210 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800265a:	e012      	b.n	8002682 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800265c:	f7ff fdd8 	bl	8002210 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b0a      	cmp	r3, #10
 8002668:	d90b      	bls.n	8002682 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2205      	movs	r2, #5
 800267a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e012      	b.n	80026a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e5      	bne.n	800265c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e006      	b.n	80026a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
  }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d133      	bne.n	800272c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026d4:	f7ff fd9c 	bl	8002210 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026da:	e012      	b.n	8002702 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026dc:	f7ff fd98 	bl	8002210 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b0a      	cmp	r3, #10
 80026e8:	d90b      	bls.n	8002702 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2205      	movs	r2, #5
 80026fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e01b      	b.n	800273a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0e5      	beq.n	80026dc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0202 	bic.w	r2, r2, #2
 800271e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e006      	b.n	800273a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002742:	b480      	push	{r7}
 8002744:	b087      	sub	sp, #28
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002756:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d003      	beq.n	8002766 <HAL_CAN_GetRxMessage+0x24>
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b02      	cmp	r3, #2
 8002762:	f040 8103 	bne.w	800296c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10e      	bne.n	800278a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0f7      	b.n	800297a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0e8      	b.n	800297a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	331b      	adds	r3, #27
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4413      	add	r3, r2
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0204 	and.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	331b      	adds	r3, #27
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	331b      	adds	r3, #27
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	08db      	lsrs	r3, r3, #3
 80027f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	331b      	adds	r3, #27
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0202 	and.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	331b      	adds	r3, #27
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2208      	movs	r2, #8
 800282a:	611a      	str	r2, [r3, #16]
 800282c:	e00b      	b.n	8002846 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	331b      	adds	r3, #27
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	331b      	adds	r3, #27
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	b2da      	uxtb	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	331b      	adds	r3, #27
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4413      	add	r3, r2
 8002880:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	4413      	add	r3, r2
 8002896:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0a1a      	lsrs	r2, r3, #8
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0c1a      	lsrs	r2, r3, #16
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3302      	adds	r3, #2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e1a      	lsrs	r2, r3, #24
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	3303      	adds	r3, #3
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3304      	adds	r3, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0a1a      	lsrs	r2, r3, #8
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3305      	adds	r3, #5
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	4413      	add	r3, r2
 8002916:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0c1a      	lsrs	r2, r3, #16
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	3306      	adds	r3, #6
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4413      	add	r3, r2
 8002930:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e1a      	lsrs	r2, r3, #24
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	3307      	adds	r3, #7
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d108      	bne.n	8002958 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0220 	orr.w	r2, r2, #32
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	e007      	b.n	8002968 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e006      	b.n	800297a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d002      	beq.n	80029a4 <HAL_CAN_ActivateNotification+0x1e>
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d109      	bne.n	80029b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6959      	ldr	r1, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e006      	b.n	80029c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b08a      	sub	sp, #40	@ 0x28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d07c      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d023      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2201      	movs	r2, #1
 8002a28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f983 	bl	8002d40 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a3a:	e016      	b.n	8002a6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4e:	e00c      	b.n	8002a6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a62:	e002      	b.n	8002a6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f989 	bl	8002d7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d024      	beq.n	8002abe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f963 	bl	8002d54 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a8e:	e016      	b.n	8002abe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	e00c      	b.n	8002abe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab6:	e002      	b.n	8002abe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f969 	bl	8002d90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d024      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ad0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f943 	bl	8002d68 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ae2:	e016      	b.n	8002b12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af6:	e00c      	b.n	8002b12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0a:	e002      	b.n	8002b12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f949 	bl	8002da4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00c      	beq.n	8002b36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2210      	movs	r2, #16
 8002b34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2208      	movs	r2, #8
 8002b50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f930 	bl	8002db8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7fe fb63 	bl	800123c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2210      	movs	r2, #16
 8002b98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f912 	bl	8002de0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8f9 	bl	8002dcc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8fc 	bl	8002df4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2208      	movs	r2, #8
 8002c16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8f5 	bl	8002e08 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d07b      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d072      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d043      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d03e      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca0:	2b60      	cmp	r3, #96	@ 0x60
 8002ca2:	d02b      	beq.n	8002cfc <HAL_CAN_IRQHandler+0x32a>
 8002ca4:	2b60      	cmp	r3, #96	@ 0x60
 8002ca6:	d82e      	bhi.n	8002d06 <HAL_CAN_IRQHandler+0x334>
 8002ca8:	2b50      	cmp	r3, #80	@ 0x50
 8002caa:	d022      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x320>
 8002cac:	2b50      	cmp	r3, #80	@ 0x50
 8002cae:	d82a      	bhi.n	8002d06 <HAL_CAN_IRQHandler+0x334>
 8002cb0:	2b40      	cmp	r3, #64	@ 0x40
 8002cb2:	d019      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x316>
 8002cb4:	2b40      	cmp	r3, #64	@ 0x40
 8002cb6:	d826      	bhi.n	8002d06 <HAL_CAN_IRQHandler+0x334>
 8002cb8:	2b30      	cmp	r3, #48	@ 0x30
 8002cba:	d010      	beq.n	8002cde <HAL_CAN_IRQHandler+0x30c>
 8002cbc:	2b30      	cmp	r3, #48	@ 0x30
 8002cbe:	d822      	bhi.n	8002d06 <HAL_CAN_IRQHandler+0x334>
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d002      	beq.n	8002cca <HAL_CAN_IRQHandler+0x2f8>
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d005      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cc8:	e01d      	b.n	8002d06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cd2:	e019      	b.n	8002d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cdc:	e014      	b.n	8002d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ce6:	e00f      	b.n	8002d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cf0:	e00a      	b.n	8002d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cfa:	e005      	b.n	8002d08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d04:	e000      	b.n	8002d08 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fc3e 	bl	80015b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	@ 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e66:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4907      	ldr	r1, [pc, #28]	@ (8002ed0 <__NVIC_EnableIRQ+0x38>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0a      	blt.n	8002efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	490c      	ldr	r1, [pc, #48]	@ (8002f20 <__NVIC_SetPriority+0x4c>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002efc:	e00a      	b.n	8002f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4908      	ldr	r1, [pc, #32]	@ (8002f24 <__NVIC_SetPriority+0x50>)
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	761a      	strb	r2, [r3, #24]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000e100 	.word	0xe000e100
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	@ 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f1c3 0307 	rsb	r3, r3, #7
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	bf28      	it	cs
 8002f46:	2304      	movcs	r3, #4
 8002f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d902      	bls.n	8002f58 <NVIC_EncodePriority+0x30>
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3b03      	subs	r3, #3
 8002f56:	e000      	b.n	8002f5a <NVIC_EncodePriority+0x32>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	4313      	orrs	r3, r2
         );
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fb4:	f7ff ff8e 	bl	8002ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff29 	bl	8002e34 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff3e 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff8e 	bl	8002f28 <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5d 	bl	8002ed4 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff31 	bl	8002e98 <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffa2 	bl	8002f90 <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	@ 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e16b      	b.n	800334c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	f040 815a 	bne.w	8003346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d005      	beq.n	80030aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d130      	bne.n	800310c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 0201 	and.w	r2, r3, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b03      	cmp	r3, #3
 8003116:	d017      	beq.n	8003148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d123      	bne.n	800319c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	220f      	movs	r2, #15
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	08da      	lsrs	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3208      	adds	r2, #8
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0203 	and.w	r2, r3, #3
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80b4 	beq.w	8003346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b60      	ldr	r3, [pc, #384]	@ (8003364 <HAL_GPIO_Init+0x30c>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003364 <HAL_GPIO_Init+0x30c>)
 80031e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003364 <HAL_GPIO_Init+0x30c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003368 <HAL_GPIO_Init+0x310>)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	3302      	adds	r3, #2
 8003202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a52      	ldr	r2, [pc, #328]	@ (800336c <HAL_GPIO_Init+0x314>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02b      	beq.n	800327e <HAL_GPIO_Init+0x226>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a51      	ldr	r2, [pc, #324]	@ (8003370 <HAL_GPIO_Init+0x318>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d025      	beq.n	800327a <HAL_GPIO_Init+0x222>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a50      	ldr	r2, [pc, #320]	@ (8003374 <HAL_GPIO_Init+0x31c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01f      	beq.n	8003276 <HAL_GPIO_Init+0x21e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4f      	ldr	r2, [pc, #316]	@ (8003378 <HAL_GPIO_Init+0x320>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d019      	beq.n	8003272 <HAL_GPIO_Init+0x21a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4e      	ldr	r2, [pc, #312]	@ (800337c <HAL_GPIO_Init+0x324>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_GPIO_Init+0x216>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4d      	ldr	r2, [pc, #308]	@ (8003380 <HAL_GPIO_Init+0x328>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00d      	beq.n	800326a <HAL_GPIO_Init+0x212>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4c      	ldr	r2, [pc, #304]	@ (8003384 <HAL_GPIO_Init+0x32c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4b      	ldr	r2, [pc, #300]	@ (8003388 <HAL_GPIO_Init+0x330>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_GPIO_Init+0x20a>
 800325e:	2307      	movs	r3, #7
 8003260:	e00e      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003262:	2308      	movs	r3, #8
 8003264:	e00c      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003266:	2306      	movs	r3, #6
 8003268:	e00a      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800326a:	2305      	movs	r3, #5
 800326c:	e008      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800326e:	2304      	movs	r3, #4
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003272:	2303      	movs	r3, #3
 8003274:	e004      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003276:	2302      	movs	r3, #2
 8003278:	e002      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800327e:	2300      	movs	r3, #0
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	f002 0203 	and.w	r2, r2, #3
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	4093      	lsls	r3, r2
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003290:	4935      	ldr	r1, [pc, #212]	@ (8003368 <HAL_GPIO_Init+0x310>)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329e:	4b3b      	ldr	r3, [pc, #236]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c2:	4a32      	ldr	r2, [pc, #200]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c8:	4b30      	ldr	r3, [pc, #192]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032ec:	4a27      	ldr	r2, [pc, #156]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032f2:	4b26      	ldr	r3, [pc, #152]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003316:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_GPIO_Init+0x334>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_GPIO_Init+0x334>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003340:	4a12      	ldr	r2, [pc, #72]	@ (800338c <HAL_GPIO_Init+0x334>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3301      	adds	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	f67f ae90 	bls.w	8003074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3724      	adds	r7, #36	@ 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40013800 	.word	0x40013800
 800336c:	40020000 	.word	0x40020000
 8003370:	40020400 	.word	0x40020400
 8003374:	40020800 	.word	0x40020800
 8003378:	40020c00 	.word	0x40020c00
 800337c:	40021000 	.word	0x40021000
 8003380:	40021400 	.word	0x40021400
 8003384:	40021800 	.word	0x40021800
 8003388:	40021c00 	.word	0x40021c00
 800338c:	40013c00 	.word	0x40013c00

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d4:	887a      	ldrh	r2, [r7, #2]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	041a      	lsls	r2, r3, #16
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43d9      	mvns	r1, r3
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	400b      	ands	r3, r1
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	619a      	str	r2, [r3, #24]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e267      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d075      	beq.n	8003502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	4b88      	ldr	r3, [pc, #544]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d00c      	beq.n	800343c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4b85      	ldr	r3, [pc, #532]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342a:	2b08      	cmp	r3, #8
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343a:	d10b      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	4b7e      	ldr	r3, [pc, #504]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05b      	beq.n	8003500 <HAL_RCC_OscConfig+0x108>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d157      	bne.n	8003500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e242      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x74>
 800345e:	4b76      	ldr	r3, [pc, #472]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a75      	ldr	r2, [pc, #468]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x98>
 8003476:	4b70      	ldr	r3, [pc, #448]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a6f      	ldr	r2, [pc, #444]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b6d      	ldr	r3, [pc, #436]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6c      	ldr	r2, [pc, #432]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 8003490:	4b69      	ldr	r3, [pc, #420]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a68      	ldr	r2, [pc, #416]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b66      	ldr	r3, [pc, #408]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a65      	ldr	r2, [pc, #404]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe feae 	bl	8002210 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe feaa 	bl	8002210 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e207      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xc0>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe fe9a 	bl	8002210 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe fe96 	bl	8002210 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	@ 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1f3      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b51      	ldr	r3, [pc, #324]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0xe8>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d063      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	4b4a      	ldr	r3, [pc, #296]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351a:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11c      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b44      	ldr	r3, [pc, #272]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4b41      	ldr	r3, [pc, #260]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e1c7      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4937      	ldr	r1, [pc, #220]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	e03a      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003568:	4b34      	ldr	r3, [pc, #208]	@ (800363c <HAL_RCC_OscConfig+0x244>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fe fe4f 	bl	8002210 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003576:	f7fe fe4b 	bl	8002210 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1a8      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4b2b      	ldr	r3, [pc, #172]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4925      	ldr	r1, [pc, #148]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b24      	ldr	r3, [pc, #144]	@ (800363c <HAL_RCC_OscConfig+0x244>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe fe2e 	bl	8002210 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe fe2a 	bl	8002210 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e187      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d036      	beq.n	8003650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <HAL_RCC_OscConfig+0x248>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe fe0e 	bl	8002210 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fe fe0a 	bl	8002210 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e167      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800360c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x200>
 8003616:	e01b      	b.n	8003650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <HAL_RCC_OscConfig+0x248>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fdf7 	bl	8002210 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	e00e      	b.n	8003644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003626:	f7fe fdf3 	bl	8002210 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d907      	bls.n	8003644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e150      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
 8003638:	40023800 	.word	0x40023800
 800363c:	42470000 	.word	0x42470000
 8003640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	4b88      	ldr	r3, [pc, #544]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ea      	bne.n	8003626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8097 	beq.w	800378c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003662:	4b81      	ldr	r3, [pc, #516]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	4b7d      	ldr	r3, [pc, #500]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	4a7c      	ldr	r2, [pc, #496]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	@ 0x40
 800367e:	4b7a      	ldr	r3, [pc, #488]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b77      	ldr	r3, [pc, #476]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369a:	4b74      	ldr	r3, [pc, #464]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a73      	ldr	r2, [pc, #460]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe fdb3 	bl	8002210 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe fdaf 	bl	8002210 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e10c      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	4b6a      	ldr	r3, [pc, #424]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x2ea>
 80036d4:	4b64      	ldr	r3, [pc, #400]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d8:	4a63      	ldr	r2, [pc, #396]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e0:	e01c      	b.n	800371c <HAL_RCC_OscConfig+0x324>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x30c>
 80036ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6713      	str	r3, [r2, #112]	@ 0x70
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0x324>
 8003704:	4b58      	ldr	r3, [pc, #352]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003708:	4a57      	ldr	r2, [pc, #348]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003710:	4b55      	ldr	r3, [pc, #340]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	4a54      	ldr	r2, [pc, #336]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fd74 	bl	8002210 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe fd70 	bl	8002210 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0cb      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	4b49      	ldr	r3, [pc, #292]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ee      	beq.n	800372c <HAL_RCC_OscConfig+0x334>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003750:	f7fe fd5e 	bl	8002210 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fe fd5a 	bl	8002210 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0b5      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	4b3e      	ldr	r3, [pc, #248]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ee      	bne.n	8003758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003780:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	4a38      	ldr	r2, [pc, #224]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800378a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a1 	beq.w	80038d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003796:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d05c      	beq.n	800385c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d141      	bne.n	800382e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b31      	ldr	r3, [pc, #196]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fd2e 	bl	8002210 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe fd2a 	bl	8002210 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e087      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	019b      	lsls	r3, r3, #6
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	3b01      	subs	r3, #1
 80037f0:	041b      	lsls	r3, r3, #16
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	491b      	ldr	r1, [pc, #108]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fe fd03 	bl	8002210 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380e:	f7fe fcff 	bl	8002210 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e05c      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x416>
 800382c:	e054      	b.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe fcec 	bl	8002210 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe fce8 	bl	8002210 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e045      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x444>
 800385a:	e03d      	b.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e038      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000
 8003870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003874:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_RCC_OscConfig+0x4ec>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d028      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d121      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d11a      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d111      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	3b01      	subs	r3, #1
 80038be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800

080038e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0cc      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038fc:	4b68      	ldr	r3, [pc, #416]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d90c      	bls.n	8003924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b65      	ldr	r3, [pc, #404]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a58      	ldr	r2, [pc, #352]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a52      	ldr	r2, [pc, #328]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800395e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d044      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d119      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e067      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c6:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4934      	ldr	r1, [pc, #208]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fc1a 	bl	8002210 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e0:	f7fe fc16 	bl	8002210 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 020c 	and.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1eb      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d20c      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b22      	ldr	r3, [pc, #136]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	490a      	ldr	r1, [pc, #40]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fb7a 	bl	8002188 <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023c00 	.word	0x40023c00
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	08009f6c 	.word	0x08009f6c
 8003aac:	20000004 	.word	0x20000004
 8003ab0:	20000008 	.word	0x20000008

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab8:	b094      	sub	sp, #80	@ 0x50
 8003aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003acc:	4b79      	ldr	r3, [pc, #484]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d00d      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	f200 80e1 	bhi.w	8003ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae6:	e0db      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b73      	ldr	r3, [pc, #460]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003aec:	e0db      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aee:	4b73      	ldr	r3, [pc, #460]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8003af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003af2:	e0d8      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af4:	4b6f      	ldr	r3, [pc, #444]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003afc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afe:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d063      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	2200      	movs	r2, #0
 8003b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b1e:	2300      	movs	r3, #0
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b26:	4622      	mov	r2, r4
 8003b28:	462b      	mov	r3, r5
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	0159      	lsls	r1, r3, #5
 8003b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b38:	0150      	lsls	r0, r2, #5
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4621      	mov	r1, r4
 8003b40:	1a51      	subs	r1, r2, r1
 8003b42:	6139      	str	r1, [r7, #16]
 8003b44:	4629      	mov	r1, r5
 8003b46:	eb63 0301 	sbc.w	r3, r3, r1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b58:	4659      	mov	r1, fp
 8003b5a:	018b      	lsls	r3, r1, #6
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b62:	4651      	mov	r1, sl
 8003b64:	018a      	lsls	r2, r1, #6
 8003b66:	4651      	mov	r1, sl
 8003b68:	ebb2 0801 	subs.w	r8, r2, r1
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b86:	4690      	mov	r8, r2
 8003b88:	4699      	mov	r9, r3
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	eb18 0303 	adds.w	r3, r8, r3
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	462b      	mov	r3, r5
 8003b94:	eb49 0303 	adc.w	r3, r9, r3
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	024b      	lsls	r3, r1, #9
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	024a      	lsls	r2, r1, #9
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bba:	2200      	movs	r2, #0
 8003bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bc4:	f7fd f860 	bl	8000c88 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	e058      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b38      	ldr	r3, [pc, #224]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	4611      	mov	r1, r2
 8003bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003be2:	623b      	str	r3, [r7, #32]
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	0159      	lsls	r1, r3, #5
 8003bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfe:	0150      	lsls	r0, r2, #5
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4641      	mov	r1, r8
 8003c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c24:	ebb2 040a 	subs.w	r4, r2, sl
 8003c28:	eb63 050b 	sbc.w	r5, r3, fp
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	00eb      	lsls	r3, r5, #3
 8003c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c3a:	00e2      	lsls	r2, r4, #3
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	461d      	mov	r5, r3
 8003c40:	4643      	mov	r3, r8
 8003c42:	18e3      	adds	r3, r4, r3
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	464b      	mov	r3, r9
 8003c48:	eb45 0303 	adc.w	r3, r5, r3
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	028b      	lsls	r3, r1, #10
 8003c5e:	4621      	mov	r1, r4
 8003c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c64:	4621      	mov	r1, r4
 8003c66:	028a      	lsls	r2, r1, #10
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6e:	2200      	movs	r2, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	61fa      	str	r2, [r7, #28]
 8003c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c78:	f7fd f806 	bl	8000c88 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c9e:	e002      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3750      	adds	r7, #80	@ 0x50
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	007a1200 	.word	0x007a1200

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	@ (8003cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cdc:	f7ff fff0 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	@ (8003cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	08009f7c 	.word	0x08009f7c

08003d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d04:	f7ff ffdc 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0b5b      	lsrs	r3, r3, #13
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	@ (8003d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08009f7c 	.word	0x08009f7c

08003d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e041      	b.n	8003dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd ffd0 	bl	8001cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 fc6e 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e041      	b.n	8003e5c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f839 	bl	8003e64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fc1f 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_IC_Start_IT+0x1e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	e013      	b.n	8003ebe <HAL_TIM_IC_Start_IT+0x46>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_IC_Start_IT+0x2e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e00b      	b.n	8003ebe <HAL_TIM_IC_Start_IT+0x46>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_IC_Start_IT+0x3e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	e003      	b.n	8003ebe <HAL_TIM_IC_Start_IT+0x46>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_TIM_IC_Start_IT+0x58>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	e013      	b.n	8003ef8 <HAL_TIM_IC_Start_IT+0x80>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d104      	bne.n	8003ee0 <HAL_TIM_IC_Start_IT+0x68>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e00b      	b.n	8003ef8 <HAL_TIM_IC_Start_IT+0x80>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d104      	bne.n	8003ef0 <HAL_TIM_IC_Start_IT+0x78>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e003      	b.n	8003ef8 <HAL_TIM_IC_Start_IT+0x80>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003efa:	7bbb      	ldrb	r3, [r7, #14]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f00:	7b7b      	ldrb	r3, [r7, #13]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0cc      	b.n	80040a4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_IC_Start_IT+0xa2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f18:	e013      	b.n	8003f42 <HAL_TIM_IC_Start_IT+0xca>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_IC_Start_IT+0xb2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f28:	e00b      	b.n	8003f42 <HAL_TIM_IC_Start_IT+0xca>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_IC_Start_IT+0xc2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f38:	e003      	b.n	8003f42 <HAL_TIM_IC_Start_IT+0xca>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_IC_Start_IT+0xda>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f50:	e013      	b.n	8003f7a <HAL_TIM_IC_Start_IT+0x102>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_IC_Start_IT+0xea>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f60:	e00b      	b.n	8003f7a <HAL_TIM_IC_Start_IT+0x102>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d104      	bne.n	8003f72 <HAL_TIM_IC_Start_IT+0xfa>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f70:	e003      	b.n	8003f7a <HAL_TIM_IC_Start_IT+0x102>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d841      	bhi.n	8004004 <HAL_TIM_IC_Start_IT+0x18c>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <HAL_TIM_IC_Start_IT+0x110>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08004005 	.word	0x08004005
 8003f90:	08004005 	.word	0x08004005
 8003f94:	08004005 	.word	0x08004005
 8003f98:	08003fcf 	.word	0x08003fcf
 8003f9c:	08004005 	.word	0x08004005
 8003fa0:	08004005 	.word	0x08004005
 8003fa4:	08004005 	.word	0x08004005
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08004005 	.word	0x08004005
 8003fb0:	08004005 	.word	0x08004005
 8003fb4:	08004005 	.word	0x08004005
 8003fb8:	08003ff3 	.word	0x08003ff3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0202 	orr.w	r2, r2, #2
 8003fca:	60da      	str	r2, [r3, #12]
      break;
 8003fcc:	e01d      	b.n	800400a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0204 	orr.w	r2, r2, #4
 8003fdc:	60da      	str	r2, [r3, #12]
      break;
 8003fde:	e014      	b.n	800400a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0208 	orr.w	r2, r2, #8
 8003fee:	60da      	str	r2, [r3, #12]
      break;
 8003ff0:	e00b      	b.n	800400a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0210 	orr.w	r2, r2, #16
 8004000:	60da      	str	r2, [r3, #12]
      break;
 8004002:	e002      	b.n	800400a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	bf00      	nop
  }

  if (status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d148      	bne.n	80040a2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2201      	movs	r2, #1
 8004016:	6839      	ldr	r1, [r7, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fd85 	bl	8004b28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a22      	ldr	r2, [pc, #136]	@ (80040ac <HAL_TIM_IC_Start_IT+0x234>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_TIM_IC_Start_IT+0x1f6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004030:	d01d      	beq.n	800406e <HAL_TIM_IC_Start_IT+0x1f6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <HAL_TIM_IC_Start_IT+0x238>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d018      	beq.n	800406e <HAL_TIM_IC_Start_IT+0x1f6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1c      	ldr	r2, [pc, #112]	@ (80040b4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_TIM_IC_Start_IT+0x1f6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <HAL_TIM_IC_Start_IT+0x240>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIM_IC_Start_IT+0x1f6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <HAL_TIM_IC_Start_IT+0x244>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_TIM_IC_Start_IT+0x1f6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <HAL_TIM_IC_Start_IT+0x248>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIM_IC_Start_IT+0x1f6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <HAL_TIM_IC_Start_IT+0x24c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d111      	bne.n	8004092 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d010      	beq.n	80040a2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	e007      	b.n	80040a2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40010400 	.word	0x40010400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40001800 	.word	0x40001800

080040c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d020      	beq.n	800412c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01b      	beq.n	800412c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0202 	mvn.w	r2, #2
 80040fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fc fff4 	bl	8001100 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa76 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fa7d 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d020      	beq.n	8004178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01b      	beq.n	8004178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0204 	mvn.w	r2, #4
 8004148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc ffce 	bl	8001100 <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa50 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fa57 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d020      	beq.n	80041c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01b      	beq.n	80041c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0208 	mvn.w	r2, #8
 8004194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2204      	movs	r2, #4
 800419a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc ffa8 	bl	8001100 <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fa2a 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fa31 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d020      	beq.n	8004210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0210 	mvn.w	r2, #16
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2208      	movs	r2, #8
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc ff82 	bl	8001100 <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa04 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fa0b 	bl	8004620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0201 	mvn.w	r2, #1
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f9e2 	bl	80045f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00c      	beq.n	8004258 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fd14 	bl	8004c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00c      	beq.n	800427c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9dc 	bl	8004634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0220 	mvn.w	r2, #32
 8004298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fce6 	bl	8004c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e088      	b.n	80043d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11b      	bne.n	800430c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80042e4:	f000 fa5c 	bl	80047a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 020c 	bic.w	r2, r2, #12
 80042f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
 800430a:	e060      	b.n	80043ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d11c      	bne.n	800434c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004322:	f000 fae0 	bl	80048e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004334:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6999      	ldr	r1, [r3, #24]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	021a      	lsls	r2, r3, #8
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	619a      	str	r2, [r3, #24]
 800434a:	e040      	b.n	80043ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b08      	cmp	r3, #8
 8004350:	d11b      	bne.n	800438a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004362:	f000 fb2d 	bl	80049c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 020c 	bic.w	r2, r2, #12
 8004374:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69d9      	ldr	r1, [r3, #28]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	61da      	str	r2, [r3, #28]
 8004388:	e021      	b.n	80043ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d11c      	bne.n	80043ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80043a0:	f000 fb4a 	bl	8004a38 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80043b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69d9      	ldr	r1, [r3, #28]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	021a      	lsls	r2, r3, #8
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	61da      	str	r2, [r3, #28]
 80043c8:	e001      	b.n	80043ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_TIM_ConfigClockSource+0x1c>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e0b4      	b.n	8004566 <HAL_TIM_ConfigClockSource+0x186>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800441a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004434:	d03e      	beq.n	80044b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800443a:	f200 8087 	bhi.w	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004442:	f000 8086 	beq.w	8004552 <HAL_TIM_ConfigClockSource+0x172>
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444a:	d87f      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800444c:	2b70      	cmp	r3, #112	@ 0x70
 800444e:	d01a      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0xa6>
 8004450:	2b70      	cmp	r3, #112	@ 0x70
 8004452:	d87b      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b60      	cmp	r3, #96	@ 0x60
 8004456:	d050      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x11a>
 8004458:	2b60      	cmp	r3, #96	@ 0x60
 800445a:	d877      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b50      	cmp	r3, #80	@ 0x50
 800445e:	d03c      	beq.n	80044da <HAL_TIM_ConfigClockSource+0xfa>
 8004460:	2b50      	cmp	r3, #80	@ 0x50
 8004462:	d873      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b40      	cmp	r3, #64	@ 0x40
 8004466:	d058      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x13a>
 8004468:	2b40      	cmp	r3, #64	@ 0x40
 800446a:	d86f      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b30      	cmp	r3, #48	@ 0x30
 800446e:	d064      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004470:	2b30      	cmp	r3, #48	@ 0x30
 8004472:	d86b      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b20      	cmp	r3, #32
 8004476:	d060      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	2b20      	cmp	r3, #32
 800447a:	d867      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d05c      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004480:	2b10      	cmp	r3, #16
 8004482:	d05a      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004484:	e062      	b.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004496:	f000 fb27 	bl	8004ae8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	609a      	str	r2, [r3, #8]
      break;
 80044b2:	e04f      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044c4:	f000 fb10 	bl	8004ae8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044d6:	609a      	str	r2, [r3, #8]
      break;
 80044d8:	e03c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e6:	461a      	mov	r2, r3
 80044e8:	f000 f9ce 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2150      	movs	r1, #80	@ 0x50
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fadd 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 80044f8:	e02c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004506:	461a      	mov	r2, r3
 8004508:	f000 fa2a 	bl	8004960 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2160      	movs	r1, #96	@ 0x60
 8004512:	4618      	mov	r0, r3
 8004514:	f000 facd 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004518:	e01c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004526:	461a      	mov	r2, r3
 8004528:	f000 f9ae 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2140      	movs	r1, #64	@ 0x40
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fabd 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004538:	e00c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f000 fab4 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 800454a:	e003      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e000      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d831      	bhi.n	80045e8 <HAL_TIM_ReadCapturedValue+0x78>
 8004584:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	080045c1 	.word	0x080045c1
 8004590:	080045e9 	.word	0x080045e9
 8004594:	080045e9 	.word	0x080045e9
 8004598:	080045e9 	.word	0x080045e9
 800459c:	080045cb 	.word	0x080045cb
 80045a0:	080045e9 	.word	0x080045e9
 80045a4:	080045e9 	.word	0x080045e9
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045e9 	.word	0x080045e9
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	080045e9 	.word	0x080045e9
 80045bc:	080045df 	.word	0x080045df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c6:	60fb      	str	r3, [r7, #12]

      break;
 80045c8:	e00f      	b.n	80045ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	60fb      	str	r3, [r7, #12]

      break;
 80045d2:	e00a      	b.n	80045ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	60fb      	str	r3, [r7, #12]

      break;
 80045dc:	e005      	b.n	80045ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	60fb      	str	r3, [r7, #12]

      break;
 80045e6:	e000      	b.n	80045ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80045e8:	bf00      	nop
  }

  return tmpreg;
 80045ea:	68fb      	ldr	r3, [r7, #12]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a46      	ldr	r2, [pc, #280]	@ (8004774 <TIM_Base_SetConfig+0x12c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004666:	d00f      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a43      	ldr	r2, [pc, #268]	@ (8004778 <TIM_Base_SetConfig+0x130>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a42      	ldr	r2, [pc, #264]	@ (800477c <TIM_Base_SetConfig+0x134>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a41      	ldr	r2, [pc, #260]	@ (8004780 <TIM_Base_SetConfig+0x138>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a40      	ldr	r2, [pc, #256]	@ (8004784 <TIM_Base_SetConfig+0x13c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a35      	ldr	r2, [pc, #212]	@ (8004774 <TIM_Base_SetConfig+0x12c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d02b      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a8:	d027      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a32      	ldr	r2, [pc, #200]	@ (8004778 <TIM_Base_SetConfig+0x130>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d023      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a31      	ldr	r2, [pc, #196]	@ (800477c <TIM_Base_SetConfig+0x134>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01f      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a30      	ldr	r2, [pc, #192]	@ (8004780 <TIM_Base_SetConfig+0x138>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01b      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004784 <TIM_Base_SetConfig+0x13c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d017      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004788 <TIM_Base_SetConfig+0x140>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2d      	ldr	r2, [pc, #180]	@ (800478c <TIM_Base_SetConfig+0x144>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00f      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004790 <TIM_Base_SetConfig+0x148>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004794 <TIM_Base_SetConfig+0x14c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004798 <TIM_Base_SetConfig+0x150>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a29      	ldr	r2, [pc, #164]	@ (800479c <TIM_Base_SetConfig+0x154>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a10      	ldr	r2, [pc, #64]	@ (8004774 <TIM_Base_SetConfig+0x12c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0xf8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a12      	ldr	r2, [pc, #72]	@ (8004784 <TIM_Base_SetConfig+0x13c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d103      	bne.n	8004748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f023 0201 	bic.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	611a      	str	r2, [r3, #16]
  }
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40010400 	.word	0x40010400
 8004788:	40014000 	.word	0x40014000
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800
 8004794:	40001800 	.word	0x40001800
 8004798:	40001c00 	.word	0x40001c00
 800479c:	40002000 	.word	0x40002000

080047a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f023 0201 	bic.w	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a28      	ldr	r2, [pc, #160]	@ (800486c <TIM_TI1_SetConfig+0xcc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01b      	beq.n	8004806 <TIM_TI1_SetConfig+0x66>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d4:	d017      	beq.n	8004806 <TIM_TI1_SetConfig+0x66>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a25      	ldr	r2, [pc, #148]	@ (8004870 <TIM_TI1_SetConfig+0xd0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_TI1_SetConfig+0x66>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a24      	ldr	r2, [pc, #144]	@ (8004874 <TIM_TI1_SetConfig+0xd4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_TI1_SetConfig+0x66>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <TIM_TI1_SetConfig+0xd8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_TI1_SetConfig+0x66>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a22      	ldr	r2, [pc, #136]	@ (800487c <TIM_TI1_SetConfig+0xdc>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_TI1_SetConfig+0x66>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a21      	ldr	r2, [pc, #132]	@ (8004880 <TIM_TI1_SetConfig+0xe0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_TI1_SetConfig+0x66>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <TIM_TI1_SetConfig+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <TIM_TI1_SetConfig+0x6a>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <TIM_TI1_SetConfig+0x6c>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e003      	b.n	800482a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	b2db      	uxtb	r3, r3
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f023 030a 	bic.w	r3, r3, #10
 8004844:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 030a 	and.w	r3, r3, #10
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40001800 	.word	0x40001800

08004888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 030a 	bic.w	r3, r3, #10
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f023 0210 	bic.w	r2, r3, #16
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	031b      	lsls	r3, r3, #12
 800492a:	b29b      	uxth	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004938:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0210 	bic.w	r2, r3, #16
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800498a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	031b      	lsls	r3, r3, #12
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800499c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	621a      	str	r2, [r3, #32]
}
 80049b4:	bf00      	nop
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f023 0303 	bic.w	r3, r3, #3
 80049ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	621a      	str	r2, [r3, #32]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	031b      	lsls	r3, r3, #12
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	031b      	lsls	r3, r3, #12
 8004a90:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f043 0307 	orr.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	021a      	lsls	r2, r3, #8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e05a      	b.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a21      	ldr	r2, [pc, #132]	@ (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd8:	d01d      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a15      	ldr	r2, [pc, #84]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10c      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40010400 	.word	0x40010400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40001800 	.word	0x40001800

08004c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e042      	b.n	8004d2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd f86a 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2224      	movs	r2, #36	@ 0x24
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f973 	bl	8004fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	@ 0x28
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d175      	bne.n	8004e40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_UART_Transmit+0x2c>
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e06e      	b.n	8004e42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2221      	movs	r2, #33	@ 0x21
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d72:	f7fd fa4d 	bl	8002210 <HAL_GetTick>
 8004d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8c:	d108      	bne.n	8004da0 <HAL_UART_Transmit+0x6c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	e003      	b.n	8004da8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004da8:	e02e      	b.n	8004e08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	@ 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f848 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e03a      	b.n	8004e42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	3302      	adds	r3, #2
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	e007      	b.n	8004dfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3301      	adds	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1cb      	bne.n	8004daa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2140      	movs	r1, #64	@ 0x40
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f814 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e006      	b.n	8004e42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	e03b      	b.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e62:	d037      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e64:	f7fd f9d4 	bl	8002210 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	6a3a      	ldr	r2, [r7, #32]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e03a      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d023      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b80      	cmp	r3, #128	@ 0x80
 8004e90:	d020      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d01d      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d116      	bne.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f81d 	bl	8004efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e00f      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d0b4      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b095      	sub	sp, #84	@ 0x54
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f24:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3314      	adds	r3, #20
 8004f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d119      	bne.n	8004fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0310 	bic.w	r3, r3, #16
 8004f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f94:	61ba      	str	r2, [r7, #24]
 8004f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fb6:	bf00      	nop
 8004fb8:	3754      	adds	r7, #84	@ 0x54
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc8:	b0c0      	sub	sp, #256	@ 0x100
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	68d9      	ldr	r1, [r3, #12]
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	ea40 0301 	orr.w	r3, r0, r1
 8004fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800501c:	f021 010c 	bic.w	r1, r1, #12
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800502a:	430b      	orrs	r3, r1
 800502c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503e:	6999      	ldr	r1, [r3, #24]
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	ea40 0301 	orr.w	r3, r0, r1
 800504a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b8f      	ldr	r3, [pc, #572]	@ (8005290 <UART_SetConfig+0x2cc>)
 8005054:	429a      	cmp	r2, r3
 8005056:	d005      	beq.n	8005064 <UART_SetConfig+0xa0>
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b8d      	ldr	r3, [pc, #564]	@ (8005294 <UART_SetConfig+0x2d0>)
 8005060:	429a      	cmp	r2, r3
 8005062:	d104      	bne.n	800506e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005064:	f7fe fe4c 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8005068:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800506c:	e003      	b.n	8005076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800506e:	f7fe fe33 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 8005072:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005080:	f040 810c 	bne.w	800529c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800508e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005096:	4622      	mov	r2, r4
 8005098:	462b      	mov	r3, r5
 800509a:	1891      	adds	r1, r2, r2
 800509c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800509e:	415b      	adcs	r3, r3
 80050a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050a6:	4621      	mov	r1, r4
 80050a8:	eb12 0801 	adds.w	r8, r2, r1
 80050ac:	4629      	mov	r1, r5
 80050ae:	eb43 0901 	adc.w	r9, r3, r1
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050c6:	4690      	mov	r8, r2
 80050c8:	4699      	mov	r9, r3
 80050ca:	4623      	mov	r3, r4
 80050cc:	eb18 0303 	adds.w	r3, r8, r3
 80050d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050d4:	462b      	mov	r3, r5
 80050d6:	eb49 0303 	adc.w	r3, r9, r3
 80050da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050f2:	460b      	mov	r3, r1
 80050f4:	18db      	adds	r3, r3, r3
 80050f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f8:	4613      	mov	r3, r2
 80050fa:	eb42 0303 	adc.w	r3, r2, r3
 80050fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005108:	f7fb fdbe 	bl	8000c88 <__aeabi_uldivmod>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4b61      	ldr	r3, [pc, #388]	@ (8005298 <UART_SetConfig+0x2d4>)
 8005112:	fba3 2302 	umull	r2, r3, r3, r2
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	011c      	lsls	r4, r3, #4
 800511a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511e:	2200      	movs	r2, #0
 8005120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005124:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800512c:	4642      	mov	r2, r8
 800512e:	464b      	mov	r3, r9
 8005130:	1891      	adds	r1, r2, r2
 8005132:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005134:	415b      	adcs	r3, r3
 8005136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800513c:	4641      	mov	r1, r8
 800513e:	eb12 0a01 	adds.w	sl, r2, r1
 8005142:	4649      	mov	r1, r9
 8005144:	eb43 0b01 	adc.w	fp, r3, r1
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800515c:	4692      	mov	sl, r2
 800515e:	469b      	mov	fp, r3
 8005160:	4643      	mov	r3, r8
 8005162:	eb1a 0303 	adds.w	r3, sl, r3
 8005166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800516a:	464b      	mov	r3, r9
 800516c:	eb4b 0303 	adc.w	r3, fp, r3
 8005170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005180:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005188:	460b      	mov	r3, r1
 800518a:	18db      	adds	r3, r3, r3
 800518c:	643b      	str	r3, [r7, #64]	@ 0x40
 800518e:	4613      	mov	r3, r2
 8005190:	eb42 0303 	adc.w	r3, r2, r3
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
 8005196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800519a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800519e:	f7fb fd73 	bl	8000c88 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4611      	mov	r1, r2
 80051a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005298 <UART_SetConfig+0x2d4>)
 80051aa:	fba3 2301 	umull	r2, r3, r3, r1
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	2264      	movs	r2, #100	@ 0x64
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	1acb      	subs	r3, r1, r3
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051be:	4b36      	ldr	r3, [pc, #216]	@ (8005298 <UART_SetConfig+0x2d4>)
 80051c0:	fba3 2302 	umull	r2, r3, r3, r2
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051cc:	441c      	add	r4, r3
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	1891      	adds	r1, r2, r2
 80051e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051e8:	415b      	adcs	r3, r3
 80051ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051f0:	4641      	mov	r1, r8
 80051f2:	1851      	adds	r1, r2, r1
 80051f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80051f6:	4649      	mov	r1, r9
 80051f8:	414b      	adcs	r3, r1
 80051fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005208:	4659      	mov	r1, fp
 800520a:	00cb      	lsls	r3, r1, #3
 800520c:	4651      	mov	r1, sl
 800520e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005212:	4651      	mov	r1, sl
 8005214:	00ca      	lsls	r2, r1, #3
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	4603      	mov	r3, r0
 800521c:	4642      	mov	r2, r8
 800521e:	189b      	adds	r3, r3, r2
 8005220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005224:	464b      	mov	r3, r9
 8005226:	460a      	mov	r2, r1
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800523c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005244:	460b      	mov	r3, r1
 8005246:	18db      	adds	r3, r3, r3
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800524a:	4613      	mov	r3, r2
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800525a:	f7fb fd15 	bl	8000c88 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <UART_SetConfig+0x2d4>)
 8005264:	fba3 1302 	umull	r1, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2164      	movs	r1, #100	@ 0x64
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	3332      	adds	r3, #50	@ 0x32
 8005276:	4a08      	ldr	r2, [pc, #32]	@ (8005298 <UART_SetConfig+0x2d4>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 0207 	and.w	r2, r3, #7
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4422      	add	r2, r4
 800528a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800528c:	e106      	b.n	800549c <UART_SetConfig+0x4d8>
 800528e:	bf00      	nop
 8005290:	40011000 	.word	0x40011000
 8005294:	40011400 	.word	0x40011400
 8005298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800529c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052ae:	4642      	mov	r2, r8
 80052b0:	464b      	mov	r3, r9
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	6239      	str	r1, [r7, #32]
 80052b6:	415b      	adcs	r3, r3
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052be:	4641      	mov	r1, r8
 80052c0:	1854      	adds	r4, r2, r1
 80052c2:	4649      	mov	r1, r9
 80052c4:	eb43 0501 	adc.w	r5, r3, r1
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	00eb      	lsls	r3, r5, #3
 80052d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052d6:	00e2      	lsls	r2, r4, #3
 80052d8:	4614      	mov	r4, r2
 80052da:	461d      	mov	r5, r3
 80052dc:	4643      	mov	r3, r8
 80052de:	18e3      	adds	r3, r4, r3
 80052e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052e4:	464b      	mov	r3, r9
 80052e6:	eb45 0303 	adc.w	r3, r5, r3
 80052ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800530a:	4629      	mov	r1, r5
 800530c:	008b      	lsls	r3, r1, #2
 800530e:	4621      	mov	r1, r4
 8005310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005314:	4621      	mov	r1, r4
 8005316:	008a      	lsls	r2, r1, #2
 8005318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800531c:	f7fb fcb4 	bl	8000c88 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4b60      	ldr	r3, [pc, #384]	@ (80054a8 <UART_SetConfig+0x4e4>)
 8005326:	fba3 2302 	umull	r2, r3, r3, r2
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	011c      	lsls	r4, r3, #4
 800532e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005332:	2200      	movs	r2, #0
 8005334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005338:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800533c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005340:	4642      	mov	r2, r8
 8005342:	464b      	mov	r3, r9
 8005344:	1891      	adds	r1, r2, r2
 8005346:	61b9      	str	r1, [r7, #24]
 8005348:	415b      	adcs	r3, r3
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005350:	4641      	mov	r1, r8
 8005352:	1851      	adds	r1, r2, r1
 8005354:	6139      	str	r1, [r7, #16]
 8005356:	4649      	mov	r1, r9
 8005358:	414b      	adcs	r3, r1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005368:	4659      	mov	r1, fp
 800536a:	00cb      	lsls	r3, r1, #3
 800536c:	4651      	mov	r1, sl
 800536e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005372:	4651      	mov	r1, sl
 8005374:	00ca      	lsls	r2, r1, #3
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	4603      	mov	r3, r0
 800537c:	4642      	mov	r2, r8
 800537e:	189b      	adds	r3, r3, r2
 8005380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005384:	464b      	mov	r3, r9
 8005386:	460a      	mov	r2, r1
 8005388:	eb42 0303 	adc.w	r3, r2, r3
 800538c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	67bb      	str	r3, [r7, #120]	@ 0x78
 800539a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053a8:	4649      	mov	r1, r9
 80053aa:	008b      	lsls	r3, r1, #2
 80053ac:	4641      	mov	r1, r8
 80053ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b2:	4641      	mov	r1, r8
 80053b4:	008a      	lsls	r2, r1, #2
 80053b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053ba:	f7fb fc65 	bl	8000c88 <__aeabi_uldivmod>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	4b38      	ldr	r3, [pc, #224]	@ (80054a8 <UART_SetConfig+0x4e4>)
 80053c6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2264      	movs	r2, #100	@ 0x64
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	1acb      	subs	r3, r1, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	@ 0x32
 80053d8:	4a33      	ldr	r2, [pc, #204]	@ (80054a8 <UART_SetConfig+0x4e4>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053e4:	441c      	add	r4, r3
 80053e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ea:	2200      	movs	r2, #0
 80053ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80053f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053f4:	4642      	mov	r2, r8
 80053f6:	464b      	mov	r3, r9
 80053f8:	1891      	adds	r1, r2, r2
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	415b      	adcs	r3, r3
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005404:	4641      	mov	r1, r8
 8005406:	1851      	adds	r1, r2, r1
 8005408:	6039      	str	r1, [r7, #0]
 800540a:	4649      	mov	r1, r9
 800540c:	414b      	adcs	r3, r1
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800541c:	4659      	mov	r1, fp
 800541e:	00cb      	lsls	r3, r1, #3
 8005420:	4651      	mov	r1, sl
 8005422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005426:	4651      	mov	r1, sl
 8005428:	00ca      	lsls	r2, r1, #3
 800542a:	4610      	mov	r0, r2
 800542c:	4619      	mov	r1, r3
 800542e:	4603      	mov	r3, r0
 8005430:	4642      	mov	r2, r8
 8005432:	189b      	adds	r3, r3, r2
 8005434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005436:	464b      	mov	r3, r9
 8005438:	460a      	mov	r2, r1
 800543a:	eb42 0303 	adc.w	r3, r2, r3
 800543e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	663b      	str	r3, [r7, #96]	@ 0x60
 800544a:	667a      	str	r2, [r7, #100]	@ 0x64
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005458:	4649      	mov	r1, r9
 800545a:	008b      	lsls	r3, r1, #2
 800545c:	4641      	mov	r1, r8
 800545e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005462:	4641      	mov	r1, r8
 8005464:	008a      	lsls	r2, r1, #2
 8005466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800546a:	f7fb fc0d 	bl	8000c88 <__aeabi_uldivmod>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <UART_SetConfig+0x4e4>)
 8005474:	fba3 1302 	umull	r1, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	2164      	movs	r1, #100	@ 0x64
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	3332      	adds	r3, #50	@ 0x32
 8005486:	4a08      	ldr	r2, [pc, #32]	@ (80054a8 <UART_SetConfig+0x4e4>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4422      	add	r2, r4
 800549a:	609a      	str	r2, [r3, #8]
}
 800549c:	bf00      	nop
 800549e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054a2:	46bd      	mov	sp, r7
 80054a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a8:	51eb851f 	.word	0x51eb851f

080054ac <__cvt>:
 80054ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054b0:	ec57 6b10 	vmov	r6, r7, d0
 80054b4:	2f00      	cmp	r7, #0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4619      	mov	r1, r3
 80054ba:	463b      	mov	r3, r7
 80054bc:	bfbb      	ittet	lt
 80054be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80054c2:	461f      	movlt	r7, r3
 80054c4:	2300      	movge	r3, #0
 80054c6:	232d      	movlt	r3, #45	@ 0x2d
 80054c8:	700b      	strb	r3, [r1, #0]
 80054ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80054d0:	4691      	mov	r9, r2
 80054d2:	f023 0820 	bic.w	r8, r3, #32
 80054d6:	bfbc      	itt	lt
 80054d8:	4632      	movlt	r2, r6
 80054da:	4616      	movlt	r6, r2
 80054dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054e0:	d005      	beq.n	80054ee <__cvt+0x42>
 80054e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054e6:	d100      	bne.n	80054ea <__cvt+0x3e>
 80054e8:	3401      	adds	r4, #1
 80054ea:	2102      	movs	r1, #2
 80054ec:	e000      	b.n	80054f0 <__cvt+0x44>
 80054ee:	2103      	movs	r1, #3
 80054f0:	ab03      	add	r3, sp, #12
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	ab02      	add	r3, sp, #8
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	ec47 6b10 	vmov	d0, r6, r7
 80054fc:	4653      	mov	r3, sl
 80054fe:	4622      	mov	r2, r4
 8005500:	f001 f86e 	bl	80065e0 <_dtoa_r>
 8005504:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005508:	4605      	mov	r5, r0
 800550a:	d119      	bne.n	8005540 <__cvt+0x94>
 800550c:	f019 0f01 	tst.w	r9, #1
 8005510:	d00e      	beq.n	8005530 <__cvt+0x84>
 8005512:	eb00 0904 	add.w	r9, r0, r4
 8005516:	2200      	movs	r2, #0
 8005518:	2300      	movs	r3, #0
 800551a:	4630      	mov	r0, r6
 800551c:	4639      	mov	r1, r7
 800551e:	f7fb fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005522:	b108      	cbz	r0, 8005528 <__cvt+0x7c>
 8005524:	f8cd 900c 	str.w	r9, [sp, #12]
 8005528:	2230      	movs	r2, #48	@ 0x30
 800552a:	9b03      	ldr	r3, [sp, #12]
 800552c:	454b      	cmp	r3, r9
 800552e:	d31e      	bcc.n	800556e <__cvt+0xc2>
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005534:	1b5b      	subs	r3, r3, r5
 8005536:	4628      	mov	r0, r5
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	b004      	add	sp, #16
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005544:	eb00 0904 	add.w	r9, r0, r4
 8005548:	d1e5      	bne.n	8005516 <__cvt+0x6a>
 800554a:	7803      	ldrb	r3, [r0, #0]
 800554c:	2b30      	cmp	r3, #48	@ 0x30
 800554e:	d10a      	bne.n	8005566 <__cvt+0xba>
 8005550:	2200      	movs	r2, #0
 8005552:	2300      	movs	r3, #0
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7fb fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800555c:	b918      	cbnz	r0, 8005566 <__cvt+0xba>
 800555e:	f1c4 0401 	rsb	r4, r4, #1
 8005562:	f8ca 4000 	str.w	r4, [sl]
 8005566:	f8da 3000 	ldr.w	r3, [sl]
 800556a:	4499      	add	r9, r3
 800556c:	e7d3      	b.n	8005516 <__cvt+0x6a>
 800556e:	1c59      	adds	r1, r3, #1
 8005570:	9103      	str	r1, [sp, #12]
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e7d9      	b.n	800552a <__cvt+0x7e>

08005576 <__exponent>:
 8005576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005578:	2900      	cmp	r1, #0
 800557a:	bfba      	itte	lt
 800557c:	4249      	neglt	r1, r1
 800557e:	232d      	movlt	r3, #45	@ 0x2d
 8005580:	232b      	movge	r3, #43	@ 0x2b
 8005582:	2909      	cmp	r1, #9
 8005584:	7002      	strb	r2, [r0, #0]
 8005586:	7043      	strb	r3, [r0, #1]
 8005588:	dd29      	ble.n	80055de <__exponent+0x68>
 800558a:	f10d 0307 	add.w	r3, sp, #7
 800558e:	461d      	mov	r5, r3
 8005590:	270a      	movs	r7, #10
 8005592:	461a      	mov	r2, r3
 8005594:	fbb1 f6f7 	udiv	r6, r1, r7
 8005598:	fb07 1416 	mls	r4, r7, r6, r1
 800559c:	3430      	adds	r4, #48	@ 0x30
 800559e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80055a2:	460c      	mov	r4, r1
 80055a4:	2c63      	cmp	r4, #99	@ 0x63
 80055a6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80055aa:	4631      	mov	r1, r6
 80055ac:	dcf1      	bgt.n	8005592 <__exponent+0x1c>
 80055ae:	3130      	adds	r1, #48	@ 0x30
 80055b0:	1e94      	subs	r4, r2, #2
 80055b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055b6:	1c41      	adds	r1, r0, #1
 80055b8:	4623      	mov	r3, r4
 80055ba:	42ab      	cmp	r3, r5
 80055bc:	d30a      	bcc.n	80055d4 <__exponent+0x5e>
 80055be:	f10d 0309 	add.w	r3, sp, #9
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	42ac      	cmp	r4, r5
 80055c6:	bf88      	it	hi
 80055c8:	2300      	movhi	r3, #0
 80055ca:	3302      	adds	r3, #2
 80055cc:	4403      	add	r3, r0
 80055ce:	1a18      	subs	r0, r3, r0
 80055d0:	b003      	add	sp, #12
 80055d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055dc:	e7ed      	b.n	80055ba <__exponent+0x44>
 80055de:	2330      	movs	r3, #48	@ 0x30
 80055e0:	3130      	adds	r1, #48	@ 0x30
 80055e2:	7083      	strb	r3, [r0, #2]
 80055e4:	70c1      	strb	r1, [r0, #3]
 80055e6:	1d03      	adds	r3, r0, #4
 80055e8:	e7f1      	b.n	80055ce <__exponent+0x58>
	...

080055ec <_printf_float>:
 80055ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f0:	b08d      	sub	sp, #52	@ 0x34
 80055f2:	460c      	mov	r4, r1
 80055f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80055f8:	4616      	mov	r6, r2
 80055fa:	461f      	mov	r7, r3
 80055fc:	4605      	mov	r5, r0
 80055fe:	f000 fee9 	bl	80063d4 <_localeconv_r>
 8005602:	6803      	ldr	r3, [r0, #0]
 8005604:	9304      	str	r3, [sp, #16]
 8005606:	4618      	mov	r0, r3
 8005608:	f7fa fe32 	bl	8000270 <strlen>
 800560c:	2300      	movs	r3, #0
 800560e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005610:	f8d8 3000 	ldr.w	r3, [r8]
 8005614:	9005      	str	r0, [sp, #20]
 8005616:	3307      	adds	r3, #7
 8005618:	f023 0307 	bic.w	r3, r3, #7
 800561c:	f103 0208 	add.w	r2, r3, #8
 8005620:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005624:	f8d4 b000 	ldr.w	fp, [r4]
 8005628:	f8c8 2000 	str.w	r2, [r8]
 800562c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005630:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005634:	9307      	str	r3, [sp, #28]
 8005636:	f8cd 8018 	str.w	r8, [sp, #24]
 800563a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800563e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005642:	4b9c      	ldr	r3, [pc, #624]	@ (80058b4 <_printf_float+0x2c8>)
 8005644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005648:	f7fb fa70 	bl	8000b2c <__aeabi_dcmpun>
 800564c:	bb70      	cbnz	r0, 80056ac <_printf_float+0xc0>
 800564e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005652:	4b98      	ldr	r3, [pc, #608]	@ (80058b4 <_printf_float+0x2c8>)
 8005654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005658:	f7fb fa4a 	bl	8000af0 <__aeabi_dcmple>
 800565c:	bb30      	cbnz	r0, 80056ac <_printf_float+0xc0>
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	4640      	mov	r0, r8
 8005664:	4649      	mov	r1, r9
 8005666:	f7fb fa39 	bl	8000adc <__aeabi_dcmplt>
 800566a:	b110      	cbz	r0, 8005672 <_printf_float+0x86>
 800566c:	232d      	movs	r3, #45	@ 0x2d
 800566e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005672:	4a91      	ldr	r2, [pc, #580]	@ (80058b8 <_printf_float+0x2cc>)
 8005674:	4b91      	ldr	r3, [pc, #580]	@ (80058bc <_printf_float+0x2d0>)
 8005676:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800567a:	bf8c      	ite	hi
 800567c:	4690      	movhi	r8, r2
 800567e:	4698      	movls	r8, r3
 8005680:	2303      	movs	r3, #3
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	f02b 0304 	bic.w	r3, fp, #4
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	f04f 0900 	mov.w	r9, #0
 800568e:	9700      	str	r7, [sp, #0]
 8005690:	4633      	mov	r3, r6
 8005692:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f9d2 	bl	8005a40 <_printf_common>
 800569c:	3001      	adds	r0, #1
 800569e:	f040 808d 	bne.w	80057bc <_printf_float+0x1d0>
 80056a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a6:	b00d      	add	sp, #52	@ 0x34
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ac:	4642      	mov	r2, r8
 80056ae:	464b      	mov	r3, r9
 80056b0:	4640      	mov	r0, r8
 80056b2:	4649      	mov	r1, r9
 80056b4:	f7fb fa3a 	bl	8000b2c <__aeabi_dcmpun>
 80056b8:	b140      	cbz	r0, 80056cc <_printf_float+0xe0>
 80056ba:	464b      	mov	r3, r9
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bfbc      	itt	lt
 80056c0:	232d      	movlt	r3, #45	@ 0x2d
 80056c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056c6:	4a7e      	ldr	r2, [pc, #504]	@ (80058c0 <_printf_float+0x2d4>)
 80056c8:	4b7e      	ldr	r3, [pc, #504]	@ (80058c4 <_printf_float+0x2d8>)
 80056ca:	e7d4      	b.n	8005676 <_printf_float+0x8a>
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80056d2:	9206      	str	r2, [sp, #24]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	d13b      	bne.n	8005750 <_printf_float+0x164>
 80056d8:	2306      	movs	r3, #6
 80056da:	6063      	str	r3, [r4, #4]
 80056dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80056e0:	2300      	movs	r3, #0
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	9303      	str	r3, [sp, #12]
 80056e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80056e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80056ec:	ab09      	add	r3, sp, #36	@ 0x24
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	6861      	ldr	r1, [r4, #4]
 80056f2:	ec49 8b10 	vmov	d0, r8, r9
 80056f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80056fa:	4628      	mov	r0, r5
 80056fc:	f7ff fed6 	bl	80054ac <__cvt>
 8005700:	9b06      	ldr	r3, [sp, #24]
 8005702:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005704:	2b47      	cmp	r3, #71	@ 0x47
 8005706:	4680      	mov	r8, r0
 8005708:	d129      	bne.n	800575e <_printf_float+0x172>
 800570a:	1cc8      	adds	r0, r1, #3
 800570c:	db02      	blt.n	8005714 <_printf_float+0x128>
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	4299      	cmp	r1, r3
 8005712:	dd41      	ble.n	8005798 <_printf_float+0x1ac>
 8005714:	f1aa 0a02 	sub.w	sl, sl, #2
 8005718:	fa5f fa8a 	uxtb.w	sl, sl
 800571c:	3901      	subs	r1, #1
 800571e:	4652      	mov	r2, sl
 8005720:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005724:	9109      	str	r1, [sp, #36]	@ 0x24
 8005726:	f7ff ff26 	bl	8005576 <__exponent>
 800572a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800572c:	1813      	adds	r3, r2, r0
 800572e:	2a01      	cmp	r2, #1
 8005730:	4681      	mov	r9, r0
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	dc02      	bgt.n	800573c <_printf_float+0x150>
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	07d2      	lsls	r2, r2, #31
 800573a:	d501      	bpl.n	8005740 <_printf_float+0x154>
 800573c:	3301      	adds	r3, #1
 800573e:	6123      	str	r3, [r4, #16]
 8005740:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0a2      	beq.n	800568e <_printf_float+0xa2>
 8005748:	232d      	movs	r3, #45	@ 0x2d
 800574a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800574e:	e79e      	b.n	800568e <_printf_float+0xa2>
 8005750:	9a06      	ldr	r2, [sp, #24]
 8005752:	2a47      	cmp	r2, #71	@ 0x47
 8005754:	d1c2      	bne.n	80056dc <_printf_float+0xf0>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1c0      	bne.n	80056dc <_printf_float+0xf0>
 800575a:	2301      	movs	r3, #1
 800575c:	e7bd      	b.n	80056da <_printf_float+0xee>
 800575e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005762:	d9db      	bls.n	800571c <_printf_float+0x130>
 8005764:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005768:	d118      	bne.n	800579c <_printf_float+0x1b0>
 800576a:	2900      	cmp	r1, #0
 800576c:	6863      	ldr	r3, [r4, #4]
 800576e:	dd0b      	ble.n	8005788 <_printf_float+0x19c>
 8005770:	6121      	str	r1, [r4, #16]
 8005772:	b913      	cbnz	r3, 800577a <_printf_float+0x18e>
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	07d0      	lsls	r0, r2, #31
 8005778:	d502      	bpl.n	8005780 <_printf_float+0x194>
 800577a:	3301      	adds	r3, #1
 800577c:	440b      	add	r3, r1
 800577e:	6123      	str	r3, [r4, #16]
 8005780:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	e7db      	b.n	8005740 <_printf_float+0x154>
 8005788:	b913      	cbnz	r3, 8005790 <_printf_float+0x1a4>
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	07d2      	lsls	r2, r2, #31
 800578e:	d501      	bpl.n	8005794 <_printf_float+0x1a8>
 8005790:	3302      	adds	r3, #2
 8005792:	e7f4      	b.n	800577e <_printf_float+0x192>
 8005794:	2301      	movs	r3, #1
 8005796:	e7f2      	b.n	800577e <_printf_float+0x192>
 8005798:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800579c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800579e:	4299      	cmp	r1, r3
 80057a0:	db05      	blt.n	80057ae <_printf_float+0x1c2>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	6121      	str	r1, [r4, #16]
 80057a6:	07d8      	lsls	r0, r3, #31
 80057a8:	d5ea      	bpl.n	8005780 <_printf_float+0x194>
 80057aa:	1c4b      	adds	r3, r1, #1
 80057ac:	e7e7      	b.n	800577e <_printf_float+0x192>
 80057ae:	2900      	cmp	r1, #0
 80057b0:	bfd4      	ite	le
 80057b2:	f1c1 0202 	rsble	r2, r1, #2
 80057b6:	2201      	movgt	r2, #1
 80057b8:	4413      	add	r3, r2
 80057ba:	e7e0      	b.n	800577e <_printf_float+0x192>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	055a      	lsls	r2, r3, #21
 80057c0:	d407      	bmi.n	80057d2 <_printf_float+0x1e6>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	4642      	mov	r2, r8
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	d12b      	bne.n	8005828 <_printf_float+0x23c>
 80057d0:	e767      	b.n	80056a2 <_printf_float+0xb6>
 80057d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057d6:	f240 80dd 	bls.w	8005994 <_printf_float+0x3a8>
 80057da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057de:	2200      	movs	r2, #0
 80057e0:	2300      	movs	r3, #0
 80057e2:	f7fb f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d033      	beq.n	8005852 <_printf_float+0x266>
 80057ea:	4a37      	ldr	r2, [pc, #220]	@ (80058c8 <_printf_float+0x2dc>)
 80057ec:	2301      	movs	r3, #1
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b8      	blx	r7
 80057f4:	3001      	adds	r0, #1
 80057f6:	f43f af54 	beq.w	80056a2 <_printf_float+0xb6>
 80057fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80057fe:	4543      	cmp	r3, r8
 8005800:	db02      	blt.n	8005808 <_printf_float+0x21c>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	07d8      	lsls	r0, r3, #31
 8005806:	d50f      	bpl.n	8005828 <_printf_float+0x23c>
 8005808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f af45 	beq.w	80056a2 <_printf_float+0xb6>
 8005818:	f04f 0900 	mov.w	r9, #0
 800581c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005820:	f104 0a1a 	add.w	sl, r4, #26
 8005824:	45c8      	cmp	r8, r9
 8005826:	dc09      	bgt.n	800583c <_printf_float+0x250>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	f100 8103 	bmi.w	8005a36 <_printf_float+0x44a>
 8005830:	68e0      	ldr	r0, [r4, #12]
 8005832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005834:	4298      	cmp	r0, r3
 8005836:	bfb8      	it	lt
 8005838:	4618      	movlt	r0, r3
 800583a:	e734      	b.n	80056a6 <_printf_float+0xba>
 800583c:	2301      	movs	r3, #1
 800583e:	4652      	mov	r2, sl
 8005840:	4631      	mov	r1, r6
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	f43f af2b 	beq.w	80056a2 <_printf_float+0xb6>
 800584c:	f109 0901 	add.w	r9, r9, #1
 8005850:	e7e8      	b.n	8005824 <_printf_float+0x238>
 8005852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	dc39      	bgt.n	80058cc <_printf_float+0x2e0>
 8005858:	4a1b      	ldr	r2, [pc, #108]	@ (80058c8 <_printf_float+0x2dc>)
 800585a:	2301      	movs	r3, #1
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f af1d 	beq.w	80056a2 <_printf_float+0xb6>
 8005868:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800586c:	ea59 0303 	orrs.w	r3, r9, r3
 8005870:	d102      	bne.n	8005878 <_printf_float+0x28c>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	07d9      	lsls	r1, r3, #31
 8005876:	d5d7      	bpl.n	8005828 <_printf_float+0x23c>
 8005878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f af0d 	beq.w	80056a2 <_printf_float+0xb6>
 8005888:	f04f 0a00 	mov.w	sl, #0
 800588c:	f104 0b1a 	add.w	fp, r4, #26
 8005890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005892:	425b      	negs	r3, r3
 8005894:	4553      	cmp	r3, sl
 8005896:	dc01      	bgt.n	800589c <_printf_float+0x2b0>
 8005898:	464b      	mov	r3, r9
 800589a:	e793      	b.n	80057c4 <_printf_float+0x1d8>
 800589c:	2301      	movs	r3, #1
 800589e:	465a      	mov	r2, fp
 80058a0:	4631      	mov	r1, r6
 80058a2:	4628      	mov	r0, r5
 80058a4:	47b8      	blx	r7
 80058a6:	3001      	adds	r0, #1
 80058a8:	f43f aefb 	beq.w	80056a2 <_printf_float+0xb6>
 80058ac:	f10a 0a01 	add.w	sl, sl, #1
 80058b0:	e7ee      	b.n	8005890 <_printf_float+0x2a4>
 80058b2:	bf00      	nop
 80058b4:	7fefffff 	.word	0x7fefffff
 80058b8:	08009f88 	.word	0x08009f88
 80058bc:	08009f84 	.word	0x08009f84
 80058c0:	08009f90 	.word	0x08009f90
 80058c4:	08009f8c 	.word	0x08009f8c
 80058c8:	08009f94 	.word	0x08009f94
 80058cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058d2:	4553      	cmp	r3, sl
 80058d4:	bfa8      	it	ge
 80058d6:	4653      	movge	r3, sl
 80058d8:	2b00      	cmp	r3, #0
 80058da:	4699      	mov	r9, r3
 80058dc:	dc36      	bgt.n	800594c <_printf_float+0x360>
 80058de:	f04f 0b00 	mov.w	fp, #0
 80058e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058e6:	f104 021a 	add.w	r2, r4, #26
 80058ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058ec:	9306      	str	r3, [sp, #24]
 80058ee:	eba3 0309 	sub.w	r3, r3, r9
 80058f2:	455b      	cmp	r3, fp
 80058f4:	dc31      	bgt.n	800595a <_printf_float+0x36e>
 80058f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f8:	459a      	cmp	sl, r3
 80058fa:	dc3a      	bgt.n	8005972 <_printf_float+0x386>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	07da      	lsls	r2, r3, #31
 8005900:	d437      	bmi.n	8005972 <_printf_float+0x386>
 8005902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005904:	ebaa 0903 	sub.w	r9, sl, r3
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	ebaa 0303 	sub.w	r3, sl, r3
 800590e:	4599      	cmp	r9, r3
 8005910:	bfa8      	it	ge
 8005912:	4699      	movge	r9, r3
 8005914:	f1b9 0f00 	cmp.w	r9, #0
 8005918:	dc33      	bgt.n	8005982 <_printf_float+0x396>
 800591a:	f04f 0800 	mov.w	r8, #0
 800591e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005922:	f104 0b1a 	add.w	fp, r4, #26
 8005926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005928:	ebaa 0303 	sub.w	r3, sl, r3
 800592c:	eba3 0309 	sub.w	r3, r3, r9
 8005930:	4543      	cmp	r3, r8
 8005932:	f77f af79 	ble.w	8005828 <_printf_float+0x23c>
 8005936:	2301      	movs	r3, #1
 8005938:	465a      	mov	r2, fp
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	47b8      	blx	r7
 8005940:	3001      	adds	r0, #1
 8005942:	f43f aeae 	beq.w	80056a2 <_printf_float+0xb6>
 8005946:	f108 0801 	add.w	r8, r8, #1
 800594a:	e7ec      	b.n	8005926 <_printf_float+0x33a>
 800594c:	4642      	mov	r2, r8
 800594e:	4631      	mov	r1, r6
 8005950:	4628      	mov	r0, r5
 8005952:	47b8      	blx	r7
 8005954:	3001      	adds	r0, #1
 8005956:	d1c2      	bne.n	80058de <_printf_float+0x2f2>
 8005958:	e6a3      	b.n	80056a2 <_printf_float+0xb6>
 800595a:	2301      	movs	r3, #1
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	9206      	str	r2, [sp, #24]
 8005962:	47b8      	blx	r7
 8005964:	3001      	adds	r0, #1
 8005966:	f43f ae9c 	beq.w	80056a2 <_printf_float+0xb6>
 800596a:	9a06      	ldr	r2, [sp, #24]
 800596c:	f10b 0b01 	add.w	fp, fp, #1
 8005970:	e7bb      	b.n	80058ea <_printf_float+0x2fe>
 8005972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	d1c0      	bne.n	8005902 <_printf_float+0x316>
 8005980:	e68f      	b.n	80056a2 <_printf_float+0xb6>
 8005982:	9a06      	ldr	r2, [sp, #24]
 8005984:	464b      	mov	r3, r9
 8005986:	4442      	add	r2, r8
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	d1c3      	bne.n	800591a <_printf_float+0x32e>
 8005992:	e686      	b.n	80056a2 <_printf_float+0xb6>
 8005994:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005998:	f1ba 0f01 	cmp.w	sl, #1
 800599c:	dc01      	bgt.n	80059a2 <_printf_float+0x3b6>
 800599e:	07db      	lsls	r3, r3, #31
 80059a0:	d536      	bpl.n	8005a10 <_printf_float+0x424>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4642      	mov	r2, r8
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f ae78 	beq.w	80056a2 <_printf_float+0xb6>
 80059b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f ae70 	beq.w	80056a2 <_printf_float+0xb6>
 80059c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059c6:	2200      	movs	r2, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80059ce:	f7fb f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80059d2:	b9c0      	cbnz	r0, 8005a06 <_printf_float+0x41a>
 80059d4:	4653      	mov	r3, sl
 80059d6:	f108 0201 	add.w	r2, r8, #1
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	d10c      	bne.n	80059fe <_printf_float+0x412>
 80059e4:	e65d      	b.n	80056a2 <_printf_float+0xb6>
 80059e6:	2301      	movs	r3, #1
 80059e8:	465a      	mov	r2, fp
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	f43f ae56 	beq.w	80056a2 <_printf_float+0xb6>
 80059f6:	f108 0801 	add.w	r8, r8, #1
 80059fa:	45d0      	cmp	r8, sl
 80059fc:	dbf3      	blt.n	80059e6 <_printf_float+0x3fa>
 80059fe:	464b      	mov	r3, r9
 8005a00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a04:	e6df      	b.n	80057c6 <_printf_float+0x1da>
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	f104 0b1a 	add.w	fp, r4, #26
 8005a0e:	e7f4      	b.n	80059fa <_printf_float+0x40e>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4642      	mov	r2, r8
 8005a14:	e7e1      	b.n	80059da <_printf_float+0x3ee>
 8005a16:	2301      	movs	r3, #1
 8005a18:	464a      	mov	r2, r9
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b8      	blx	r7
 8005a20:	3001      	adds	r0, #1
 8005a22:	f43f ae3e 	beq.w	80056a2 <_printf_float+0xb6>
 8005a26:	f108 0801 	add.w	r8, r8, #1
 8005a2a:	68e3      	ldr	r3, [r4, #12]
 8005a2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a2e:	1a5b      	subs	r3, r3, r1
 8005a30:	4543      	cmp	r3, r8
 8005a32:	dcf0      	bgt.n	8005a16 <_printf_float+0x42a>
 8005a34:	e6fc      	b.n	8005830 <_printf_float+0x244>
 8005a36:	f04f 0800 	mov.w	r8, #0
 8005a3a:	f104 0919 	add.w	r9, r4, #25
 8005a3e:	e7f4      	b.n	8005a2a <_printf_float+0x43e>

08005a40 <_printf_common>:
 8005a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	4616      	mov	r6, r2
 8005a46:	4698      	mov	r8, r3
 8005a48:	688a      	ldr	r2, [r1, #8]
 8005a4a:	690b      	ldr	r3, [r1, #16]
 8005a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bfb8      	it	lt
 8005a54:	4613      	movlt	r3, r2
 8005a56:	6033      	str	r3, [r6, #0]
 8005a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	b10a      	cbz	r2, 8005a66 <_printf_common+0x26>
 8005a62:	3301      	adds	r3, #1
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	0699      	lsls	r1, r3, #26
 8005a6a:	bf42      	ittt	mi
 8005a6c:	6833      	ldrmi	r3, [r6, #0]
 8005a6e:	3302      	addmi	r3, #2
 8005a70:	6033      	strmi	r3, [r6, #0]
 8005a72:	6825      	ldr	r5, [r4, #0]
 8005a74:	f015 0506 	ands.w	r5, r5, #6
 8005a78:	d106      	bne.n	8005a88 <_printf_common+0x48>
 8005a7a:	f104 0a19 	add.w	sl, r4, #25
 8005a7e:	68e3      	ldr	r3, [r4, #12]
 8005a80:	6832      	ldr	r2, [r6, #0]
 8005a82:	1a9b      	subs	r3, r3, r2
 8005a84:	42ab      	cmp	r3, r5
 8005a86:	dc26      	bgt.n	8005ad6 <_printf_common+0x96>
 8005a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	3b00      	subs	r3, #0
 8005a90:	bf18      	it	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	0692      	lsls	r2, r2, #26
 8005a96:	d42b      	bmi.n	8005af0 <_printf_common+0xb0>
 8005a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c8      	blx	r9
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d01e      	beq.n	8005ae4 <_printf_common+0xa4>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	6922      	ldr	r2, [r4, #16]
 8005aaa:	f003 0306 	and.w	r3, r3, #6
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	bf02      	ittt	eq
 8005ab2:	68e5      	ldreq	r5, [r4, #12]
 8005ab4:	6833      	ldreq	r3, [r6, #0]
 8005ab6:	1aed      	subeq	r5, r5, r3
 8005ab8:	68a3      	ldr	r3, [r4, #8]
 8005aba:	bf0c      	ite	eq
 8005abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac0:	2500      	movne	r5, #0
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	bfc4      	itt	gt
 8005ac6:	1a9b      	subgt	r3, r3, r2
 8005ac8:	18ed      	addgt	r5, r5, r3
 8005aca:	2600      	movs	r6, #0
 8005acc:	341a      	adds	r4, #26
 8005ace:	42b5      	cmp	r5, r6
 8005ad0:	d11a      	bne.n	8005b08 <_printf_common+0xc8>
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	e008      	b.n	8005ae8 <_printf_common+0xa8>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4652      	mov	r2, sl
 8005ada:	4641      	mov	r1, r8
 8005adc:	4638      	mov	r0, r7
 8005ade:	47c8      	blx	r9
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d103      	bne.n	8005aec <_printf_common+0xac>
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aec:	3501      	adds	r5, #1
 8005aee:	e7c6      	b.n	8005a7e <_printf_common+0x3e>
 8005af0:	18e1      	adds	r1, r4, r3
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	2030      	movs	r0, #48	@ 0x30
 8005af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005afa:	4422      	add	r2, r4
 8005afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b04:	3302      	adds	r3, #2
 8005b06:	e7c7      	b.n	8005a98 <_printf_common+0x58>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c8      	blx	r9
 8005b12:	3001      	adds	r0, #1
 8005b14:	d0e6      	beq.n	8005ae4 <_printf_common+0xa4>
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7d9      	b.n	8005ace <_printf_common+0x8e>
	...

08005b1c <_printf_i>:
 8005b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	7e0f      	ldrb	r7, [r1, #24]
 8005b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b24:	2f78      	cmp	r7, #120	@ 0x78
 8005b26:	4691      	mov	r9, r2
 8005b28:	4680      	mov	r8, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	469a      	mov	sl, r3
 8005b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b32:	d807      	bhi.n	8005b44 <_printf_i+0x28>
 8005b34:	2f62      	cmp	r7, #98	@ 0x62
 8005b36:	d80a      	bhi.n	8005b4e <_printf_i+0x32>
 8005b38:	2f00      	cmp	r7, #0
 8005b3a:	f000 80d1 	beq.w	8005ce0 <_printf_i+0x1c4>
 8005b3e:	2f58      	cmp	r7, #88	@ 0x58
 8005b40:	f000 80b8 	beq.w	8005cb4 <_printf_i+0x198>
 8005b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b4c:	e03a      	b.n	8005bc4 <_printf_i+0xa8>
 8005b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b52:	2b15      	cmp	r3, #21
 8005b54:	d8f6      	bhi.n	8005b44 <_printf_i+0x28>
 8005b56:	a101      	add	r1, pc, #4	@ (adr r1, 8005b5c <_printf_i+0x40>)
 8005b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b5c:	08005bb5 	.word	0x08005bb5
 8005b60:	08005bc9 	.word	0x08005bc9
 8005b64:	08005b45 	.word	0x08005b45
 8005b68:	08005b45 	.word	0x08005b45
 8005b6c:	08005b45 	.word	0x08005b45
 8005b70:	08005b45 	.word	0x08005b45
 8005b74:	08005bc9 	.word	0x08005bc9
 8005b78:	08005b45 	.word	0x08005b45
 8005b7c:	08005b45 	.word	0x08005b45
 8005b80:	08005b45 	.word	0x08005b45
 8005b84:	08005b45 	.word	0x08005b45
 8005b88:	08005cc7 	.word	0x08005cc7
 8005b8c:	08005bf3 	.word	0x08005bf3
 8005b90:	08005c81 	.word	0x08005c81
 8005b94:	08005b45 	.word	0x08005b45
 8005b98:	08005b45 	.word	0x08005b45
 8005b9c:	08005ce9 	.word	0x08005ce9
 8005ba0:	08005b45 	.word	0x08005b45
 8005ba4:	08005bf3 	.word	0x08005bf3
 8005ba8:	08005b45 	.word	0x08005b45
 8005bac:	08005b45 	.word	0x08005b45
 8005bb0:	08005c89 	.word	0x08005c89
 8005bb4:	6833      	ldr	r3, [r6, #0]
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6032      	str	r2, [r6, #0]
 8005bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e09c      	b.n	8005d02 <_printf_i+0x1e6>
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	6820      	ldr	r0, [r4, #0]
 8005bcc:	1d19      	adds	r1, r3, #4
 8005bce:	6031      	str	r1, [r6, #0]
 8005bd0:	0606      	lsls	r6, r0, #24
 8005bd2:	d501      	bpl.n	8005bd8 <_printf_i+0xbc>
 8005bd4:	681d      	ldr	r5, [r3, #0]
 8005bd6:	e003      	b.n	8005be0 <_printf_i+0xc4>
 8005bd8:	0645      	lsls	r5, r0, #25
 8005bda:	d5fb      	bpl.n	8005bd4 <_printf_i+0xb8>
 8005bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005be0:	2d00      	cmp	r5, #0
 8005be2:	da03      	bge.n	8005bec <_printf_i+0xd0>
 8005be4:	232d      	movs	r3, #45	@ 0x2d
 8005be6:	426d      	negs	r5, r5
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bec:	4858      	ldr	r0, [pc, #352]	@ (8005d50 <_printf_i+0x234>)
 8005bee:	230a      	movs	r3, #10
 8005bf0:	e011      	b.n	8005c16 <_printf_i+0xfa>
 8005bf2:	6821      	ldr	r1, [r4, #0]
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	0608      	lsls	r0, r1, #24
 8005bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bfc:	d402      	bmi.n	8005c04 <_printf_i+0xe8>
 8005bfe:	0649      	lsls	r1, r1, #25
 8005c00:	bf48      	it	mi
 8005c02:	b2ad      	uxthmi	r5, r5
 8005c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c06:	4852      	ldr	r0, [pc, #328]	@ (8005d50 <_printf_i+0x234>)
 8005c08:	6033      	str	r3, [r6, #0]
 8005c0a:	bf14      	ite	ne
 8005c0c:	230a      	movne	r3, #10
 8005c0e:	2308      	moveq	r3, #8
 8005c10:	2100      	movs	r1, #0
 8005c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c16:	6866      	ldr	r6, [r4, #4]
 8005c18:	60a6      	str	r6, [r4, #8]
 8005c1a:	2e00      	cmp	r6, #0
 8005c1c:	db05      	blt.n	8005c2a <_printf_i+0x10e>
 8005c1e:	6821      	ldr	r1, [r4, #0]
 8005c20:	432e      	orrs	r6, r5
 8005c22:	f021 0104 	bic.w	r1, r1, #4
 8005c26:	6021      	str	r1, [r4, #0]
 8005c28:	d04b      	beq.n	8005cc2 <_printf_i+0x1a6>
 8005c2a:	4616      	mov	r6, r2
 8005c2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c30:	fb03 5711 	mls	r7, r3, r1, r5
 8005c34:	5dc7      	ldrb	r7, [r0, r7]
 8005c36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c3a:	462f      	mov	r7, r5
 8005c3c:	42bb      	cmp	r3, r7
 8005c3e:	460d      	mov	r5, r1
 8005c40:	d9f4      	bls.n	8005c2c <_printf_i+0x110>
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d10b      	bne.n	8005c5e <_printf_i+0x142>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	07df      	lsls	r7, r3, #31
 8005c4a:	d508      	bpl.n	8005c5e <_printf_i+0x142>
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	6861      	ldr	r1, [r4, #4]
 8005c50:	4299      	cmp	r1, r3
 8005c52:	bfde      	ittt	le
 8005c54:	2330      	movle	r3, #48	@ 0x30
 8005c56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c5a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005c5e:	1b92      	subs	r2, r2, r6
 8005c60:	6122      	str	r2, [r4, #16]
 8005c62:	f8cd a000 	str.w	sl, [sp]
 8005c66:	464b      	mov	r3, r9
 8005c68:	aa03      	add	r2, sp, #12
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	f7ff fee7 	bl	8005a40 <_printf_common>
 8005c72:	3001      	adds	r0, #1
 8005c74:	d14a      	bne.n	8005d0c <_printf_i+0x1f0>
 8005c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c7a:	b004      	add	sp, #16
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	f043 0320 	orr.w	r3, r3, #32
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	4832      	ldr	r0, [pc, #200]	@ (8005d54 <_printf_i+0x238>)
 8005c8a:	2778      	movs	r7, #120	@ 0x78
 8005c8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	6831      	ldr	r1, [r6, #0]
 8005c94:	061f      	lsls	r7, r3, #24
 8005c96:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c9a:	d402      	bmi.n	8005ca2 <_printf_i+0x186>
 8005c9c:	065f      	lsls	r7, r3, #25
 8005c9e:	bf48      	it	mi
 8005ca0:	b2ad      	uxthmi	r5, r5
 8005ca2:	6031      	str	r1, [r6, #0]
 8005ca4:	07d9      	lsls	r1, r3, #31
 8005ca6:	bf44      	itt	mi
 8005ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8005cac:	6023      	strmi	r3, [r4, #0]
 8005cae:	b11d      	cbz	r5, 8005cb8 <_printf_i+0x19c>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	e7ad      	b.n	8005c10 <_printf_i+0xf4>
 8005cb4:	4826      	ldr	r0, [pc, #152]	@ (8005d50 <_printf_i+0x234>)
 8005cb6:	e7e9      	b.n	8005c8c <_printf_i+0x170>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	f023 0320 	bic.w	r3, r3, #32
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	e7f6      	b.n	8005cb0 <_printf_i+0x194>
 8005cc2:	4616      	mov	r6, r2
 8005cc4:	e7bd      	b.n	8005c42 <_printf_i+0x126>
 8005cc6:	6833      	ldr	r3, [r6, #0]
 8005cc8:	6825      	ldr	r5, [r4, #0]
 8005cca:	6961      	ldr	r1, [r4, #20]
 8005ccc:	1d18      	adds	r0, r3, #4
 8005cce:	6030      	str	r0, [r6, #0]
 8005cd0:	062e      	lsls	r6, r5, #24
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	d501      	bpl.n	8005cda <_printf_i+0x1be>
 8005cd6:	6019      	str	r1, [r3, #0]
 8005cd8:	e002      	b.n	8005ce0 <_printf_i+0x1c4>
 8005cda:	0668      	lsls	r0, r5, #25
 8005cdc:	d5fb      	bpl.n	8005cd6 <_printf_i+0x1ba>
 8005cde:	8019      	strh	r1, [r3, #0]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6123      	str	r3, [r4, #16]
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	e7bc      	b.n	8005c62 <_printf_i+0x146>
 8005ce8:	6833      	ldr	r3, [r6, #0]
 8005cea:	1d1a      	adds	r2, r3, #4
 8005cec:	6032      	str	r2, [r6, #0]
 8005cee:	681e      	ldr	r6, [r3, #0]
 8005cf0:	6862      	ldr	r2, [r4, #4]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f7fa fa6b 	bl	80001d0 <memchr>
 8005cfa:	b108      	cbz	r0, 8005d00 <_printf_i+0x1e4>
 8005cfc:	1b80      	subs	r0, r0, r6
 8005cfe:	6060      	str	r0, [r4, #4]
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	6123      	str	r3, [r4, #16]
 8005d04:	2300      	movs	r3, #0
 8005d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d0a:	e7aa      	b.n	8005c62 <_printf_i+0x146>
 8005d0c:	6923      	ldr	r3, [r4, #16]
 8005d0e:	4632      	mov	r2, r6
 8005d10:	4649      	mov	r1, r9
 8005d12:	4640      	mov	r0, r8
 8005d14:	47d0      	blx	sl
 8005d16:	3001      	adds	r0, #1
 8005d18:	d0ad      	beq.n	8005c76 <_printf_i+0x15a>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	079b      	lsls	r3, r3, #30
 8005d1e:	d413      	bmi.n	8005d48 <_printf_i+0x22c>
 8005d20:	68e0      	ldr	r0, [r4, #12]
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	4298      	cmp	r0, r3
 8005d26:	bfb8      	it	lt
 8005d28:	4618      	movlt	r0, r3
 8005d2a:	e7a6      	b.n	8005c7a <_printf_i+0x15e>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4632      	mov	r2, r6
 8005d30:	4649      	mov	r1, r9
 8005d32:	4640      	mov	r0, r8
 8005d34:	47d0      	blx	sl
 8005d36:	3001      	adds	r0, #1
 8005d38:	d09d      	beq.n	8005c76 <_printf_i+0x15a>
 8005d3a:	3501      	adds	r5, #1
 8005d3c:	68e3      	ldr	r3, [r4, #12]
 8005d3e:	9903      	ldr	r1, [sp, #12]
 8005d40:	1a5b      	subs	r3, r3, r1
 8005d42:	42ab      	cmp	r3, r5
 8005d44:	dcf2      	bgt.n	8005d2c <_printf_i+0x210>
 8005d46:	e7eb      	b.n	8005d20 <_printf_i+0x204>
 8005d48:	2500      	movs	r5, #0
 8005d4a:	f104 0619 	add.w	r6, r4, #25
 8005d4e:	e7f5      	b.n	8005d3c <_printf_i+0x220>
 8005d50:	08009f96 	.word	0x08009f96
 8005d54:	08009fa7 	.word	0x08009fa7

08005d58 <_scanf_float>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	4691      	mov	r9, r2
 8005d60:	9303      	str	r3, [sp, #12]
 8005d62:	688b      	ldr	r3, [r1, #8]
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005d6a:	bf81      	itttt	hi
 8005d6c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005d70:	eb03 0b05 	addhi.w	fp, r3, r5
 8005d74:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005d78:	608b      	strhi	r3, [r1, #8]
 8005d7a:	680b      	ldr	r3, [r1, #0]
 8005d7c:	460a      	mov	r2, r1
 8005d7e:	f04f 0500 	mov.w	r5, #0
 8005d82:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005d86:	f842 3b1c 	str.w	r3, [r2], #28
 8005d8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d8e:	4680      	mov	r8, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	bf98      	it	ls
 8005d94:	f04f 0b00 	movls.w	fp, #0
 8005d98:	9201      	str	r2, [sp, #4]
 8005d9a:	4616      	mov	r6, r2
 8005d9c:	46aa      	mov	sl, r5
 8005d9e:	462f      	mov	r7, r5
 8005da0:	9502      	str	r5, [sp, #8]
 8005da2:	68a2      	ldr	r2, [r4, #8]
 8005da4:	b15a      	cbz	r2, 8005dbe <_scanf_float+0x66>
 8005da6:	f8d9 3000 	ldr.w	r3, [r9]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b4e      	cmp	r3, #78	@ 0x4e
 8005dae:	d863      	bhi.n	8005e78 <_scanf_float+0x120>
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d83b      	bhi.n	8005e2c <_scanf_float+0xd4>
 8005db4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005db8:	b2c8      	uxtb	r0, r1
 8005dba:	280e      	cmp	r0, #14
 8005dbc:	d939      	bls.n	8005e32 <_scanf_float+0xda>
 8005dbe:	b11f      	cbz	r7, 8005dc8 <_scanf_float+0x70>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dc6:	6023      	str	r3, [r4, #0]
 8005dc8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005dcc:	f1ba 0f01 	cmp.w	sl, #1
 8005dd0:	f200 8114 	bhi.w	8005ffc <_scanf_float+0x2a4>
 8005dd4:	9b01      	ldr	r3, [sp, #4]
 8005dd6:	429e      	cmp	r6, r3
 8005dd8:	f200 8105 	bhi.w	8005fe6 <_scanf_float+0x28e>
 8005ddc:	2001      	movs	r0, #1
 8005dde:	b007      	add	sp, #28
 8005de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005de8:	2a0d      	cmp	r2, #13
 8005dea:	d8e8      	bhi.n	8005dbe <_scanf_float+0x66>
 8005dec:	a101      	add	r1, pc, #4	@ (adr r1, 8005df4 <_scanf_float+0x9c>)
 8005dee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005f3d 	.word	0x08005f3d
 8005df8:	08005dbf 	.word	0x08005dbf
 8005dfc:	08005dbf 	.word	0x08005dbf
 8005e00:	08005dbf 	.word	0x08005dbf
 8005e04:	08005f99 	.word	0x08005f99
 8005e08:	08005f73 	.word	0x08005f73
 8005e0c:	08005dbf 	.word	0x08005dbf
 8005e10:	08005dbf 	.word	0x08005dbf
 8005e14:	08005f4b 	.word	0x08005f4b
 8005e18:	08005dbf 	.word	0x08005dbf
 8005e1c:	08005dbf 	.word	0x08005dbf
 8005e20:	08005dbf 	.word	0x08005dbf
 8005e24:	08005dbf 	.word	0x08005dbf
 8005e28:	08005f07 	.word	0x08005f07
 8005e2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005e30:	e7da      	b.n	8005de8 <_scanf_float+0x90>
 8005e32:	290e      	cmp	r1, #14
 8005e34:	d8c3      	bhi.n	8005dbe <_scanf_float+0x66>
 8005e36:	a001      	add	r0, pc, #4	@ (adr r0, 8005e3c <_scanf_float+0xe4>)
 8005e38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e3c:	08005ef7 	.word	0x08005ef7
 8005e40:	08005dbf 	.word	0x08005dbf
 8005e44:	08005ef7 	.word	0x08005ef7
 8005e48:	08005f87 	.word	0x08005f87
 8005e4c:	08005dbf 	.word	0x08005dbf
 8005e50:	08005e99 	.word	0x08005e99
 8005e54:	08005edd 	.word	0x08005edd
 8005e58:	08005edd 	.word	0x08005edd
 8005e5c:	08005edd 	.word	0x08005edd
 8005e60:	08005edd 	.word	0x08005edd
 8005e64:	08005edd 	.word	0x08005edd
 8005e68:	08005edd 	.word	0x08005edd
 8005e6c:	08005edd 	.word	0x08005edd
 8005e70:	08005edd 	.word	0x08005edd
 8005e74:	08005edd 	.word	0x08005edd
 8005e78:	2b6e      	cmp	r3, #110	@ 0x6e
 8005e7a:	d809      	bhi.n	8005e90 <_scanf_float+0x138>
 8005e7c:	2b60      	cmp	r3, #96	@ 0x60
 8005e7e:	d8b1      	bhi.n	8005de4 <_scanf_float+0x8c>
 8005e80:	2b54      	cmp	r3, #84	@ 0x54
 8005e82:	d07b      	beq.n	8005f7c <_scanf_float+0x224>
 8005e84:	2b59      	cmp	r3, #89	@ 0x59
 8005e86:	d19a      	bne.n	8005dbe <_scanf_float+0x66>
 8005e88:	2d07      	cmp	r5, #7
 8005e8a:	d198      	bne.n	8005dbe <_scanf_float+0x66>
 8005e8c:	2508      	movs	r5, #8
 8005e8e:	e02f      	b.n	8005ef0 <_scanf_float+0x198>
 8005e90:	2b74      	cmp	r3, #116	@ 0x74
 8005e92:	d073      	beq.n	8005f7c <_scanf_float+0x224>
 8005e94:	2b79      	cmp	r3, #121	@ 0x79
 8005e96:	e7f6      	b.n	8005e86 <_scanf_float+0x12e>
 8005e98:	6821      	ldr	r1, [r4, #0]
 8005e9a:	05c8      	lsls	r0, r1, #23
 8005e9c:	d51e      	bpl.n	8005edc <_scanf_float+0x184>
 8005e9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005ea2:	6021      	str	r1, [r4, #0]
 8005ea4:	3701      	adds	r7, #1
 8005ea6:	f1bb 0f00 	cmp.w	fp, #0
 8005eaa:	d003      	beq.n	8005eb4 <_scanf_float+0x15c>
 8005eac:	3201      	adds	r2, #1
 8005eae:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005eb2:	60a2      	str	r2, [r4, #8]
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f8c9 3004 	str.w	r3, [r9, #4]
 8005ecc:	f340 8082 	ble.w	8005fd4 <_scanf_float+0x27c>
 8005ed0:	f8d9 3000 	ldr.w	r3, [r9]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f8c9 3000 	str.w	r3, [r9]
 8005eda:	e762      	b.n	8005da2 <_scanf_float+0x4a>
 8005edc:	eb1a 0105 	adds.w	r1, sl, r5
 8005ee0:	f47f af6d 	bne.w	8005dbe <_scanf_float+0x66>
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	460d      	mov	r5, r1
 8005eee:	468a      	mov	sl, r1
 8005ef0:	f806 3b01 	strb.w	r3, [r6], #1
 8005ef4:	e7de      	b.n	8005eb4 <_scanf_float+0x15c>
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	0610      	lsls	r0, r2, #24
 8005efa:	f57f af60 	bpl.w	8005dbe <_scanf_float+0x66>
 8005efe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	e7f4      	b.n	8005ef0 <_scanf_float+0x198>
 8005f06:	f1ba 0f00 	cmp.w	sl, #0
 8005f0a:	d10c      	bne.n	8005f26 <_scanf_float+0x1ce>
 8005f0c:	b977      	cbnz	r7, 8005f2c <_scanf_float+0x1d4>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005f14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005f18:	d108      	bne.n	8005f2c <_scanf_float+0x1d4>
 8005f1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	f04f 0a01 	mov.w	sl, #1
 8005f24:	e7e4      	b.n	8005ef0 <_scanf_float+0x198>
 8005f26:	f1ba 0f02 	cmp.w	sl, #2
 8005f2a:	d050      	beq.n	8005fce <_scanf_float+0x276>
 8005f2c:	2d01      	cmp	r5, #1
 8005f2e:	d002      	beq.n	8005f36 <_scanf_float+0x1de>
 8005f30:	2d04      	cmp	r5, #4
 8005f32:	f47f af44 	bne.w	8005dbe <_scanf_float+0x66>
 8005f36:	3501      	adds	r5, #1
 8005f38:	b2ed      	uxtb	r5, r5
 8005f3a:	e7d9      	b.n	8005ef0 <_scanf_float+0x198>
 8005f3c:	f1ba 0f01 	cmp.w	sl, #1
 8005f40:	f47f af3d 	bne.w	8005dbe <_scanf_float+0x66>
 8005f44:	f04f 0a02 	mov.w	sl, #2
 8005f48:	e7d2      	b.n	8005ef0 <_scanf_float+0x198>
 8005f4a:	b975      	cbnz	r5, 8005f6a <_scanf_float+0x212>
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	f47f af37 	bne.w	8005dc0 <_scanf_float+0x68>
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005f58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005f5c:	f040 8103 	bne.w	8006166 <_scanf_float+0x40e>
 8005f60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	2501      	movs	r5, #1
 8005f68:	e7c2      	b.n	8005ef0 <_scanf_float+0x198>
 8005f6a:	2d03      	cmp	r5, #3
 8005f6c:	d0e3      	beq.n	8005f36 <_scanf_float+0x1de>
 8005f6e:	2d05      	cmp	r5, #5
 8005f70:	e7df      	b.n	8005f32 <_scanf_float+0x1da>
 8005f72:	2d02      	cmp	r5, #2
 8005f74:	f47f af23 	bne.w	8005dbe <_scanf_float+0x66>
 8005f78:	2503      	movs	r5, #3
 8005f7a:	e7b9      	b.n	8005ef0 <_scanf_float+0x198>
 8005f7c:	2d06      	cmp	r5, #6
 8005f7e:	f47f af1e 	bne.w	8005dbe <_scanf_float+0x66>
 8005f82:	2507      	movs	r5, #7
 8005f84:	e7b4      	b.n	8005ef0 <_scanf_float+0x198>
 8005f86:	6822      	ldr	r2, [r4, #0]
 8005f88:	0591      	lsls	r1, r2, #22
 8005f8a:	f57f af18 	bpl.w	8005dbe <_scanf_float+0x66>
 8005f8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	9702      	str	r7, [sp, #8]
 8005f96:	e7ab      	b.n	8005ef0 <_scanf_float+0x198>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005f9e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005fa2:	d005      	beq.n	8005fb0 <_scanf_float+0x258>
 8005fa4:	0550      	lsls	r0, r2, #21
 8005fa6:	f57f af0a 	bpl.w	8005dbe <_scanf_float+0x66>
 8005faa:	2f00      	cmp	r7, #0
 8005fac:	f000 80db 	beq.w	8006166 <_scanf_float+0x40e>
 8005fb0:	0591      	lsls	r1, r2, #22
 8005fb2:	bf58      	it	pl
 8005fb4:	9902      	ldrpl	r1, [sp, #8]
 8005fb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005fba:	bf58      	it	pl
 8005fbc:	1a79      	subpl	r1, r7, r1
 8005fbe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005fc2:	bf58      	it	pl
 8005fc4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005fc8:	6022      	str	r2, [r4, #0]
 8005fca:	2700      	movs	r7, #0
 8005fcc:	e790      	b.n	8005ef0 <_scanf_float+0x198>
 8005fce:	f04f 0a03 	mov.w	sl, #3
 8005fd2:	e78d      	b.n	8005ef0 <_scanf_float+0x198>
 8005fd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4798      	blx	r3
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f43f aedf 	beq.w	8005da2 <_scanf_float+0x4a>
 8005fe4:	e6eb      	b.n	8005dbe <_scanf_float+0x66>
 8005fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fee:	464a      	mov	r2, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4798      	blx	r3
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	6123      	str	r3, [r4, #16]
 8005ffa:	e6eb      	b.n	8005dd4 <_scanf_float+0x7c>
 8005ffc:	1e6b      	subs	r3, r5, #1
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d824      	bhi.n	800604c <_scanf_float+0x2f4>
 8006002:	2d02      	cmp	r5, #2
 8006004:	d836      	bhi.n	8006074 <_scanf_float+0x31c>
 8006006:	9b01      	ldr	r3, [sp, #4]
 8006008:	429e      	cmp	r6, r3
 800600a:	f67f aee7 	bls.w	8005ddc <_scanf_float+0x84>
 800600e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006016:	464a      	mov	r2, r9
 8006018:	4640      	mov	r0, r8
 800601a:	4798      	blx	r3
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	3b01      	subs	r3, #1
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	e7f0      	b.n	8006006 <_scanf_float+0x2ae>
 8006024:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006028:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800602c:	464a      	mov	r2, r9
 800602e:	4640      	mov	r0, r8
 8006030:	4798      	blx	r3
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	3b01      	subs	r3, #1
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800603c:	fa5f fa8a 	uxtb.w	sl, sl
 8006040:	f1ba 0f02 	cmp.w	sl, #2
 8006044:	d1ee      	bne.n	8006024 <_scanf_float+0x2cc>
 8006046:	3d03      	subs	r5, #3
 8006048:	b2ed      	uxtb	r5, r5
 800604a:	1b76      	subs	r6, r6, r5
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	05da      	lsls	r2, r3, #23
 8006050:	d530      	bpl.n	80060b4 <_scanf_float+0x35c>
 8006052:	055b      	lsls	r3, r3, #21
 8006054:	d511      	bpl.n	800607a <_scanf_float+0x322>
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	429e      	cmp	r6, r3
 800605a:	f67f aebf 	bls.w	8005ddc <_scanf_float+0x84>
 800605e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006066:	464a      	mov	r2, r9
 8006068:	4640      	mov	r0, r8
 800606a:	4798      	blx	r3
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	3b01      	subs	r3, #1
 8006070:	6123      	str	r3, [r4, #16]
 8006072:	e7f0      	b.n	8006056 <_scanf_float+0x2fe>
 8006074:	46aa      	mov	sl, r5
 8006076:	46b3      	mov	fp, r6
 8006078:	e7de      	b.n	8006038 <_scanf_float+0x2e0>
 800607a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	2965      	cmp	r1, #101	@ 0x65
 8006082:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006086:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800608a:	6123      	str	r3, [r4, #16]
 800608c:	d00c      	beq.n	80060a8 <_scanf_float+0x350>
 800608e:	2945      	cmp	r1, #69	@ 0x45
 8006090:	d00a      	beq.n	80060a8 <_scanf_float+0x350>
 8006092:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006096:	464a      	mov	r2, r9
 8006098:	4640      	mov	r0, r8
 800609a:	4798      	blx	r3
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	1eb5      	subs	r5, r6, #2
 80060a6:	6123      	str	r3, [r4, #16]
 80060a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060ac:	464a      	mov	r2, r9
 80060ae:	4640      	mov	r0, r8
 80060b0:	4798      	blx	r3
 80060b2:	462e      	mov	r6, r5
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	f012 0210 	ands.w	r2, r2, #16
 80060ba:	d001      	beq.n	80060c0 <_scanf_float+0x368>
 80060bc:	2000      	movs	r0, #0
 80060be:	e68e      	b.n	8005dde <_scanf_float+0x86>
 80060c0:	7032      	strb	r2, [r6, #0]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060cc:	d125      	bne.n	800611a <_scanf_float+0x3c2>
 80060ce:	9b02      	ldr	r3, [sp, #8]
 80060d0:	429f      	cmp	r7, r3
 80060d2:	d00a      	beq.n	80060ea <_scanf_float+0x392>
 80060d4:	1bda      	subs	r2, r3, r7
 80060d6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80060da:	429e      	cmp	r6, r3
 80060dc:	bf28      	it	cs
 80060de:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80060e2:	4922      	ldr	r1, [pc, #136]	@ (800616c <_scanf_float+0x414>)
 80060e4:	4630      	mov	r0, r6
 80060e6:	f000 f907 	bl	80062f8 <siprintf>
 80060ea:	9901      	ldr	r1, [sp, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	4640      	mov	r0, r8
 80060f0:	f002 fbf2 	bl	80088d8 <_strtod_r>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f011 0f02 	tst.w	r1, #2
 80060fe:	ec57 6b10 	vmov	r6, r7, d0
 8006102:	f103 0204 	add.w	r2, r3, #4
 8006106:	d015      	beq.n	8006134 <_scanf_float+0x3dc>
 8006108:	9903      	ldr	r1, [sp, #12]
 800610a:	600a      	str	r2, [r1, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	e9c3 6700 	strd	r6, r7, [r3]
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60e3      	str	r3, [r4, #12]
 8006118:	e7d0      	b.n	80060bc <_scanf_float+0x364>
 800611a:	9b04      	ldr	r3, [sp, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0e4      	beq.n	80060ea <_scanf_float+0x392>
 8006120:	9905      	ldr	r1, [sp, #20]
 8006122:	230a      	movs	r3, #10
 8006124:	3101      	adds	r1, #1
 8006126:	4640      	mov	r0, r8
 8006128:	f002 fc56 	bl	80089d8 <_strtol_r>
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	9e05      	ldr	r6, [sp, #20]
 8006130:	1ac2      	subs	r2, r0, r3
 8006132:	e7d0      	b.n	80060d6 <_scanf_float+0x37e>
 8006134:	f011 0f04 	tst.w	r1, #4
 8006138:	9903      	ldr	r1, [sp, #12]
 800613a:	600a      	str	r2, [r1, #0]
 800613c:	d1e6      	bne.n	800610c <_scanf_float+0x3b4>
 800613e:	681d      	ldr	r5, [r3, #0]
 8006140:	4632      	mov	r2, r6
 8006142:	463b      	mov	r3, r7
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa fcf0 	bl	8000b2c <__aeabi_dcmpun>
 800614c:	b128      	cbz	r0, 800615a <_scanf_float+0x402>
 800614e:	4808      	ldr	r0, [pc, #32]	@ (8006170 <_scanf_float+0x418>)
 8006150:	f000 f9b8 	bl	80064c4 <nanf>
 8006154:	ed85 0a00 	vstr	s0, [r5]
 8006158:	e7db      	b.n	8006112 <_scanf_float+0x3ba>
 800615a:	4630      	mov	r0, r6
 800615c:	4639      	mov	r1, r7
 800615e:	f7fa fd43 	bl	8000be8 <__aeabi_d2f>
 8006162:	6028      	str	r0, [r5, #0]
 8006164:	e7d5      	b.n	8006112 <_scanf_float+0x3ba>
 8006166:	2700      	movs	r7, #0
 8006168:	e62e      	b.n	8005dc8 <_scanf_float+0x70>
 800616a:	bf00      	nop
 800616c:	08009fb8 	.word	0x08009fb8
 8006170:	0800a0f9 	.word	0x0800a0f9

08006174 <std>:
 8006174:	2300      	movs	r3, #0
 8006176:	b510      	push	{r4, lr}
 8006178:	4604      	mov	r4, r0
 800617a:	e9c0 3300 	strd	r3, r3, [r0]
 800617e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006182:	6083      	str	r3, [r0, #8]
 8006184:	8181      	strh	r1, [r0, #12]
 8006186:	6643      	str	r3, [r0, #100]	@ 0x64
 8006188:	81c2      	strh	r2, [r0, #14]
 800618a:	6183      	str	r3, [r0, #24]
 800618c:	4619      	mov	r1, r3
 800618e:	2208      	movs	r2, #8
 8006190:	305c      	adds	r0, #92	@ 0x5c
 8006192:	f000 f916 	bl	80063c2 <memset>
 8006196:	4b0d      	ldr	r3, [pc, #52]	@ (80061cc <std+0x58>)
 8006198:	6263      	str	r3, [r4, #36]	@ 0x24
 800619a:	4b0d      	ldr	r3, [pc, #52]	@ (80061d0 <std+0x5c>)
 800619c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800619e:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <std+0x60>)
 80061a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <std+0x64>)
 80061a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80061a6:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <std+0x68>)
 80061a8:	6224      	str	r4, [r4, #32]
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d006      	beq.n	80061bc <std+0x48>
 80061ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80061b2:	4294      	cmp	r4, r2
 80061b4:	d002      	beq.n	80061bc <std+0x48>
 80061b6:	33d0      	adds	r3, #208	@ 0xd0
 80061b8:	429c      	cmp	r4, r3
 80061ba:	d105      	bne.n	80061c8 <std+0x54>
 80061bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c4:	f000 b97a 	b.w	80064bc <__retarget_lock_init_recursive>
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	bf00      	nop
 80061cc:	0800633d 	.word	0x0800633d
 80061d0:	0800635f 	.word	0x0800635f
 80061d4:	08006397 	.word	0x08006397
 80061d8:	080063bb 	.word	0x080063bb
 80061dc:	20000474 	.word	0x20000474

080061e0 <stdio_exit_handler>:
 80061e0:	4a02      	ldr	r2, [pc, #8]	@ (80061ec <stdio_exit_handler+0xc>)
 80061e2:	4903      	ldr	r1, [pc, #12]	@ (80061f0 <stdio_exit_handler+0x10>)
 80061e4:	4803      	ldr	r0, [pc, #12]	@ (80061f4 <stdio_exit_handler+0x14>)
 80061e6:	f000 b869 	b.w	80062bc <_fwalk_sglue>
 80061ea:	bf00      	nop
 80061ec:	20000010 	.word	0x20000010
 80061f0:	08008d95 	.word	0x08008d95
 80061f4:	20000020 	.word	0x20000020

080061f8 <cleanup_stdio>:
 80061f8:	6841      	ldr	r1, [r0, #4]
 80061fa:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <cleanup_stdio+0x34>)
 80061fc:	4299      	cmp	r1, r3
 80061fe:	b510      	push	{r4, lr}
 8006200:	4604      	mov	r4, r0
 8006202:	d001      	beq.n	8006208 <cleanup_stdio+0x10>
 8006204:	f002 fdc6 	bl	8008d94 <_fflush_r>
 8006208:	68a1      	ldr	r1, [r4, #8]
 800620a:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <cleanup_stdio+0x38>)
 800620c:	4299      	cmp	r1, r3
 800620e:	d002      	beq.n	8006216 <cleanup_stdio+0x1e>
 8006210:	4620      	mov	r0, r4
 8006212:	f002 fdbf 	bl	8008d94 <_fflush_r>
 8006216:	68e1      	ldr	r1, [r4, #12]
 8006218:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <cleanup_stdio+0x3c>)
 800621a:	4299      	cmp	r1, r3
 800621c:	d004      	beq.n	8006228 <cleanup_stdio+0x30>
 800621e:	4620      	mov	r0, r4
 8006220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006224:	f002 bdb6 	b.w	8008d94 <_fflush_r>
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop
 800622c:	20000474 	.word	0x20000474
 8006230:	200004dc 	.word	0x200004dc
 8006234:	20000544 	.word	0x20000544

08006238 <global_stdio_init.part.0>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <global_stdio_init.part.0+0x30>)
 800623c:	4c0b      	ldr	r4, [pc, #44]	@ (800626c <global_stdio_init.part.0+0x34>)
 800623e:	4a0c      	ldr	r2, [pc, #48]	@ (8006270 <global_stdio_init.part.0+0x38>)
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	4620      	mov	r0, r4
 8006244:	2200      	movs	r2, #0
 8006246:	2104      	movs	r1, #4
 8006248:	f7ff ff94 	bl	8006174 <std>
 800624c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006250:	2201      	movs	r2, #1
 8006252:	2109      	movs	r1, #9
 8006254:	f7ff ff8e 	bl	8006174 <std>
 8006258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800625c:	2202      	movs	r2, #2
 800625e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006262:	2112      	movs	r1, #18
 8006264:	f7ff bf86 	b.w	8006174 <std>
 8006268:	200005ac 	.word	0x200005ac
 800626c:	20000474 	.word	0x20000474
 8006270:	080061e1 	.word	0x080061e1

08006274 <__sfp_lock_acquire>:
 8006274:	4801      	ldr	r0, [pc, #4]	@ (800627c <__sfp_lock_acquire+0x8>)
 8006276:	f000 b922 	b.w	80064be <__retarget_lock_acquire_recursive>
 800627a:	bf00      	nop
 800627c:	200005b5 	.word	0x200005b5

08006280 <__sfp_lock_release>:
 8006280:	4801      	ldr	r0, [pc, #4]	@ (8006288 <__sfp_lock_release+0x8>)
 8006282:	f000 b91d 	b.w	80064c0 <__retarget_lock_release_recursive>
 8006286:	bf00      	nop
 8006288:	200005b5 	.word	0x200005b5

0800628c <__sinit>:
 800628c:	b510      	push	{r4, lr}
 800628e:	4604      	mov	r4, r0
 8006290:	f7ff fff0 	bl	8006274 <__sfp_lock_acquire>
 8006294:	6a23      	ldr	r3, [r4, #32]
 8006296:	b11b      	cbz	r3, 80062a0 <__sinit+0x14>
 8006298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800629c:	f7ff bff0 	b.w	8006280 <__sfp_lock_release>
 80062a0:	4b04      	ldr	r3, [pc, #16]	@ (80062b4 <__sinit+0x28>)
 80062a2:	6223      	str	r3, [r4, #32]
 80062a4:	4b04      	ldr	r3, [pc, #16]	@ (80062b8 <__sinit+0x2c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f5      	bne.n	8006298 <__sinit+0xc>
 80062ac:	f7ff ffc4 	bl	8006238 <global_stdio_init.part.0>
 80062b0:	e7f2      	b.n	8006298 <__sinit+0xc>
 80062b2:	bf00      	nop
 80062b4:	080061f9 	.word	0x080061f9
 80062b8:	200005ac 	.word	0x200005ac

080062bc <_fwalk_sglue>:
 80062bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c0:	4607      	mov	r7, r0
 80062c2:	4688      	mov	r8, r1
 80062c4:	4614      	mov	r4, r2
 80062c6:	2600      	movs	r6, #0
 80062c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062cc:	f1b9 0901 	subs.w	r9, r9, #1
 80062d0:	d505      	bpl.n	80062de <_fwalk_sglue+0x22>
 80062d2:	6824      	ldr	r4, [r4, #0]
 80062d4:	2c00      	cmp	r4, #0
 80062d6:	d1f7      	bne.n	80062c8 <_fwalk_sglue+0xc>
 80062d8:	4630      	mov	r0, r6
 80062da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062de:	89ab      	ldrh	r3, [r5, #12]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d907      	bls.n	80062f4 <_fwalk_sglue+0x38>
 80062e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062e8:	3301      	adds	r3, #1
 80062ea:	d003      	beq.n	80062f4 <_fwalk_sglue+0x38>
 80062ec:	4629      	mov	r1, r5
 80062ee:	4638      	mov	r0, r7
 80062f0:	47c0      	blx	r8
 80062f2:	4306      	orrs	r6, r0
 80062f4:	3568      	adds	r5, #104	@ 0x68
 80062f6:	e7e9      	b.n	80062cc <_fwalk_sglue+0x10>

080062f8 <siprintf>:
 80062f8:	b40e      	push	{r1, r2, r3}
 80062fa:	b510      	push	{r4, lr}
 80062fc:	b09d      	sub	sp, #116	@ 0x74
 80062fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006300:	9002      	str	r0, [sp, #8]
 8006302:	9006      	str	r0, [sp, #24]
 8006304:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006308:	480a      	ldr	r0, [pc, #40]	@ (8006334 <siprintf+0x3c>)
 800630a:	9107      	str	r1, [sp, #28]
 800630c:	9104      	str	r1, [sp, #16]
 800630e:	490a      	ldr	r1, [pc, #40]	@ (8006338 <siprintf+0x40>)
 8006310:	f853 2b04 	ldr.w	r2, [r3], #4
 8006314:	9105      	str	r1, [sp, #20]
 8006316:	2400      	movs	r4, #0
 8006318:	a902      	add	r1, sp, #8
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006320:	f002 fbb8 	bl	8008a94 <_svfiprintf_r>
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	701c      	strb	r4, [r3, #0]
 8006328:	b01d      	add	sp, #116	@ 0x74
 800632a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800632e:	b003      	add	sp, #12
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	2000001c 	.word	0x2000001c
 8006338:	ffff0208 	.word	0xffff0208

0800633c <__sread>:
 800633c:	b510      	push	{r4, lr}
 800633e:	460c      	mov	r4, r1
 8006340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006344:	f000 f86c 	bl	8006420 <_read_r>
 8006348:	2800      	cmp	r0, #0
 800634a:	bfab      	itete	ge
 800634c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800634e:	89a3      	ldrhlt	r3, [r4, #12]
 8006350:	181b      	addge	r3, r3, r0
 8006352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006356:	bfac      	ite	ge
 8006358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800635a:	81a3      	strhlt	r3, [r4, #12]
 800635c:	bd10      	pop	{r4, pc}

0800635e <__swrite>:
 800635e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006362:	461f      	mov	r7, r3
 8006364:	898b      	ldrh	r3, [r1, #12]
 8006366:	05db      	lsls	r3, r3, #23
 8006368:	4605      	mov	r5, r0
 800636a:	460c      	mov	r4, r1
 800636c:	4616      	mov	r6, r2
 800636e:	d505      	bpl.n	800637c <__swrite+0x1e>
 8006370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006374:	2302      	movs	r3, #2
 8006376:	2200      	movs	r2, #0
 8006378:	f000 f840 	bl	80063fc <_lseek_r>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006382:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	4632      	mov	r2, r6
 800638a:	463b      	mov	r3, r7
 800638c:	4628      	mov	r0, r5
 800638e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006392:	f000 b857 	b.w	8006444 <_write_r>

08006396 <__sseek>:
 8006396:	b510      	push	{r4, lr}
 8006398:	460c      	mov	r4, r1
 800639a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639e:	f000 f82d 	bl	80063fc <_lseek_r>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	bf15      	itete	ne
 80063a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063b2:	81a3      	strheq	r3, [r4, #12]
 80063b4:	bf18      	it	ne
 80063b6:	81a3      	strhne	r3, [r4, #12]
 80063b8:	bd10      	pop	{r4, pc}

080063ba <__sclose>:
 80063ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063be:	f000 b80d 	b.w	80063dc <_close_r>

080063c2 <memset>:
 80063c2:	4402      	add	r2, r0
 80063c4:	4603      	mov	r3, r0
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d100      	bne.n	80063cc <memset+0xa>
 80063ca:	4770      	bx	lr
 80063cc:	f803 1b01 	strb.w	r1, [r3], #1
 80063d0:	e7f9      	b.n	80063c6 <memset+0x4>
	...

080063d4 <_localeconv_r>:
 80063d4:	4800      	ldr	r0, [pc, #0]	@ (80063d8 <_localeconv_r+0x4>)
 80063d6:	4770      	bx	lr
 80063d8:	2000015c 	.word	0x2000015c

080063dc <_close_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d06      	ldr	r5, [pc, #24]	@ (80063f8 <_close_r+0x1c>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fb fe06 	bl	8001ff8 <_close>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_close_r+0x1a>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_close_r+0x1a>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	200005b0 	.word	0x200005b0

080063fc <_lseek_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d07      	ldr	r5, [pc, #28]	@ (800641c <_lseek_r+0x20>)
 8006400:	4604      	mov	r4, r0
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	2200      	movs	r2, #0
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	f7fb fe1b 	bl	8002046 <_lseek>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_lseek_r+0x1e>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_lseek_r+0x1e>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	200005b0 	.word	0x200005b0

08006420 <_read_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d07      	ldr	r5, [pc, #28]	@ (8006440 <_read_r+0x20>)
 8006424:	4604      	mov	r4, r0
 8006426:	4608      	mov	r0, r1
 8006428:	4611      	mov	r1, r2
 800642a:	2200      	movs	r2, #0
 800642c:	602a      	str	r2, [r5, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	f7fb fda9 	bl	8001f86 <_read>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_read_r+0x1e>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_read_r+0x1e>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	200005b0 	.word	0x200005b0

08006444 <_write_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d07      	ldr	r5, [pc, #28]	@ (8006464 <_write_r+0x20>)
 8006448:	4604      	mov	r4, r0
 800644a:	4608      	mov	r0, r1
 800644c:	4611      	mov	r1, r2
 800644e:	2200      	movs	r2, #0
 8006450:	602a      	str	r2, [r5, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	f7fb fdb4 	bl	8001fc0 <_write>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_write_r+0x1e>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_write_r+0x1e>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	200005b0 	.word	0x200005b0

08006468 <__errno>:
 8006468:	4b01      	ldr	r3, [pc, #4]	@ (8006470 <__errno+0x8>)
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	2000001c 	.word	0x2000001c

08006474 <__libc_init_array>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4d0d      	ldr	r5, [pc, #52]	@ (80064ac <__libc_init_array+0x38>)
 8006478:	4c0d      	ldr	r4, [pc, #52]	@ (80064b0 <__libc_init_array+0x3c>)
 800647a:	1b64      	subs	r4, r4, r5
 800647c:	10a4      	asrs	r4, r4, #2
 800647e:	2600      	movs	r6, #0
 8006480:	42a6      	cmp	r6, r4
 8006482:	d109      	bne.n	8006498 <__libc_init_array+0x24>
 8006484:	4d0b      	ldr	r5, [pc, #44]	@ (80064b4 <__libc_init_array+0x40>)
 8006486:	4c0c      	ldr	r4, [pc, #48]	@ (80064b8 <__libc_init_array+0x44>)
 8006488:	f003 fb74 	bl	8009b74 <_init>
 800648c:	1b64      	subs	r4, r4, r5
 800648e:	10a4      	asrs	r4, r4, #2
 8006490:	2600      	movs	r6, #0
 8006492:	42a6      	cmp	r6, r4
 8006494:	d105      	bne.n	80064a2 <__libc_init_array+0x2e>
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	f855 3b04 	ldr.w	r3, [r5], #4
 800649c:	4798      	blx	r3
 800649e:	3601      	adds	r6, #1
 80064a0:	e7ee      	b.n	8006480 <__libc_init_array+0xc>
 80064a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a6:	4798      	blx	r3
 80064a8:	3601      	adds	r6, #1
 80064aa:	e7f2      	b.n	8006492 <__libc_init_array+0x1e>
 80064ac:	0800a3b4 	.word	0x0800a3b4
 80064b0:	0800a3b4 	.word	0x0800a3b4
 80064b4:	0800a3b4 	.word	0x0800a3b4
 80064b8:	0800a3b8 	.word	0x0800a3b8

080064bc <__retarget_lock_init_recursive>:
 80064bc:	4770      	bx	lr

080064be <__retarget_lock_acquire_recursive>:
 80064be:	4770      	bx	lr

080064c0 <__retarget_lock_release_recursive>:
 80064c0:	4770      	bx	lr
	...

080064c4 <nanf>:
 80064c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80064cc <nanf+0x8>
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	7fc00000 	.word	0x7fc00000

080064d0 <quorem>:
 80064d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	6903      	ldr	r3, [r0, #16]
 80064d6:	690c      	ldr	r4, [r1, #16]
 80064d8:	42a3      	cmp	r3, r4
 80064da:	4607      	mov	r7, r0
 80064dc:	db7e      	blt.n	80065dc <quorem+0x10c>
 80064de:	3c01      	subs	r4, #1
 80064e0:	f101 0814 	add.w	r8, r1, #20
 80064e4:	00a3      	lsls	r3, r4, #2
 80064e6:	f100 0514 	add.w	r5, r0, #20
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064fa:	3301      	adds	r3, #1
 80064fc:	429a      	cmp	r2, r3
 80064fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006502:	fbb2 f6f3 	udiv	r6, r2, r3
 8006506:	d32e      	bcc.n	8006566 <quorem+0x96>
 8006508:	f04f 0a00 	mov.w	sl, #0
 800650c:	46c4      	mov	ip, r8
 800650e:	46ae      	mov	lr, r5
 8006510:	46d3      	mov	fp, sl
 8006512:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006516:	b298      	uxth	r0, r3
 8006518:	fb06 a000 	mla	r0, r6, r0, sl
 800651c:	0c02      	lsrs	r2, r0, #16
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	fb06 2303 	mla	r3, r6, r3, r2
 8006524:	f8de 2000 	ldr.w	r2, [lr]
 8006528:	b280      	uxth	r0, r0
 800652a:	b292      	uxth	r2, r2
 800652c:	1a12      	subs	r2, r2, r0
 800652e:	445a      	add	r2, fp
 8006530:	f8de 0000 	ldr.w	r0, [lr]
 8006534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006538:	b29b      	uxth	r3, r3
 800653a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800653e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006542:	b292      	uxth	r2, r2
 8006544:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006548:	45e1      	cmp	r9, ip
 800654a:	f84e 2b04 	str.w	r2, [lr], #4
 800654e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006552:	d2de      	bcs.n	8006512 <quorem+0x42>
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	58eb      	ldr	r3, [r5, r3]
 8006558:	b92b      	cbnz	r3, 8006566 <quorem+0x96>
 800655a:	9b01      	ldr	r3, [sp, #4]
 800655c:	3b04      	subs	r3, #4
 800655e:	429d      	cmp	r5, r3
 8006560:	461a      	mov	r2, r3
 8006562:	d32f      	bcc.n	80065c4 <quorem+0xf4>
 8006564:	613c      	str	r4, [r7, #16]
 8006566:	4638      	mov	r0, r7
 8006568:	f001 f9c6 	bl	80078f8 <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	db25      	blt.n	80065bc <quorem+0xec>
 8006570:	4629      	mov	r1, r5
 8006572:	2000      	movs	r0, #0
 8006574:	f858 2b04 	ldr.w	r2, [r8], #4
 8006578:	f8d1 c000 	ldr.w	ip, [r1]
 800657c:	fa1f fe82 	uxth.w	lr, r2
 8006580:	fa1f f38c 	uxth.w	r3, ip
 8006584:	eba3 030e 	sub.w	r3, r3, lr
 8006588:	4403      	add	r3, r0
 800658a:	0c12      	lsrs	r2, r2, #16
 800658c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006590:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800659a:	45c1      	cmp	r9, r8
 800659c:	f841 3b04 	str.w	r3, [r1], #4
 80065a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065a4:	d2e6      	bcs.n	8006574 <quorem+0xa4>
 80065a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ae:	b922      	cbnz	r2, 80065ba <quorem+0xea>
 80065b0:	3b04      	subs	r3, #4
 80065b2:	429d      	cmp	r5, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	d30b      	bcc.n	80065d0 <quorem+0x100>
 80065b8:	613c      	str	r4, [r7, #16]
 80065ba:	3601      	adds	r6, #1
 80065bc:	4630      	mov	r0, r6
 80065be:	b003      	add	sp, #12
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	3b04      	subs	r3, #4
 80065c8:	2a00      	cmp	r2, #0
 80065ca:	d1cb      	bne.n	8006564 <quorem+0x94>
 80065cc:	3c01      	subs	r4, #1
 80065ce:	e7c6      	b.n	800655e <quorem+0x8e>
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	3b04      	subs	r3, #4
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	d1ef      	bne.n	80065b8 <quorem+0xe8>
 80065d8:	3c01      	subs	r4, #1
 80065da:	e7ea      	b.n	80065b2 <quorem+0xe2>
 80065dc:	2000      	movs	r0, #0
 80065de:	e7ee      	b.n	80065be <quorem+0xee>

080065e0 <_dtoa_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	69c7      	ldr	r7, [r0, #28]
 80065e6:	b097      	sub	sp, #92	@ 0x5c
 80065e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80065ec:	ec55 4b10 	vmov	r4, r5, d0
 80065f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80065f2:	9107      	str	r1, [sp, #28]
 80065f4:	4681      	mov	r9, r0
 80065f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80065f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80065fa:	b97f      	cbnz	r7, 800661c <_dtoa_r+0x3c>
 80065fc:	2010      	movs	r0, #16
 80065fe:	f000 fe09 	bl	8007214 <malloc>
 8006602:	4602      	mov	r2, r0
 8006604:	f8c9 001c 	str.w	r0, [r9, #28]
 8006608:	b920      	cbnz	r0, 8006614 <_dtoa_r+0x34>
 800660a:	4ba9      	ldr	r3, [pc, #676]	@ (80068b0 <_dtoa_r+0x2d0>)
 800660c:	21ef      	movs	r1, #239	@ 0xef
 800660e:	48a9      	ldr	r0, [pc, #676]	@ (80068b4 <_dtoa_r+0x2d4>)
 8006610:	f002 fc3a 	bl	8008e88 <__assert_func>
 8006614:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006618:	6007      	str	r7, [r0, #0]
 800661a:	60c7      	str	r7, [r0, #12]
 800661c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006620:	6819      	ldr	r1, [r3, #0]
 8006622:	b159      	cbz	r1, 800663c <_dtoa_r+0x5c>
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	604a      	str	r2, [r1, #4]
 8006628:	2301      	movs	r3, #1
 800662a:	4093      	lsls	r3, r2
 800662c:	608b      	str	r3, [r1, #8]
 800662e:	4648      	mov	r0, r9
 8006630:	f000 fee6 	bl	8007400 <_Bfree>
 8006634:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	1e2b      	subs	r3, r5, #0
 800663e:	bfb9      	ittee	lt
 8006640:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006644:	9305      	strlt	r3, [sp, #20]
 8006646:	2300      	movge	r3, #0
 8006648:	6033      	strge	r3, [r6, #0]
 800664a:	9f05      	ldr	r7, [sp, #20]
 800664c:	4b9a      	ldr	r3, [pc, #616]	@ (80068b8 <_dtoa_r+0x2d8>)
 800664e:	bfbc      	itt	lt
 8006650:	2201      	movlt	r2, #1
 8006652:	6032      	strlt	r2, [r6, #0]
 8006654:	43bb      	bics	r3, r7
 8006656:	d112      	bne.n	800667e <_dtoa_r+0x9e>
 8006658:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800665a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006664:	4323      	orrs	r3, r4
 8006666:	f000 855a 	beq.w	800711e <_dtoa_r+0xb3e>
 800666a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800666c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80068cc <_dtoa_r+0x2ec>
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 855c 	beq.w	800712e <_dtoa_r+0xb4e>
 8006676:	f10a 0303 	add.w	r3, sl, #3
 800667a:	f000 bd56 	b.w	800712a <_dtoa_r+0xb4a>
 800667e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006682:	2200      	movs	r2, #0
 8006684:	ec51 0b17 	vmov	r0, r1, d7
 8006688:	2300      	movs	r3, #0
 800668a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800668e:	f7fa fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006692:	4680      	mov	r8, r0
 8006694:	b158      	cbz	r0, 80066ae <_dtoa_r+0xce>
 8006696:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006698:	2301      	movs	r3, #1
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800669e:	b113      	cbz	r3, 80066a6 <_dtoa_r+0xc6>
 80066a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80066a2:	4b86      	ldr	r3, [pc, #536]	@ (80068bc <_dtoa_r+0x2dc>)
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80068d0 <_dtoa_r+0x2f0>
 80066aa:	f000 bd40 	b.w	800712e <_dtoa_r+0xb4e>
 80066ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80066b2:	aa14      	add	r2, sp, #80	@ 0x50
 80066b4:	a915      	add	r1, sp, #84	@ 0x54
 80066b6:	4648      	mov	r0, r9
 80066b8:	f001 fa3e 	bl	8007b38 <__d2b>
 80066bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80066c0:	9002      	str	r0, [sp, #8]
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	d078      	beq.n	80067b8 <_dtoa_r+0x1d8>
 80066c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80066cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80066d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80066dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80066e0:	4619      	mov	r1, r3
 80066e2:	2200      	movs	r2, #0
 80066e4:	4b76      	ldr	r3, [pc, #472]	@ (80068c0 <_dtoa_r+0x2e0>)
 80066e6:	f7f9 fdcf 	bl	8000288 <__aeabi_dsub>
 80066ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8006898 <_dtoa_r+0x2b8>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80068a0 <_dtoa_r+0x2c0>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 fdc7 	bl	800028c <__adddf3>
 80066fe:	4604      	mov	r4, r0
 8006700:	4630      	mov	r0, r6
 8006702:	460d      	mov	r5, r1
 8006704:	f7f9 ff0e 	bl	8000524 <__aeabi_i2d>
 8006708:	a367      	add	r3, pc, #412	@ (adr r3, 80068a8 <_dtoa_r+0x2c8>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f7f9 ff73 	bl	80005f8 <__aeabi_dmul>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f7f9 fdb7 	bl	800028c <__adddf3>
 800671e:	4604      	mov	r4, r0
 8006720:	460d      	mov	r5, r1
 8006722:	f7fa fa19 	bl	8000b58 <__aeabi_d2iz>
 8006726:	2200      	movs	r2, #0
 8006728:	4607      	mov	r7, r0
 800672a:	2300      	movs	r3, #0
 800672c:	4620      	mov	r0, r4
 800672e:	4629      	mov	r1, r5
 8006730:	f7fa f9d4 	bl	8000adc <__aeabi_dcmplt>
 8006734:	b140      	cbz	r0, 8006748 <_dtoa_r+0x168>
 8006736:	4638      	mov	r0, r7
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_i2d>
 800673c:	4622      	mov	r2, r4
 800673e:	462b      	mov	r3, r5
 8006740:	f7fa f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006744:	b900      	cbnz	r0, 8006748 <_dtoa_r+0x168>
 8006746:	3f01      	subs	r7, #1
 8006748:	2f16      	cmp	r7, #22
 800674a:	d852      	bhi.n	80067f2 <_dtoa_r+0x212>
 800674c:	4b5d      	ldr	r3, [pc, #372]	@ (80068c4 <_dtoa_r+0x2e4>)
 800674e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800675a:	f7fa f9bf 	bl	8000adc <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	d049      	beq.n	80067f6 <_dtoa_r+0x216>
 8006762:	3f01      	subs	r7, #1
 8006764:	2300      	movs	r3, #0
 8006766:	9310      	str	r3, [sp, #64]	@ 0x40
 8006768:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800676a:	1b9b      	subs	r3, r3, r6
 800676c:	1e5a      	subs	r2, r3, #1
 800676e:	bf45      	ittet	mi
 8006770:	f1c3 0301 	rsbmi	r3, r3, #1
 8006774:	9300      	strmi	r3, [sp, #0]
 8006776:	2300      	movpl	r3, #0
 8006778:	2300      	movmi	r3, #0
 800677a:	9206      	str	r2, [sp, #24]
 800677c:	bf54      	ite	pl
 800677e:	9300      	strpl	r3, [sp, #0]
 8006780:	9306      	strmi	r3, [sp, #24]
 8006782:	2f00      	cmp	r7, #0
 8006784:	db39      	blt.n	80067fa <_dtoa_r+0x21a>
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	970d      	str	r7, [sp, #52]	@ 0x34
 800678a:	443b      	add	r3, r7
 800678c:	9306      	str	r3, [sp, #24]
 800678e:	2300      	movs	r3, #0
 8006790:	9308      	str	r3, [sp, #32]
 8006792:	9b07      	ldr	r3, [sp, #28]
 8006794:	2b09      	cmp	r3, #9
 8006796:	d863      	bhi.n	8006860 <_dtoa_r+0x280>
 8006798:	2b05      	cmp	r3, #5
 800679a:	bfc4      	itt	gt
 800679c:	3b04      	subgt	r3, #4
 800679e:	9307      	strgt	r3, [sp, #28]
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	f1a3 0302 	sub.w	r3, r3, #2
 80067a6:	bfcc      	ite	gt
 80067a8:	2400      	movgt	r4, #0
 80067aa:	2401      	movle	r4, #1
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d863      	bhi.n	8006878 <_dtoa_r+0x298>
 80067b0:	e8df f003 	tbb	[pc, r3]
 80067b4:	2b375452 	.word	0x2b375452
 80067b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80067bc:	441e      	add	r6, r3
 80067be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	bfc1      	itttt	gt
 80067c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80067ca:	409f      	lslgt	r7, r3
 80067cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80067d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80067d4:	bfd6      	itet	le
 80067d6:	f1c3 0320 	rsble	r3, r3, #32
 80067da:	ea47 0003 	orrgt.w	r0, r7, r3
 80067de:	fa04 f003 	lslle.w	r0, r4, r3
 80067e2:	f7f9 fe8f 	bl	8000504 <__aeabi_ui2d>
 80067e6:	2201      	movs	r2, #1
 80067e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80067ec:	3e01      	subs	r6, #1
 80067ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80067f0:	e776      	b.n	80066e0 <_dtoa_r+0x100>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7b7      	b.n	8006766 <_dtoa_r+0x186>
 80067f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80067f8:	e7b6      	b.n	8006768 <_dtoa_r+0x188>
 80067fa:	9b00      	ldr	r3, [sp, #0]
 80067fc:	1bdb      	subs	r3, r3, r7
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	427b      	negs	r3, r7
 8006802:	9308      	str	r3, [sp, #32]
 8006804:	2300      	movs	r3, #0
 8006806:	930d      	str	r3, [sp, #52]	@ 0x34
 8006808:	e7c3      	b.n	8006792 <_dtoa_r+0x1b2>
 800680a:	2301      	movs	r3, #1
 800680c:	9309      	str	r3, [sp, #36]	@ 0x24
 800680e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006810:	eb07 0b03 	add.w	fp, r7, r3
 8006814:	f10b 0301 	add.w	r3, fp, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	9303      	str	r3, [sp, #12]
 800681c:	bfb8      	it	lt
 800681e:	2301      	movlt	r3, #1
 8006820:	e006      	b.n	8006830 <_dtoa_r+0x250>
 8006822:	2301      	movs	r3, #1
 8006824:	9309      	str	r3, [sp, #36]	@ 0x24
 8006826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006828:	2b00      	cmp	r3, #0
 800682a:	dd28      	ble.n	800687e <_dtoa_r+0x29e>
 800682c:	469b      	mov	fp, r3
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006834:	2100      	movs	r1, #0
 8006836:	2204      	movs	r2, #4
 8006838:	f102 0514 	add.w	r5, r2, #20
 800683c:	429d      	cmp	r5, r3
 800683e:	d926      	bls.n	800688e <_dtoa_r+0x2ae>
 8006840:	6041      	str	r1, [r0, #4]
 8006842:	4648      	mov	r0, r9
 8006844:	f000 fd9c 	bl	8007380 <_Balloc>
 8006848:	4682      	mov	sl, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	d142      	bne.n	80068d4 <_dtoa_r+0x2f4>
 800684e:	4b1e      	ldr	r3, [pc, #120]	@ (80068c8 <_dtoa_r+0x2e8>)
 8006850:	4602      	mov	r2, r0
 8006852:	f240 11af 	movw	r1, #431	@ 0x1af
 8006856:	e6da      	b.n	800660e <_dtoa_r+0x2e>
 8006858:	2300      	movs	r3, #0
 800685a:	e7e3      	b.n	8006824 <_dtoa_r+0x244>
 800685c:	2300      	movs	r3, #0
 800685e:	e7d5      	b.n	800680c <_dtoa_r+0x22c>
 8006860:	2401      	movs	r4, #1
 8006862:	2300      	movs	r3, #0
 8006864:	9307      	str	r3, [sp, #28]
 8006866:	9409      	str	r4, [sp, #36]	@ 0x24
 8006868:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800686c:	2200      	movs	r2, #0
 800686e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006872:	2312      	movs	r3, #18
 8006874:	920c      	str	r2, [sp, #48]	@ 0x30
 8006876:	e7db      	b.n	8006830 <_dtoa_r+0x250>
 8006878:	2301      	movs	r3, #1
 800687a:	9309      	str	r3, [sp, #36]	@ 0x24
 800687c:	e7f4      	b.n	8006868 <_dtoa_r+0x288>
 800687e:	f04f 0b01 	mov.w	fp, #1
 8006882:	f8cd b00c 	str.w	fp, [sp, #12]
 8006886:	465b      	mov	r3, fp
 8006888:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800688c:	e7d0      	b.n	8006830 <_dtoa_r+0x250>
 800688e:	3101      	adds	r1, #1
 8006890:	0052      	lsls	r2, r2, #1
 8006892:	e7d1      	b.n	8006838 <_dtoa_r+0x258>
 8006894:	f3af 8000 	nop.w
 8006898:	636f4361 	.word	0x636f4361
 800689c:	3fd287a7 	.word	0x3fd287a7
 80068a0:	8b60c8b3 	.word	0x8b60c8b3
 80068a4:	3fc68a28 	.word	0x3fc68a28
 80068a8:	509f79fb 	.word	0x509f79fb
 80068ac:	3fd34413 	.word	0x3fd34413
 80068b0:	08009fca 	.word	0x08009fca
 80068b4:	08009fe1 	.word	0x08009fe1
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	08009f95 	.word	0x08009f95
 80068c0:	3ff80000 	.word	0x3ff80000
 80068c4:	0800a190 	.word	0x0800a190
 80068c8:	0800a039 	.word	0x0800a039
 80068cc:	08009fc6 	.word	0x08009fc6
 80068d0:	08009f94 	.word	0x08009f94
 80068d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068d8:	6018      	str	r0, [r3, #0]
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	2b0e      	cmp	r3, #14
 80068de:	f200 80a1 	bhi.w	8006a24 <_dtoa_r+0x444>
 80068e2:	2c00      	cmp	r4, #0
 80068e4:	f000 809e 	beq.w	8006a24 <_dtoa_r+0x444>
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	dd33      	ble.n	8006954 <_dtoa_r+0x374>
 80068ec:	4b9c      	ldr	r3, [pc, #624]	@ (8006b60 <_dtoa_r+0x580>)
 80068ee:	f007 020f 	and.w	r2, r7, #15
 80068f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068f6:	ed93 7b00 	vldr	d7, [r3]
 80068fa:	05f8      	lsls	r0, r7, #23
 80068fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006900:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006904:	d516      	bpl.n	8006934 <_dtoa_r+0x354>
 8006906:	4b97      	ldr	r3, [pc, #604]	@ (8006b64 <_dtoa_r+0x584>)
 8006908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800690c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006910:	f7f9 ff9c 	bl	800084c <__aeabi_ddiv>
 8006914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006918:	f004 040f 	and.w	r4, r4, #15
 800691c:	2603      	movs	r6, #3
 800691e:	4d91      	ldr	r5, [pc, #580]	@ (8006b64 <_dtoa_r+0x584>)
 8006920:	b954      	cbnz	r4, 8006938 <_dtoa_r+0x358>
 8006922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800692a:	f7f9 ff8f 	bl	800084c <__aeabi_ddiv>
 800692e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006932:	e028      	b.n	8006986 <_dtoa_r+0x3a6>
 8006934:	2602      	movs	r6, #2
 8006936:	e7f2      	b.n	800691e <_dtoa_r+0x33e>
 8006938:	07e1      	lsls	r1, r4, #31
 800693a:	d508      	bpl.n	800694e <_dtoa_r+0x36e>
 800693c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006944:	f7f9 fe58 	bl	80005f8 <__aeabi_dmul>
 8006948:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800694c:	3601      	adds	r6, #1
 800694e:	1064      	asrs	r4, r4, #1
 8006950:	3508      	adds	r5, #8
 8006952:	e7e5      	b.n	8006920 <_dtoa_r+0x340>
 8006954:	f000 80af 	beq.w	8006ab6 <_dtoa_r+0x4d6>
 8006958:	427c      	negs	r4, r7
 800695a:	4b81      	ldr	r3, [pc, #516]	@ (8006b60 <_dtoa_r+0x580>)
 800695c:	4d81      	ldr	r5, [pc, #516]	@ (8006b64 <_dtoa_r+0x584>)
 800695e:	f004 020f 	and.w	r2, r4, #15
 8006962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800696e:	f7f9 fe43 	bl	80005f8 <__aeabi_dmul>
 8006972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006976:	1124      	asrs	r4, r4, #4
 8006978:	2300      	movs	r3, #0
 800697a:	2602      	movs	r6, #2
 800697c:	2c00      	cmp	r4, #0
 800697e:	f040 808f 	bne.w	8006aa0 <_dtoa_r+0x4c0>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1d3      	bne.n	800692e <_dtoa_r+0x34e>
 8006986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006988:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8094 	beq.w	8006aba <_dtoa_r+0x4da>
 8006992:	4b75      	ldr	r3, [pc, #468]	@ (8006b68 <_dtoa_r+0x588>)
 8006994:	2200      	movs	r2, #0
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f7fa f89f 	bl	8000adc <__aeabi_dcmplt>
 800699e:	2800      	cmp	r0, #0
 80069a0:	f000 808b 	beq.w	8006aba <_dtoa_r+0x4da>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 8087 	beq.w	8006aba <_dtoa_r+0x4da>
 80069ac:	f1bb 0f00 	cmp.w	fp, #0
 80069b0:	dd34      	ble.n	8006a1c <_dtoa_r+0x43c>
 80069b2:	4620      	mov	r0, r4
 80069b4:	4b6d      	ldr	r3, [pc, #436]	@ (8006b6c <_dtoa_r+0x58c>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7f9 fe1d 	bl	80005f8 <__aeabi_dmul>
 80069be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069c2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80069c6:	3601      	adds	r6, #1
 80069c8:	465c      	mov	r4, fp
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7f9 fdaa 	bl	8000524 <__aeabi_i2d>
 80069d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	4b65      	ldr	r3, [pc, #404]	@ (8006b70 <_dtoa_r+0x590>)
 80069da:	2200      	movs	r2, #0
 80069dc:	f7f9 fc56 	bl	800028c <__adddf3>
 80069e0:	4605      	mov	r5, r0
 80069e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80069e6:	2c00      	cmp	r4, #0
 80069e8:	d16a      	bne.n	8006ac0 <_dtoa_r+0x4e0>
 80069ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ee:	4b61      	ldr	r3, [pc, #388]	@ (8006b74 <_dtoa_r+0x594>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	f7f9 fc49 	bl	8000288 <__aeabi_dsub>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069fe:	462a      	mov	r2, r5
 8006a00:	4633      	mov	r3, r6
 8006a02:	f7fa f889 	bl	8000b18 <__aeabi_dcmpgt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f040 8298 	bne.w	8006f3c <_dtoa_r+0x95c>
 8006a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a10:	462a      	mov	r2, r5
 8006a12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a16:	f7fa f861 	bl	8000adc <__aeabi_dcmplt>
 8006a1a:	bb38      	cbnz	r0, 8006a6c <_dtoa_r+0x48c>
 8006a1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006a20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f2c0 8157 	blt.w	8006cda <_dtoa_r+0x6fa>
 8006a2c:	2f0e      	cmp	r7, #14
 8006a2e:	f300 8154 	bgt.w	8006cda <_dtoa_r+0x6fa>
 8006a32:	4b4b      	ldr	r3, [pc, #300]	@ (8006b60 <_dtoa_r+0x580>)
 8006a34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a38:	ed93 7b00 	vldr	d7, [r3]
 8006a3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	ed8d 7b00 	vstr	d7, [sp]
 8006a44:	f280 80e5 	bge.w	8006c12 <_dtoa_r+0x632>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f300 80e1 	bgt.w	8006c12 <_dtoa_r+0x632>
 8006a50:	d10c      	bne.n	8006a6c <_dtoa_r+0x48c>
 8006a52:	4b48      	ldr	r3, [pc, #288]	@ (8006b74 <_dtoa_r+0x594>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	ec51 0b17 	vmov	r0, r1, d7
 8006a5a:	f7f9 fdcd 	bl	80005f8 <__aeabi_dmul>
 8006a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a62:	f7fa f84f 	bl	8000b04 <__aeabi_dcmpge>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f000 8266 	beq.w	8006f38 <_dtoa_r+0x958>
 8006a6c:	2400      	movs	r4, #0
 8006a6e:	4625      	mov	r5, r4
 8006a70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a72:	4656      	mov	r6, sl
 8006a74:	ea6f 0803 	mvn.w	r8, r3
 8006a78:	2700      	movs	r7, #0
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4648      	mov	r0, r9
 8006a7e:	f000 fcbf 	bl	8007400 <_Bfree>
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	f000 80bd 	beq.w	8006c02 <_dtoa_r+0x622>
 8006a88:	b12f      	cbz	r7, 8006a96 <_dtoa_r+0x4b6>
 8006a8a:	42af      	cmp	r7, r5
 8006a8c:	d003      	beq.n	8006a96 <_dtoa_r+0x4b6>
 8006a8e:	4639      	mov	r1, r7
 8006a90:	4648      	mov	r0, r9
 8006a92:	f000 fcb5 	bl	8007400 <_Bfree>
 8006a96:	4629      	mov	r1, r5
 8006a98:	4648      	mov	r0, r9
 8006a9a:	f000 fcb1 	bl	8007400 <_Bfree>
 8006a9e:	e0b0      	b.n	8006c02 <_dtoa_r+0x622>
 8006aa0:	07e2      	lsls	r2, r4, #31
 8006aa2:	d505      	bpl.n	8006ab0 <_dtoa_r+0x4d0>
 8006aa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006aa8:	f7f9 fda6 	bl	80005f8 <__aeabi_dmul>
 8006aac:	3601      	adds	r6, #1
 8006aae:	2301      	movs	r3, #1
 8006ab0:	1064      	asrs	r4, r4, #1
 8006ab2:	3508      	adds	r5, #8
 8006ab4:	e762      	b.n	800697c <_dtoa_r+0x39c>
 8006ab6:	2602      	movs	r6, #2
 8006ab8:	e765      	b.n	8006986 <_dtoa_r+0x3a6>
 8006aba:	9c03      	ldr	r4, [sp, #12]
 8006abc:	46b8      	mov	r8, r7
 8006abe:	e784      	b.n	80069ca <_dtoa_r+0x3ea>
 8006ac0:	4b27      	ldr	r3, [pc, #156]	@ (8006b60 <_dtoa_r+0x580>)
 8006ac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ac8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006acc:	4454      	add	r4, sl
 8006ace:	2900      	cmp	r1, #0
 8006ad0:	d054      	beq.n	8006b7c <_dtoa_r+0x59c>
 8006ad2:	4929      	ldr	r1, [pc, #164]	@ (8006b78 <_dtoa_r+0x598>)
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f7f9 feb9 	bl	800084c <__aeabi_ddiv>
 8006ada:	4633      	mov	r3, r6
 8006adc:	462a      	mov	r2, r5
 8006ade:	f7f9 fbd3 	bl	8000288 <__aeabi_dsub>
 8006ae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ae6:	4656      	mov	r6, sl
 8006ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aec:	f7fa f834 	bl	8000b58 <__aeabi_d2iz>
 8006af0:	4605      	mov	r5, r0
 8006af2:	f7f9 fd17 	bl	8000524 <__aeabi_i2d>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006afe:	f7f9 fbc3 	bl	8000288 <__aeabi_dsub>
 8006b02:	3530      	adds	r5, #48	@ 0x30
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b0c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b14:	f7f9 ffe2 	bl	8000adc <__aeabi_dcmplt>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d172      	bne.n	8006c02 <_dtoa_r+0x622>
 8006b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b20:	4911      	ldr	r1, [pc, #68]	@ (8006b68 <_dtoa_r+0x588>)
 8006b22:	2000      	movs	r0, #0
 8006b24:	f7f9 fbb0 	bl	8000288 <__aeabi_dsub>
 8006b28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b2c:	f7f9 ffd6 	bl	8000adc <__aeabi_dcmplt>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f040 80b4 	bne.w	8006c9e <_dtoa_r+0x6be>
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	f43f af70 	beq.w	8006a1c <_dtoa_r+0x43c>
 8006b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b40:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <_dtoa_r+0x58c>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	4b08      	ldr	r3, [pc, #32]	@ (8006b6c <_dtoa_r+0x58c>)
 8006b4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b4e:	2200      	movs	r2, #0
 8006b50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b5c:	e7c4      	b.n	8006ae8 <_dtoa_r+0x508>
 8006b5e:	bf00      	nop
 8006b60:	0800a190 	.word	0x0800a190
 8006b64:	0800a168 	.word	0x0800a168
 8006b68:	3ff00000 	.word	0x3ff00000
 8006b6c:	40240000 	.word	0x40240000
 8006b70:	401c0000 	.word	0x401c0000
 8006b74:	40140000 	.word	0x40140000
 8006b78:	3fe00000 	.word	0x3fe00000
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7f9 fd3a 	bl	80005f8 <__aeabi_dmul>
 8006b84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b8a:	4656      	mov	r6, sl
 8006b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b90:	f7f9 ffe2 	bl	8000b58 <__aeabi_d2iz>
 8006b94:	4605      	mov	r5, r0
 8006b96:	f7f9 fcc5 	bl	8000524 <__aeabi_i2d>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba2:	f7f9 fb71 	bl	8000288 <__aeabi_dsub>
 8006ba6:	3530      	adds	r5, #48	@ 0x30
 8006ba8:	f806 5b01 	strb.w	r5, [r6], #1
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	42a6      	cmp	r6, r4
 8006bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	d124      	bne.n	8006c06 <_dtoa_r+0x626>
 8006bbc:	4baf      	ldr	r3, [pc, #700]	@ (8006e7c <_dtoa_r+0x89c>)
 8006bbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006bc2:	f7f9 fb63 	bl	800028c <__adddf3>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bce:	f7f9 ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d163      	bne.n	8006c9e <_dtoa_r+0x6be>
 8006bd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006bda:	49a8      	ldr	r1, [pc, #672]	@ (8006e7c <_dtoa_r+0x89c>)
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f7f9 fb53 	bl	8000288 <__aeabi_dsub>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bea:	f7f9 ff77 	bl	8000adc <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f af14 	beq.w	8006a1c <_dtoa_r+0x43c>
 8006bf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006bf6:	1e73      	subs	r3, r6, #1
 8006bf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bfe:	2b30      	cmp	r3, #48	@ 0x30
 8006c00:	d0f8      	beq.n	8006bf4 <_dtoa_r+0x614>
 8006c02:	4647      	mov	r7, r8
 8006c04:	e03b      	b.n	8006c7e <_dtoa_r+0x69e>
 8006c06:	4b9e      	ldr	r3, [pc, #632]	@ (8006e80 <_dtoa_r+0x8a0>)
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c10:	e7bc      	b.n	8006b8c <_dtoa_r+0x5ac>
 8006c12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006c16:	4656      	mov	r6, sl
 8006c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 fe14 	bl	800084c <__aeabi_ddiv>
 8006c24:	f7f9 ff98 	bl	8000b58 <__aeabi_d2iz>
 8006c28:	4680      	mov	r8, r0
 8006c2a:	f7f9 fc7b 	bl	8000524 <__aeabi_i2d>
 8006c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c32:	f7f9 fce1 	bl	80005f8 <__aeabi_dmul>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c42:	f7f9 fb21 	bl	8000288 <__aeabi_dsub>
 8006c46:	f806 4b01 	strb.w	r4, [r6], #1
 8006c4a:	9d03      	ldr	r5, [sp, #12]
 8006c4c:	eba6 040a 	sub.w	r4, r6, sl
 8006c50:	42a5      	cmp	r5, r4
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	d133      	bne.n	8006cc0 <_dtoa_r+0x6e0>
 8006c58:	f7f9 fb18 	bl	800028c <__adddf3>
 8006c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	f7f9 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8006c68:	b9c0      	cbnz	r0, 8006c9c <_dtoa_r+0x6bc>
 8006c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c76:	b110      	cbz	r0, 8006c7e <_dtoa_r+0x69e>
 8006c78:	f018 0f01 	tst.w	r8, #1
 8006c7c:	d10e      	bne.n	8006c9c <_dtoa_r+0x6bc>
 8006c7e:	9902      	ldr	r1, [sp, #8]
 8006c80:	4648      	mov	r0, r9
 8006c82:	f000 fbbd 	bl	8007400 <_Bfree>
 8006c86:	2300      	movs	r3, #0
 8006c88:	7033      	strb	r3, [r6, #0]
 8006c8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c8c:	3701      	adds	r7, #1
 8006c8e:	601f      	str	r7, [r3, #0]
 8006c90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 824b 	beq.w	800712e <_dtoa_r+0xb4e>
 8006c98:	601e      	str	r6, [r3, #0]
 8006c9a:	e248      	b.n	800712e <_dtoa_r+0xb4e>
 8006c9c:	46b8      	mov	r8, r7
 8006c9e:	4633      	mov	r3, r6
 8006ca0:	461e      	mov	r6, r3
 8006ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca6:	2a39      	cmp	r2, #57	@ 0x39
 8006ca8:	d106      	bne.n	8006cb8 <_dtoa_r+0x6d8>
 8006caa:	459a      	cmp	sl, r3
 8006cac:	d1f8      	bne.n	8006ca0 <_dtoa_r+0x6c0>
 8006cae:	2230      	movs	r2, #48	@ 0x30
 8006cb0:	f108 0801 	add.w	r8, r8, #1
 8006cb4:	f88a 2000 	strb.w	r2, [sl]
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	3201      	adds	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e7a0      	b.n	8006c02 <_dtoa_r+0x622>
 8006cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e80 <_dtoa_r+0x8a0>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f7f9 fc98 	bl	80005f8 <__aeabi_dmul>
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4604      	mov	r4, r0
 8006cce:	460d      	mov	r5, r1
 8006cd0:	f7f9 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d09f      	beq.n	8006c18 <_dtoa_r+0x638>
 8006cd8:	e7d1      	b.n	8006c7e <_dtoa_r+0x69e>
 8006cda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cdc:	2a00      	cmp	r2, #0
 8006cde:	f000 80ea 	beq.w	8006eb6 <_dtoa_r+0x8d6>
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	2a01      	cmp	r2, #1
 8006ce6:	f300 80cd 	bgt.w	8006e84 <_dtoa_r+0x8a4>
 8006cea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	f000 80c1 	beq.w	8006e74 <_dtoa_r+0x894>
 8006cf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006cf6:	9c08      	ldr	r4, [sp, #32]
 8006cf8:	9e00      	ldr	r6, [sp, #0]
 8006cfa:	9a00      	ldr	r2, [sp, #0]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	9200      	str	r2, [sp, #0]
 8006d00:	9a06      	ldr	r2, [sp, #24]
 8006d02:	2101      	movs	r1, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	4648      	mov	r0, r9
 8006d08:	9206      	str	r2, [sp, #24]
 8006d0a:	f000 fc77 	bl	80075fc <__i2b>
 8006d0e:	4605      	mov	r5, r0
 8006d10:	b166      	cbz	r6, 8006d2c <_dtoa_r+0x74c>
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dd09      	ble.n	8006d2c <_dtoa_r+0x74c>
 8006d18:	42b3      	cmp	r3, r6
 8006d1a:	9a00      	ldr	r2, [sp, #0]
 8006d1c:	bfa8      	it	ge
 8006d1e:	4633      	movge	r3, r6
 8006d20:	1ad2      	subs	r2, r2, r3
 8006d22:	9200      	str	r2, [sp, #0]
 8006d24:	9a06      	ldr	r2, [sp, #24]
 8006d26:	1af6      	subs	r6, r6, r3
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	9306      	str	r3, [sp, #24]
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	b30b      	cbz	r3, 8006d74 <_dtoa_r+0x794>
 8006d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80c6 	beq.w	8006ec4 <_dtoa_r+0x8e4>
 8006d38:	2c00      	cmp	r4, #0
 8006d3a:	f000 80c0 	beq.w	8006ebe <_dtoa_r+0x8de>
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4622      	mov	r2, r4
 8006d42:	4648      	mov	r0, r9
 8006d44:	f000 fd12 	bl	800776c <__pow5mult>
 8006d48:	9a02      	ldr	r2, [sp, #8]
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	4648      	mov	r0, r9
 8006d50:	f000 fc6a 	bl	8007628 <__multiply>
 8006d54:	9902      	ldr	r1, [sp, #8]
 8006d56:	4680      	mov	r8, r0
 8006d58:	4648      	mov	r0, r9
 8006d5a:	f000 fb51 	bl	8007400 <_Bfree>
 8006d5e:	9b08      	ldr	r3, [sp, #32]
 8006d60:	1b1b      	subs	r3, r3, r4
 8006d62:	9308      	str	r3, [sp, #32]
 8006d64:	f000 80b1 	beq.w	8006eca <_dtoa_r+0x8ea>
 8006d68:	9a08      	ldr	r2, [sp, #32]
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f000 fcfd 	bl	800776c <__pow5mult>
 8006d72:	9002      	str	r0, [sp, #8]
 8006d74:	2101      	movs	r1, #1
 8006d76:	4648      	mov	r0, r9
 8006d78:	f000 fc40 	bl	80075fc <__i2b>
 8006d7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d7e:	4604      	mov	r4, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 81d8 	beq.w	8007136 <_dtoa_r+0xb56>
 8006d86:	461a      	mov	r2, r3
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	f000 fcee 	bl	800776c <__pow5mult>
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	4604      	mov	r4, r0
 8006d96:	f300 809f 	bgt.w	8006ed8 <_dtoa_r+0x8f8>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 8097 	bne.w	8006ed0 <_dtoa_r+0x8f0>
 8006da2:	9b05      	ldr	r3, [sp, #20]
 8006da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 8093 	bne.w	8006ed4 <_dtoa_r+0x8f4>
 8006dae:	9b05      	ldr	r3, [sp, #20]
 8006db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006db4:	0d1b      	lsrs	r3, r3, #20
 8006db6:	051b      	lsls	r3, r3, #20
 8006db8:	b133      	cbz	r3, 8006dc8 <_dtoa_r+0x7e8>
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	9b06      	ldr	r3, [sp, #24]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	9306      	str	r3, [sp, #24]
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	9308      	str	r3, [sp, #32]
 8006dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 81b8 	beq.w	8007142 <_dtoa_r+0xb62>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dd8:	6918      	ldr	r0, [r3, #16]
 8006dda:	f000 fbc3 	bl	8007564 <__hi0bits>
 8006dde:	f1c0 0020 	rsb	r0, r0, #32
 8006de2:	9b06      	ldr	r3, [sp, #24]
 8006de4:	4418      	add	r0, r3
 8006de6:	f010 001f 	ands.w	r0, r0, #31
 8006dea:	f000 8082 	beq.w	8006ef2 <_dtoa_r+0x912>
 8006dee:	f1c0 0320 	rsb	r3, r0, #32
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	dd73      	ble.n	8006ede <_dtoa_r+0x8fe>
 8006df6:	9b00      	ldr	r3, [sp, #0]
 8006df8:	f1c0 001c 	rsb	r0, r0, #28
 8006dfc:	4403      	add	r3, r0
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	9b06      	ldr	r3, [sp, #24]
 8006e02:	4403      	add	r3, r0
 8006e04:	4406      	add	r6, r0
 8006e06:	9306      	str	r3, [sp, #24]
 8006e08:	9b00      	ldr	r3, [sp, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dd05      	ble.n	8006e1a <_dtoa_r+0x83a>
 8006e0e:	9902      	ldr	r1, [sp, #8]
 8006e10:	461a      	mov	r2, r3
 8006e12:	4648      	mov	r0, r9
 8006e14:	f000 fd04 	bl	8007820 <__lshift>
 8006e18:	9002      	str	r0, [sp, #8]
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dd05      	ble.n	8006e2c <_dtoa_r+0x84c>
 8006e20:	4621      	mov	r1, r4
 8006e22:	461a      	mov	r2, r3
 8006e24:	4648      	mov	r0, r9
 8006e26:	f000 fcfb 	bl	8007820 <__lshift>
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d061      	beq.n	8006ef6 <_dtoa_r+0x916>
 8006e32:	9802      	ldr	r0, [sp, #8]
 8006e34:	4621      	mov	r1, r4
 8006e36:	f000 fd5f 	bl	80078f8 <__mcmp>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	da5b      	bge.n	8006ef6 <_dtoa_r+0x916>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9902      	ldr	r1, [sp, #8]
 8006e42:	220a      	movs	r2, #10
 8006e44:	4648      	mov	r0, r9
 8006e46:	f000 fafd 	bl	8007444 <__multadd>
 8006e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4c:	9002      	str	r0, [sp, #8]
 8006e4e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8177 	beq.w	8007146 <_dtoa_r+0xb66>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	220a      	movs	r2, #10
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f000 faf0 	bl	8007444 <__multadd>
 8006e64:	f1bb 0f00 	cmp.w	fp, #0
 8006e68:	4605      	mov	r5, r0
 8006e6a:	dc6f      	bgt.n	8006f4c <_dtoa_r+0x96c>
 8006e6c:	9b07      	ldr	r3, [sp, #28]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	dc49      	bgt.n	8006f06 <_dtoa_r+0x926>
 8006e72:	e06b      	b.n	8006f4c <_dtoa_r+0x96c>
 8006e74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e7a:	e73c      	b.n	8006cf6 <_dtoa_r+0x716>
 8006e7c:	3fe00000 	.word	0x3fe00000
 8006e80:	40240000 	.word	0x40240000
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	1e5c      	subs	r4, r3, #1
 8006e88:	9b08      	ldr	r3, [sp, #32]
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	db09      	blt.n	8006ea2 <_dtoa_r+0x8c2>
 8006e8e:	1b1c      	subs	r4, r3, r4
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f6bf af30 	bge.w	8006cf8 <_dtoa_r+0x718>
 8006e98:	9b00      	ldr	r3, [sp, #0]
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	1a9e      	subs	r6, r3, r2
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e72b      	b.n	8006cfa <_dtoa_r+0x71a>
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ea6:	9408      	str	r4, [sp, #32]
 8006ea8:	1ae3      	subs	r3, r4, r3
 8006eaa:	441a      	add	r2, r3
 8006eac:	9e00      	ldr	r6, [sp, #0]
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8006eb2:	2400      	movs	r4, #0
 8006eb4:	e721      	b.n	8006cfa <_dtoa_r+0x71a>
 8006eb6:	9c08      	ldr	r4, [sp, #32]
 8006eb8:	9e00      	ldr	r6, [sp, #0]
 8006eba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006ebc:	e728      	b.n	8006d10 <_dtoa_r+0x730>
 8006ebe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006ec2:	e751      	b.n	8006d68 <_dtoa_r+0x788>
 8006ec4:	9a08      	ldr	r2, [sp, #32]
 8006ec6:	9902      	ldr	r1, [sp, #8]
 8006ec8:	e750      	b.n	8006d6c <_dtoa_r+0x78c>
 8006eca:	f8cd 8008 	str.w	r8, [sp, #8]
 8006ece:	e751      	b.n	8006d74 <_dtoa_r+0x794>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e779      	b.n	8006dc8 <_dtoa_r+0x7e8>
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	e777      	b.n	8006dc8 <_dtoa_r+0x7e8>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9308      	str	r3, [sp, #32]
 8006edc:	e779      	b.n	8006dd2 <_dtoa_r+0x7f2>
 8006ede:	d093      	beq.n	8006e08 <_dtoa_r+0x828>
 8006ee0:	9a00      	ldr	r2, [sp, #0]
 8006ee2:	331c      	adds	r3, #28
 8006ee4:	441a      	add	r2, r3
 8006ee6:	9200      	str	r2, [sp, #0]
 8006ee8:	9a06      	ldr	r2, [sp, #24]
 8006eea:	441a      	add	r2, r3
 8006eec:	441e      	add	r6, r3
 8006eee:	9206      	str	r2, [sp, #24]
 8006ef0:	e78a      	b.n	8006e08 <_dtoa_r+0x828>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	e7f4      	b.n	8006ee0 <_dtoa_r+0x900>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	46b8      	mov	r8, r7
 8006efc:	dc20      	bgt.n	8006f40 <_dtoa_r+0x960>
 8006efe:	469b      	mov	fp, r3
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	dd1e      	ble.n	8006f44 <_dtoa_r+0x964>
 8006f06:	f1bb 0f00 	cmp.w	fp, #0
 8006f0a:	f47f adb1 	bne.w	8006a70 <_dtoa_r+0x490>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	465b      	mov	r3, fp
 8006f12:	2205      	movs	r2, #5
 8006f14:	4648      	mov	r0, r9
 8006f16:	f000 fa95 	bl	8007444 <__multadd>
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	9802      	ldr	r0, [sp, #8]
 8006f20:	f000 fcea 	bl	80078f8 <__mcmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f77f ada3 	ble.w	8006a70 <_dtoa_r+0x490>
 8006f2a:	4656      	mov	r6, sl
 8006f2c:	2331      	movs	r3, #49	@ 0x31
 8006f2e:	f806 3b01 	strb.w	r3, [r6], #1
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	e59f      	b.n	8006a78 <_dtoa_r+0x498>
 8006f38:	9c03      	ldr	r4, [sp, #12]
 8006f3a:	46b8      	mov	r8, r7
 8006f3c:	4625      	mov	r5, r4
 8006f3e:	e7f4      	b.n	8006f2a <_dtoa_r+0x94a>
 8006f40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 8101 	beq.w	800714e <_dtoa_r+0xb6e>
 8006f4c:	2e00      	cmp	r6, #0
 8006f4e:	dd05      	ble.n	8006f5c <_dtoa_r+0x97c>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4632      	mov	r2, r6
 8006f54:	4648      	mov	r0, r9
 8006f56:	f000 fc63 	bl	8007820 <__lshift>
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	9b08      	ldr	r3, [sp, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d05c      	beq.n	800701c <_dtoa_r+0xa3c>
 8006f62:	6869      	ldr	r1, [r5, #4]
 8006f64:	4648      	mov	r0, r9
 8006f66:	f000 fa0b 	bl	8007380 <_Balloc>
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	b928      	cbnz	r0, 8006f7a <_dtoa_r+0x99a>
 8006f6e:	4b82      	ldr	r3, [pc, #520]	@ (8007178 <_dtoa_r+0xb98>)
 8006f70:	4602      	mov	r2, r0
 8006f72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f76:	f7ff bb4a 	b.w	800660e <_dtoa_r+0x2e>
 8006f7a:	692a      	ldr	r2, [r5, #16]
 8006f7c:	3202      	adds	r2, #2
 8006f7e:	0092      	lsls	r2, r2, #2
 8006f80:	f105 010c 	add.w	r1, r5, #12
 8006f84:	300c      	adds	r0, #12
 8006f86:	f001 ff69 	bl	8008e5c <memcpy>
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4648      	mov	r0, r9
 8006f90:	f000 fc46 	bl	8007820 <__lshift>
 8006f94:	f10a 0301 	add.w	r3, sl, #1
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	eb0a 030b 	add.w	r3, sl, fp
 8006f9e:	9308      	str	r3, [sp, #32]
 8006fa0:	9b04      	ldr	r3, [sp, #16]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	462f      	mov	r7, r5
 8006fa8:	9306      	str	r3, [sp, #24]
 8006faa:	4605      	mov	r5, r0
 8006fac:	9b00      	ldr	r3, [sp, #0]
 8006fae:	9802      	ldr	r0, [sp, #8]
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006fb6:	f7ff fa8b 	bl	80064d0 <quorem>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	3330      	adds	r3, #48	@ 0x30
 8006fbe:	9003      	str	r0, [sp, #12]
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	9802      	ldr	r0, [sp, #8]
 8006fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc6:	f000 fc97 	bl	80078f8 <__mcmp>
 8006fca:	462a      	mov	r2, r5
 8006fcc:	9004      	str	r0, [sp, #16]
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4648      	mov	r0, r9
 8006fd2:	f000 fcad 	bl	8007930 <__mdiff>
 8006fd6:	68c2      	ldr	r2, [r0, #12]
 8006fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fda:	4606      	mov	r6, r0
 8006fdc:	bb02      	cbnz	r2, 8007020 <_dtoa_r+0xa40>
 8006fde:	4601      	mov	r1, r0
 8006fe0:	9802      	ldr	r0, [sp, #8]
 8006fe2:	f000 fc89 	bl	80078f8 <__mcmp>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4631      	mov	r1, r6
 8006fec:	4648      	mov	r0, r9
 8006fee:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff2:	f000 fa05 	bl	8007400 <_Bfree>
 8006ff6:	9b07      	ldr	r3, [sp, #28]
 8006ff8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ffa:	9e00      	ldr	r6, [sp, #0]
 8006ffc:	ea42 0103 	orr.w	r1, r2, r3
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	4319      	orrs	r1, r3
 8007004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007006:	d10d      	bne.n	8007024 <_dtoa_r+0xa44>
 8007008:	2b39      	cmp	r3, #57	@ 0x39
 800700a:	d027      	beq.n	800705c <_dtoa_r+0xa7c>
 800700c:	9a04      	ldr	r2, [sp, #16]
 800700e:	2a00      	cmp	r2, #0
 8007010:	dd01      	ble.n	8007016 <_dtoa_r+0xa36>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	3331      	adds	r3, #49	@ 0x31
 8007016:	f88b 3000 	strb.w	r3, [fp]
 800701a:	e52e      	b.n	8006a7a <_dtoa_r+0x49a>
 800701c:	4628      	mov	r0, r5
 800701e:	e7b9      	b.n	8006f94 <_dtoa_r+0x9b4>
 8007020:	2201      	movs	r2, #1
 8007022:	e7e2      	b.n	8006fea <_dtoa_r+0xa0a>
 8007024:	9904      	ldr	r1, [sp, #16]
 8007026:	2900      	cmp	r1, #0
 8007028:	db04      	blt.n	8007034 <_dtoa_r+0xa54>
 800702a:	9807      	ldr	r0, [sp, #28]
 800702c:	4301      	orrs	r1, r0
 800702e:	9806      	ldr	r0, [sp, #24]
 8007030:	4301      	orrs	r1, r0
 8007032:	d120      	bne.n	8007076 <_dtoa_r+0xa96>
 8007034:	2a00      	cmp	r2, #0
 8007036:	ddee      	ble.n	8007016 <_dtoa_r+0xa36>
 8007038:	9902      	ldr	r1, [sp, #8]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2201      	movs	r2, #1
 800703e:	4648      	mov	r0, r9
 8007040:	f000 fbee 	bl	8007820 <__lshift>
 8007044:	4621      	mov	r1, r4
 8007046:	9002      	str	r0, [sp, #8]
 8007048:	f000 fc56 	bl	80078f8 <__mcmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	9b00      	ldr	r3, [sp, #0]
 8007050:	dc02      	bgt.n	8007058 <_dtoa_r+0xa78>
 8007052:	d1e0      	bne.n	8007016 <_dtoa_r+0xa36>
 8007054:	07da      	lsls	r2, r3, #31
 8007056:	d5de      	bpl.n	8007016 <_dtoa_r+0xa36>
 8007058:	2b39      	cmp	r3, #57	@ 0x39
 800705a:	d1da      	bne.n	8007012 <_dtoa_r+0xa32>
 800705c:	2339      	movs	r3, #57	@ 0x39
 800705e:	f88b 3000 	strb.w	r3, [fp]
 8007062:	4633      	mov	r3, r6
 8007064:	461e      	mov	r6, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800706c:	2a39      	cmp	r2, #57	@ 0x39
 800706e:	d04e      	beq.n	800710e <_dtoa_r+0xb2e>
 8007070:	3201      	adds	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e501      	b.n	8006a7a <_dtoa_r+0x49a>
 8007076:	2a00      	cmp	r2, #0
 8007078:	dd03      	ble.n	8007082 <_dtoa_r+0xaa2>
 800707a:	2b39      	cmp	r3, #57	@ 0x39
 800707c:	d0ee      	beq.n	800705c <_dtoa_r+0xa7c>
 800707e:	3301      	adds	r3, #1
 8007080:	e7c9      	b.n	8007016 <_dtoa_r+0xa36>
 8007082:	9a00      	ldr	r2, [sp, #0]
 8007084:	9908      	ldr	r1, [sp, #32]
 8007086:	f802 3c01 	strb.w	r3, [r2, #-1]
 800708a:	428a      	cmp	r2, r1
 800708c:	d028      	beq.n	80070e0 <_dtoa_r+0xb00>
 800708e:	9902      	ldr	r1, [sp, #8]
 8007090:	2300      	movs	r3, #0
 8007092:	220a      	movs	r2, #10
 8007094:	4648      	mov	r0, r9
 8007096:	f000 f9d5 	bl	8007444 <__multadd>
 800709a:	42af      	cmp	r7, r5
 800709c:	9002      	str	r0, [sp, #8]
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	f04f 020a 	mov.w	r2, #10
 80070a6:	4639      	mov	r1, r7
 80070a8:	4648      	mov	r0, r9
 80070aa:	d107      	bne.n	80070bc <_dtoa_r+0xadc>
 80070ac:	f000 f9ca 	bl	8007444 <__multadd>
 80070b0:	4607      	mov	r7, r0
 80070b2:	4605      	mov	r5, r0
 80070b4:	9b00      	ldr	r3, [sp, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	e777      	b.n	8006fac <_dtoa_r+0x9cc>
 80070bc:	f000 f9c2 	bl	8007444 <__multadd>
 80070c0:	4629      	mov	r1, r5
 80070c2:	4607      	mov	r7, r0
 80070c4:	2300      	movs	r3, #0
 80070c6:	220a      	movs	r2, #10
 80070c8:	4648      	mov	r0, r9
 80070ca:	f000 f9bb 	bl	8007444 <__multadd>
 80070ce:	4605      	mov	r5, r0
 80070d0:	e7f0      	b.n	80070b4 <_dtoa_r+0xad4>
 80070d2:	f1bb 0f00 	cmp.w	fp, #0
 80070d6:	bfcc      	ite	gt
 80070d8:	465e      	movgt	r6, fp
 80070da:	2601      	movle	r6, #1
 80070dc:	4456      	add	r6, sl
 80070de:	2700      	movs	r7, #0
 80070e0:	9902      	ldr	r1, [sp, #8]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2201      	movs	r2, #1
 80070e6:	4648      	mov	r0, r9
 80070e8:	f000 fb9a 	bl	8007820 <__lshift>
 80070ec:	4621      	mov	r1, r4
 80070ee:	9002      	str	r0, [sp, #8]
 80070f0:	f000 fc02 	bl	80078f8 <__mcmp>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	dcb4      	bgt.n	8007062 <_dtoa_r+0xa82>
 80070f8:	d102      	bne.n	8007100 <_dtoa_r+0xb20>
 80070fa:	9b00      	ldr	r3, [sp, #0]
 80070fc:	07db      	lsls	r3, r3, #31
 80070fe:	d4b0      	bmi.n	8007062 <_dtoa_r+0xa82>
 8007100:	4633      	mov	r3, r6
 8007102:	461e      	mov	r6, r3
 8007104:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007108:	2a30      	cmp	r2, #48	@ 0x30
 800710a:	d0fa      	beq.n	8007102 <_dtoa_r+0xb22>
 800710c:	e4b5      	b.n	8006a7a <_dtoa_r+0x49a>
 800710e:	459a      	cmp	sl, r3
 8007110:	d1a8      	bne.n	8007064 <_dtoa_r+0xa84>
 8007112:	2331      	movs	r3, #49	@ 0x31
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	f88a 3000 	strb.w	r3, [sl]
 800711c:	e4ad      	b.n	8006a7a <_dtoa_r+0x49a>
 800711e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007120:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800717c <_dtoa_r+0xb9c>
 8007124:	b11b      	cbz	r3, 800712e <_dtoa_r+0xb4e>
 8007126:	f10a 0308 	add.w	r3, sl, #8
 800712a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4650      	mov	r0, sl
 8007130:	b017      	add	sp, #92	@ 0x5c
 8007132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007136:	9b07      	ldr	r3, [sp, #28]
 8007138:	2b01      	cmp	r3, #1
 800713a:	f77f ae2e 	ble.w	8006d9a <_dtoa_r+0x7ba>
 800713e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007140:	9308      	str	r3, [sp, #32]
 8007142:	2001      	movs	r0, #1
 8007144:	e64d      	b.n	8006de2 <_dtoa_r+0x802>
 8007146:	f1bb 0f00 	cmp.w	fp, #0
 800714a:	f77f aed9 	ble.w	8006f00 <_dtoa_r+0x920>
 800714e:	4656      	mov	r6, sl
 8007150:	9802      	ldr	r0, [sp, #8]
 8007152:	4621      	mov	r1, r4
 8007154:	f7ff f9bc 	bl	80064d0 <quorem>
 8007158:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800715c:	f806 3b01 	strb.w	r3, [r6], #1
 8007160:	eba6 020a 	sub.w	r2, r6, sl
 8007164:	4593      	cmp	fp, r2
 8007166:	ddb4      	ble.n	80070d2 <_dtoa_r+0xaf2>
 8007168:	9902      	ldr	r1, [sp, #8]
 800716a:	2300      	movs	r3, #0
 800716c:	220a      	movs	r2, #10
 800716e:	4648      	mov	r0, r9
 8007170:	f000 f968 	bl	8007444 <__multadd>
 8007174:	9002      	str	r0, [sp, #8]
 8007176:	e7eb      	b.n	8007150 <_dtoa_r+0xb70>
 8007178:	0800a039 	.word	0x0800a039
 800717c:	08009fbd 	.word	0x08009fbd

08007180 <_free_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4605      	mov	r5, r0
 8007184:	2900      	cmp	r1, #0
 8007186:	d041      	beq.n	800720c <_free_r+0x8c>
 8007188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718c:	1f0c      	subs	r4, r1, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	18e4      	addlt	r4, r4, r3
 8007194:	f000 f8e8 	bl	8007368 <__malloc_lock>
 8007198:	4a1d      	ldr	r2, [pc, #116]	@ (8007210 <_free_r+0x90>)
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	b933      	cbnz	r3, 80071ac <_free_r+0x2c>
 800719e:	6063      	str	r3, [r4, #4]
 80071a0:	6014      	str	r4, [r2, #0]
 80071a2:	4628      	mov	r0, r5
 80071a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071a8:	f000 b8e4 	b.w	8007374 <__malloc_unlock>
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	d908      	bls.n	80071c2 <_free_r+0x42>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	1821      	adds	r1, r4, r0
 80071b4:	428b      	cmp	r3, r1
 80071b6:	bf01      	itttt	eq
 80071b8:	6819      	ldreq	r1, [r3, #0]
 80071ba:	685b      	ldreq	r3, [r3, #4]
 80071bc:	1809      	addeq	r1, r1, r0
 80071be:	6021      	streq	r1, [r4, #0]
 80071c0:	e7ed      	b.n	800719e <_free_r+0x1e>
 80071c2:	461a      	mov	r2, r3
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	b10b      	cbz	r3, 80071cc <_free_r+0x4c>
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d9fa      	bls.n	80071c2 <_free_r+0x42>
 80071cc:	6811      	ldr	r1, [r2, #0]
 80071ce:	1850      	adds	r0, r2, r1
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d10b      	bne.n	80071ec <_free_r+0x6c>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	4401      	add	r1, r0
 80071d8:	1850      	adds	r0, r2, r1
 80071da:	4283      	cmp	r3, r0
 80071dc:	6011      	str	r1, [r2, #0]
 80071de:	d1e0      	bne.n	80071a2 <_free_r+0x22>
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	6053      	str	r3, [r2, #4]
 80071e6:	4408      	add	r0, r1
 80071e8:	6010      	str	r0, [r2, #0]
 80071ea:	e7da      	b.n	80071a2 <_free_r+0x22>
 80071ec:	d902      	bls.n	80071f4 <_free_r+0x74>
 80071ee:	230c      	movs	r3, #12
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	e7d6      	b.n	80071a2 <_free_r+0x22>
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	1821      	adds	r1, r4, r0
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf04      	itt	eq
 80071fc:	6819      	ldreq	r1, [r3, #0]
 80071fe:	685b      	ldreq	r3, [r3, #4]
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	bf04      	itt	eq
 8007204:	1809      	addeq	r1, r1, r0
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	6054      	str	r4, [r2, #4]
 800720a:	e7ca      	b.n	80071a2 <_free_r+0x22>
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	200005bc 	.word	0x200005bc

08007214 <malloc>:
 8007214:	4b02      	ldr	r3, [pc, #8]	@ (8007220 <malloc+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f000 b825 	b.w	8007268 <_malloc_r>
 800721e:	bf00      	nop
 8007220:	2000001c 	.word	0x2000001c

08007224 <sbrk_aligned>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	4e0f      	ldr	r6, [pc, #60]	@ (8007264 <sbrk_aligned+0x40>)
 8007228:	460c      	mov	r4, r1
 800722a:	6831      	ldr	r1, [r6, #0]
 800722c:	4605      	mov	r5, r0
 800722e:	b911      	cbnz	r1, 8007236 <sbrk_aligned+0x12>
 8007230:	f001 fe04 	bl	8008e3c <_sbrk_r>
 8007234:	6030      	str	r0, [r6, #0]
 8007236:	4621      	mov	r1, r4
 8007238:	4628      	mov	r0, r5
 800723a:	f001 fdff 	bl	8008e3c <_sbrk_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	d103      	bne.n	800724a <sbrk_aligned+0x26>
 8007242:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007246:	4620      	mov	r0, r4
 8007248:	bd70      	pop	{r4, r5, r6, pc}
 800724a:	1cc4      	adds	r4, r0, #3
 800724c:	f024 0403 	bic.w	r4, r4, #3
 8007250:	42a0      	cmp	r0, r4
 8007252:	d0f8      	beq.n	8007246 <sbrk_aligned+0x22>
 8007254:	1a21      	subs	r1, r4, r0
 8007256:	4628      	mov	r0, r5
 8007258:	f001 fdf0 	bl	8008e3c <_sbrk_r>
 800725c:	3001      	adds	r0, #1
 800725e:	d1f2      	bne.n	8007246 <sbrk_aligned+0x22>
 8007260:	e7ef      	b.n	8007242 <sbrk_aligned+0x1e>
 8007262:	bf00      	nop
 8007264:	200005b8 	.word	0x200005b8

08007268 <_malloc_r>:
 8007268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800726c:	1ccd      	adds	r5, r1, #3
 800726e:	f025 0503 	bic.w	r5, r5, #3
 8007272:	3508      	adds	r5, #8
 8007274:	2d0c      	cmp	r5, #12
 8007276:	bf38      	it	cc
 8007278:	250c      	movcc	r5, #12
 800727a:	2d00      	cmp	r5, #0
 800727c:	4606      	mov	r6, r0
 800727e:	db01      	blt.n	8007284 <_malloc_r+0x1c>
 8007280:	42a9      	cmp	r1, r5
 8007282:	d904      	bls.n	800728e <_malloc_r+0x26>
 8007284:	230c      	movs	r3, #12
 8007286:	6033      	str	r3, [r6, #0]
 8007288:	2000      	movs	r0, #0
 800728a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800728e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007364 <_malloc_r+0xfc>
 8007292:	f000 f869 	bl	8007368 <__malloc_lock>
 8007296:	f8d8 3000 	ldr.w	r3, [r8]
 800729a:	461c      	mov	r4, r3
 800729c:	bb44      	cbnz	r4, 80072f0 <_malloc_r+0x88>
 800729e:	4629      	mov	r1, r5
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7ff ffbf 	bl	8007224 <sbrk_aligned>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	4604      	mov	r4, r0
 80072aa:	d158      	bne.n	800735e <_malloc_r+0xf6>
 80072ac:	f8d8 4000 	ldr.w	r4, [r8]
 80072b0:	4627      	mov	r7, r4
 80072b2:	2f00      	cmp	r7, #0
 80072b4:	d143      	bne.n	800733e <_malloc_r+0xd6>
 80072b6:	2c00      	cmp	r4, #0
 80072b8:	d04b      	beq.n	8007352 <_malloc_r+0xea>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	4639      	mov	r1, r7
 80072be:	4630      	mov	r0, r6
 80072c0:	eb04 0903 	add.w	r9, r4, r3
 80072c4:	f001 fdba 	bl	8008e3c <_sbrk_r>
 80072c8:	4581      	cmp	r9, r0
 80072ca:	d142      	bne.n	8007352 <_malloc_r+0xea>
 80072cc:	6821      	ldr	r1, [r4, #0]
 80072ce:	1a6d      	subs	r5, r5, r1
 80072d0:	4629      	mov	r1, r5
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ffa6 	bl	8007224 <sbrk_aligned>
 80072d8:	3001      	adds	r0, #1
 80072da:	d03a      	beq.n	8007352 <_malloc_r+0xea>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	442b      	add	r3, r5
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	f8d8 3000 	ldr.w	r3, [r8]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	bb62      	cbnz	r2, 8007344 <_malloc_r+0xdc>
 80072ea:	f8c8 7000 	str.w	r7, [r8]
 80072ee:	e00f      	b.n	8007310 <_malloc_r+0xa8>
 80072f0:	6822      	ldr	r2, [r4, #0]
 80072f2:	1b52      	subs	r2, r2, r5
 80072f4:	d420      	bmi.n	8007338 <_malloc_r+0xd0>
 80072f6:	2a0b      	cmp	r2, #11
 80072f8:	d917      	bls.n	800732a <_malloc_r+0xc2>
 80072fa:	1961      	adds	r1, r4, r5
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	6025      	str	r5, [r4, #0]
 8007300:	bf18      	it	ne
 8007302:	6059      	strne	r1, [r3, #4]
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	bf08      	it	eq
 8007308:	f8c8 1000 	streq.w	r1, [r8]
 800730c:	5162      	str	r2, [r4, r5]
 800730e:	604b      	str	r3, [r1, #4]
 8007310:	4630      	mov	r0, r6
 8007312:	f000 f82f 	bl	8007374 <__malloc_unlock>
 8007316:	f104 000b 	add.w	r0, r4, #11
 800731a:	1d23      	adds	r3, r4, #4
 800731c:	f020 0007 	bic.w	r0, r0, #7
 8007320:	1ac2      	subs	r2, r0, r3
 8007322:	bf1c      	itt	ne
 8007324:	1a1b      	subne	r3, r3, r0
 8007326:	50a3      	strne	r3, [r4, r2]
 8007328:	e7af      	b.n	800728a <_malloc_r+0x22>
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	42a3      	cmp	r3, r4
 800732e:	bf0c      	ite	eq
 8007330:	f8c8 2000 	streq.w	r2, [r8]
 8007334:	605a      	strne	r2, [r3, #4]
 8007336:	e7eb      	b.n	8007310 <_malloc_r+0xa8>
 8007338:	4623      	mov	r3, r4
 800733a:	6864      	ldr	r4, [r4, #4]
 800733c:	e7ae      	b.n	800729c <_malloc_r+0x34>
 800733e:	463c      	mov	r4, r7
 8007340:	687f      	ldr	r7, [r7, #4]
 8007342:	e7b6      	b.n	80072b2 <_malloc_r+0x4a>
 8007344:	461a      	mov	r2, r3
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	42a3      	cmp	r3, r4
 800734a:	d1fb      	bne.n	8007344 <_malloc_r+0xdc>
 800734c:	2300      	movs	r3, #0
 800734e:	6053      	str	r3, [r2, #4]
 8007350:	e7de      	b.n	8007310 <_malloc_r+0xa8>
 8007352:	230c      	movs	r3, #12
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f80c 	bl	8007374 <__malloc_unlock>
 800735c:	e794      	b.n	8007288 <_malloc_r+0x20>
 800735e:	6005      	str	r5, [r0, #0]
 8007360:	e7d6      	b.n	8007310 <_malloc_r+0xa8>
 8007362:	bf00      	nop
 8007364:	200005bc 	.word	0x200005bc

08007368 <__malloc_lock>:
 8007368:	4801      	ldr	r0, [pc, #4]	@ (8007370 <__malloc_lock+0x8>)
 800736a:	f7ff b8a8 	b.w	80064be <__retarget_lock_acquire_recursive>
 800736e:	bf00      	nop
 8007370:	200005b4 	.word	0x200005b4

08007374 <__malloc_unlock>:
 8007374:	4801      	ldr	r0, [pc, #4]	@ (800737c <__malloc_unlock+0x8>)
 8007376:	f7ff b8a3 	b.w	80064c0 <__retarget_lock_release_recursive>
 800737a:	bf00      	nop
 800737c:	200005b4 	.word	0x200005b4

08007380 <_Balloc>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	69c6      	ldr	r6, [r0, #28]
 8007384:	4604      	mov	r4, r0
 8007386:	460d      	mov	r5, r1
 8007388:	b976      	cbnz	r6, 80073a8 <_Balloc+0x28>
 800738a:	2010      	movs	r0, #16
 800738c:	f7ff ff42 	bl	8007214 <malloc>
 8007390:	4602      	mov	r2, r0
 8007392:	61e0      	str	r0, [r4, #28]
 8007394:	b920      	cbnz	r0, 80073a0 <_Balloc+0x20>
 8007396:	4b18      	ldr	r3, [pc, #96]	@ (80073f8 <_Balloc+0x78>)
 8007398:	4818      	ldr	r0, [pc, #96]	@ (80073fc <_Balloc+0x7c>)
 800739a:	216b      	movs	r1, #107	@ 0x6b
 800739c:	f001 fd74 	bl	8008e88 <__assert_func>
 80073a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073a4:	6006      	str	r6, [r0, #0]
 80073a6:	60c6      	str	r6, [r0, #12]
 80073a8:	69e6      	ldr	r6, [r4, #28]
 80073aa:	68f3      	ldr	r3, [r6, #12]
 80073ac:	b183      	cbz	r3, 80073d0 <_Balloc+0x50>
 80073ae:	69e3      	ldr	r3, [r4, #28]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073b6:	b9b8      	cbnz	r0, 80073e8 <_Balloc+0x68>
 80073b8:	2101      	movs	r1, #1
 80073ba:	fa01 f605 	lsl.w	r6, r1, r5
 80073be:	1d72      	adds	r2, r6, #5
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	4620      	mov	r0, r4
 80073c4:	f001 fd7e 	bl	8008ec4 <_calloc_r>
 80073c8:	b160      	cbz	r0, 80073e4 <_Balloc+0x64>
 80073ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ce:	e00e      	b.n	80073ee <_Balloc+0x6e>
 80073d0:	2221      	movs	r2, #33	@ 0x21
 80073d2:	2104      	movs	r1, #4
 80073d4:	4620      	mov	r0, r4
 80073d6:	f001 fd75 	bl	8008ec4 <_calloc_r>
 80073da:	69e3      	ldr	r3, [r4, #28]
 80073dc:	60f0      	str	r0, [r6, #12]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e4      	bne.n	80073ae <_Balloc+0x2e>
 80073e4:	2000      	movs	r0, #0
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	6802      	ldr	r2, [r0, #0]
 80073ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ee:	2300      	movs	r3, #0
 80073f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073f4:	e7f7      	b.n	80073e6 <_Balloc+0x66>
 80073f6:	bf00      	nop
 80073f8:	08009fca 	.word	0x08009fca
 80073fc:	0800a04a 	.word	0x0800a04a

08007400 <_Bfree>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	69c6      	ldr	r6, [r0, #28]
 8007404:	4605      	mov	r5, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b976      	cbnz	r6, 8007428 <_Bfree+0x28>
 800740a:	2010      	movs	r0, #16
 800740c:	f7ff ff02 	bl	8007214 <malloc>
 8007410:	4602      	mov	r2, r0
 8007412:	61e8      	str	r0, [r5, #28]
 8007414:	b920      	cbnz	r0, 8007420 <_Bfree+0x20>
 8007416:	4b09      	ldr	r3, [pc, #36]	@ (800743c <_Bfree+0x3c>)
 8007418:	4809      	ldr	r0, [pc, #36]	@ (8007440 <_Bfree+0x40>)
 800741a:	218f      	movs	r1, #143	@ 0x8f
 800741c:	f001 fd34 	bl	8008e88 <__assert_func>
 8007420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007424:	6006      	str	r6, [r0, #0]
 8007426:	60c6      	str	r6, [r0, #12]
 8007428:	b13c      	cbz	r4, 800743a <_Bfree+0x3a>
 800742a:	69eb      	ldr	r3, [r5, #28]
 800742c:	6862      	ldr	r2, [r4, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007434:	6021      	str	r1, [r4, #0]
 8007436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	08009fca 	.word	0x08009fca
 8007440:	0800a04a 	.word	0x0800a04a

08007444 <__multadd>:
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	690d      	ldr	r5, [r1, #16]
 800744a:	4607      	mov	r7, r0
 800744c:	460c      	mov	r4, r1
 800744e:	461e      	mov	r6, r3
 8007450:	f101 0c14 	add.w	ip, r1, #20
 8007454:	2000      	movs	r0, #0
 8007456:	f8dc 3000 	ldr.w	r3, [ip]
 800745a:	b299      	uxth	r1, r3
 800745c:	fb02 6101 	mla	r1, r2, r1, r6
 8007460:	0c1e      	lsrs	r6, r3, #16
 8007462:	0c0b      	lsrs	r3, r1, #16
 8007464:	fb02 3306 	mla	r3, r2, r6, r3
 8007468:	b289      	uxth	r1, r1
 800746a:	3001      	adds	r0, #1
 800746c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007470:	4285      	cmp	r5, r0
 8007472:	f84c 1b04 	str.w	r1, [ip], #4
 8007476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800747a:	dcec      	bgt.n	8007456 <__multadd+0x12>
 800747c:	b30e      	cbz	r6, 80074c2 <__multadd+0x7e>
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	42ab      	cmp	r3, r5
 8007482:	dc19      	bgt.n	80074b8 <__multadd+0x74>
 8007484:	6861      	ldr	r1, [r4, #4]
 8007486:	4638      	mov	r0, r7
 8007488:	3101      	adds	r1, #1
 800748a:	f7ff ff79 	bl	8007380 <_Balloc>
 800748e:	4680      	mov	r8, r0
 8007490:	b928      	cbnz	r0, 800749e <__multadd+0x5a>
 8007492:	4602      	mov	r2, r0
 8007494:	4b0c      	ldr	r3, [pc, #48]	@ (80074c8 <__multadd+0x84>)
 8007496:	480d      	ldr	r0, [pc, #52]	@ (80074cc <__multadd+0x88>)
 8007498:	21ba      	movs	r1, #186	@ 0xba
 800749a:	f001 fcf5 	bl	8008e88 <__assert_func>
 800749e:	6922      	ldr	r2, [r4, #16]
 80074a0:	3202      	adds	r2, #2
 80074a2:	f104 010c 	add.w	r1, r4, #12
 80074a6:	0092      	lsls	r2, r2, #2
 80074a8:	300c      	adds	r0, #12
 80074aa:	f001 fcd7 	bl	8008e5c <memcpy>
 80074ae:	4621      	mov	r1, r4
 80074b0:	4638      	mov	r0, r7
 80074b2:	f7ff ffa5 	bl	8007400 <_Bfree>
 80074b6:	4644      	mov	r4, r8
 80074b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074bc:	3501      	adds	r5, #1
 80074be:	615e      	str	r6, [r3, #20]
 80074c0:	6125      	str	r5, [r4, #16]
 80074c2:	4620      	mov	r0, r4
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	0800a039 	.word	0x0800a039
 80074cc:	0800a04a 	.word	0x0800a04a

080074d0 <__s2b>:
 80074d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d4:	460c      	mov	r4, r1
 80074d6:	4615      	mov	r5, r2
 80074d8:	461f      	mov	r7, r3
 80074da:	2209      	movs	r2, #9
 80074dc:	3308      	adds	r3, #8
 80074de:	4606      	mov	r6, r0
 80074e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e4:	2100      	movs	r1, #0
 80074e6:	2201      	movs	r2, #1
 80074e8:	429a      	cmp	r2, r3
 80074ea:	db09      	blt.n	8007500 <__s2b+0x30>
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ff47 	bl	8007380 <_Balloc>
 80074f2:	b940      	cbnz	r0, 8007506 <__s2b+0x36>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b19      	ldr	r3, [pc, #100]	@ (800755c <__s2b+0x8c>)
 80074f8:	4819      	ldr	r0, [pc, #100]	@ (8007560 <__s2b+0x90>)
 80074fa:	21d3      	movs	r1, #211	@ 0xd3
 80074fc:	f001 fcc4 	bl	8008e88 <__assert_func>
 8007500:	0052      	lsls	r2, r2, #1
 8007502:	3101      	adds	r1, #1
 8007504:	e7f0      	b.n	80074e8 <__s2b+0x18>
 8007506:	9b08      	ldr	r3, [sp, #32]
 8007508:	6143      	str	r3, [r0, #20]
 800750a:	2d09      	cmp	r5, #9
 800750c:	f04f 0301 	mov.w	r3, #1
 8007510:	6103      	str	r3, [r0, #16]
 8007512:	dd16      	ble.n	8007542 <__s2b+0x72>
 8007514:	f104 0909 	add.w	r9, r4, #9
 8007518:	46c8      	mov	r8, r9
 800751a:	442c      	add	r4, r5
 800751c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007520:	4601      	mov	r1, r0
 8007522:	3b30      	subs	r3, #48	@ 0x30
 8007524:	220a      	movs	r2, #10
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff ff8c 	bl	8007444 <__multadd>
 800752c:	45a0      	cmp	r8, r4
 800752e:	d1f5      	bne.n	800751c <__s2b+0x4c>
 8007530:	f1a5 0408 	sub.w	r4, r5, #8
 8007534:	444c      	add	r4, r9
 8007536:	1b2d      	subs	r5, r5, r4
 8007538:	1963      	adds	r3, r4, r5
 800753a:	42bb      	cmp	r3, r7
 800753c:	db04      	blt.n	8007548 <__s2b+0x78>
 800753e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007542:	340a      	adds	r4, #10
 8007544:	2509      	movs	r5, #9
 8007546:	e7f6      	b.n	8007536 <__s2b+0x66>
 8007548:	f814 3b01 	ldrb.w	r3, [r4], #1
 800754c:	4601      	mov	r1, r0
 800754e:	3b30      	subs	r3, #48	@ 0x30
 8007550:	220a      	movs	r2, #10
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ff76 	bl	8007444 <__multadd>
 8007558:	e7ee      	b.n	8007538 <__s2b+0x68>
 800755a:	bf00      	nop
 800755c:	0800a039 	.word	0x0800a039
 8007560:	0800a04a 	.word	0x0800a04a

08007564 <__hi0bits>:
 8007564:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007568:	4603      	mov	r3, r0
 800756a:	bf36      	itet	cc
 800756c:	0403      	lslcc	r3, r0, #16
 800756e:	2000      	movcs	r0, #0
 8007570:	2010      	movcc	r0, #16
 8007572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007576:	bf3c      	itt	cc
 8007578:	021b      	lslcc	r3, r3, #8
 800757a:	3008      	addcc	r0, #8
 800757c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007580:	bf3c      	itt	cc
 8007582:	011b      	lslcc	r3, r3, #4
 8007584:	3004      	addcc	r0, #4
 8007586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758a:	bf3c      	itt	cc
 800758c:	009b      	lslcc	r3, r3, #2
 800758e:	3002      	addcc	r0, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	db05      	blt.n	80075a0 <__hi0bits+0x3c>
 8007594:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007598:	f100 0001 	add.w	r0, r0, #1
 800759c:	bf08      	it	eq
 800759e:	2020      	moveq	r0, #32
 80075a0:	4770      	bx	lr

080075a2 <__lo0bits>:
 80075a2:	6803      	ldr	r3, [r0, #0]
 80075a4:	4602      	mov	r2, r0
 80075a6:	f013 0007 	ands.w	r0, r3, #7
 80075aa:	d00b      	beq.n	80075c4 <__lo0bits+0x22>
 80075ac:	07d9      	lsls	r1, r3, #31
 80075ae:	d421      	bmi.n	80075f4 <__lo0bits+0x52>
 80075b0:	0798      	lsls	r0, r3, #30
 80075b2:	bf49      	itett	mi
 80075b4:	085b      	lsrmi	r3, r3, #1
 80075b6:	089b      	lsrpl	r3, r3, #2
 80075b8:	2001      	movmi	r0, #1
 80075ba:	6013      	strmi	r3, [r2, #0]
 80075bc:	bf5c      	itt	pl
 80075be:	6013      	strpl	r3, [r2, #0]
 80075c0:	2002      	movpl	r0, #2
 80075c2:	4770      	bx	lr
 80075c4:	b299      	uxth	r1, r3
 80075c6:	b909      	cbnz	r1, 80075cc <__lo0bits+0x2a>
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	2010      	movs	r0, #16
 80075cc:	b2d9      	uxtb	r1, r3
 80075ce:	b909      	cbnz	r1, 80075d4 <__lo0bits+0x32>
 80075d0:	3008      	adds	r0, #8
 80075d2:	0a1b      	lsrs	r3, r3, #8
 80075d4:	0719      	lsls	r1, r3, #28
 80075d6:	bf04      	itt	eq
 80075d8:	091b      	lsreq	r3, r3, #4
 80075da:	3004      	addeq	r0, #4
 80075dc:	0799      	lsls	r1, r3, #30
 80075de:	bf04      	itt	eq
 80075e0:	089b      	lsreq	r3, r3, #2
 80075e2:	3002      	addeq	r0, #2
 80075e4:	07d9      	lsls	r1, r3, #31
 80075e6:	d403      	bmi.n	80075f0 <__lo0bits+0x4e>
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	f100 0001 	add.w	r0, r0, #1
 80075ee:	d003      	beq.n	80075f8 <__lo0bits+0x56>
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	4770      	bx	lr
 80075f4:	2000      	movs	r0, #0
 80075f6:	4770      	bx	lr
 80075f8:	2020      	movs	r0, #32
 80075fa:	4770      	bx	lr

080075fc <__i2b>:
 80075fc:	b510      	push	{r4, lr}
 80075fe:	460c      	mov	r4, r1
 8007600:	2101      	movs	r1, #1
 8007602:	f7ff febd 	bl	8007380 <_Balloc>
 8007606:	4602      	mov	r2, r0
 8007608:	b928      	cbnz	r0, 8007616 <__i2b+0x1a>
 800760a:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <__i2b+0x24>)
 800760c:	4805      	ldr	r0, [pc, #20]	@ (8007624 <__i2b+0x28>)
 800760e:	f240 1145 	movw	r1, #325	@ 0x145
 8007612:	f001 fc39 	bl	8008e88 <__assert_func>
 8007616:	2301      	movs	r3, #1
 8007618:	6144      	str	r4, [r0, #20]
 800761a:	6103      	str	r3, [r0, #16]
 800761c:	bd10      	pop	{r4, pc}
 800761e:	bf00      	nop
 8007620:	0800a039 	.word	0x0800a039
 8007624:	0800a04a 	.word	0x0800a04a

08007628 <__multiply>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	4617      	mov	r7, r2
 800762e:	690a      	ldr	r2, [r1, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	429a      	cmp	r2, r3
 8007634:	bfa8      	it	ge
 8007636:	463b      	movge	r3, r7
 8007638:	4689      	mov	r9, r1
 800763a:	bfa4      	itt	ge
 800763c:	460f      	movge	r7, r1
 800763e:	4699      	movge	r9, r3
 8007640:	693d      	ldr	r5, [r7, #16]
 8007642:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	eb05 060a 	add.w	r6, r5, sl
 800764e:	42b3      	cmp	r3, r6
 8007650:	b085      	sub	sp, #20
 8007652:	bfb8      	it	lt
 8007654:	3101      	addlt	r1, #1
 8007656:	f7ff fe93 	bl	8007380 <_Balloc>
 800765a:	b930      	cbnz	r0, 800766a <__multiply+0x42>
 800765c:	4602      	mov	r2, r0
 800765e:	4b41      	ldr	r3, [pc, #260]	@ (8007764 <__multiply+0x13c>)
 8007660:	4841      	ldr	r0, [pc, #260]	@ (8007768 <__multiply+0x140>)
 8007662:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007666:	f001 fc0f 	bl	8008e88 <__assert_func>
 800766a:	f100 0414 	add.w	r4, r0, #20
 800766e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007672:	4623      	mov	r3, r4
 8007674:	2200      	movs	r2, #0
 8007676:	4573      	cmp	r3, lr
 8007678:	d320      	bcc.n	80076bc <__multiply+0x94>
 800767a:	f107 0814 	add.w	r8, r7, #20
 800767e:	f109 0114 	add.w	r1, r9, #20
 8007682:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007686:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	1beb      	subs	r3, r5, r7
 800768e:	3b15      	subs	r3, #21
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	3304      	adds	r3, #4
 8007696:	3715      	adds	r7, #21
 8007698:	42bd      	cmp	r5, r7
 800769a:	bf38      	it	cc
 800769c:	2304      	movcc	r3, #4
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	9b02      	ldr	r3, [sp, #8]
 80076a2:	9103      	str	r1, [sp, #12]
 80076a4:	428b      	cmp	r3, r1
 80076a6:	d80c      	bhi.n	80076c2 <__multiply+0x9a>
 80076a8:	2e00      	cmp	r6, #0
 80076aa:	dd03      	ble.n	80076b4 <__multiply+0x8c>
 80076ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d055      	beq.n	8007760 <__multiply+0x138>
 80076b4:	6106      	str	r6, [r0, #16]
 80076b6:	b005      	add	sp, #20
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	f843 2b04 	str.w	r2, [r3], #4
 80076c0:	e7d9      	b.n	8007676 <__multiply+0x4e>
 80076c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80076c6:	f1ba 0f00 	cmp.w	sl, #0
 80076ca:	d01f      	beq.n	800770c <__multiply+0xe4>
 80076cc:	46c4      	mov	ip, r8
 80076ce:	46a1      	mov	r9, r4
 80076d0:	2700      	movs	r7, #0
 80076d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076d6:	f8d9 3000 	ldr.w	r3, [r9]
 80076da:	fa1f fb82 	uxth.w	fp, r2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80076e4:	443b      	add	r3, r7
 80076e6:	f8d9 7000 	ldr.w	r7, [r9]
 80076ea:	0c12      	lsrs	r2, r2, #16
 80076ec:	0c3f      	lsrs	r7, r7, #16
 80076ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80076f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076fc:	4565      	cmp	r5, ip
 80076fe:	f849 3b04 	str.w	r3, [r9], #4
 8007702:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007706:	d8e4      	bhi.n	80076d2 <__multiply+0xaa>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	50e7      	str	r7, [r4, r3]
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007712:	3104      	adds	r1, #4
 8007714:	f1b9 0f00 	cmp.w	r9, #0
 8007718:	d020      	beq.n	800775c <__multiply+0x134>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	4647      	mov	r7, r8
 800771e:	46a4      	mov	ip, r4
 8007720:	f04f 0a00 	mov.w	sl, #0
 8007724:	f8b7 b000 	ldrh.w	fp, [r7]
 8007728:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800772c:	fb09 220b 	mla	r2, r9, fp, r2
 8007730:	4452      	add	r2, sl
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007738:	f84c 3b04 	str.w	r3, [ip], #4
 800773c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007744:	f8bc 3000 	ldrh.w	r3, [ip]
 8007748:	fb09 330a 	mla	r3, r9, sl, r3
 800774c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007750:	42bd      	cmp	r5, r7
 8007752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007756:	d8e5      	bhi.n	8007724 <__multiply+0xfc>
 8007758:	9a01      	ldr	r2, [sp, #4]
 800775a:	50a3      	str	r3, [r4, r2]
 800775c:	3404      	adds	r4, #4
 800775e:	e79f      	b.n	80076a0 <__multiply+0x78>
 8007760:	3e01      	subs	r6, #1
 8007762:	e7a1      	b.n	80076a8 <__multiply+0x80>
 8007764:	0800a039 	.word	0x0800a039
 8007768:	0800a04a 	.word	0x0800a04a

0800776c <__pow5mult>:
 800776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007770:	4615      	mov	r5, r2
 8007772:	f012 0203 	ands.w	r2, r2, #3
 8007776:	4607      	mov	r7, r0
 8007778:	460e      	mov	r6, r1
 800777a:	d007      	beq.n	800778c <__pow5mult+0x20>
 800777c:	4c25      	ldr	r4, [pc, #148]	@ (8007814 <__pow5mult+0xa8>)
 800777e:	3a01      	subs	r2, #1
 8007780:	2300      	movs	r3, #0
 8007782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007786:	f7ff fe5d 	bl	8007444 <__multadd>
 800778a:	4606      	mov	r6, r0
 800778c:	10ad      	asrs	r5, r5, #2
 800778e:	d03d      	beq.n	800780c <__pow5mult+0xa0>
 8007790:	69fc      	ldr	r4, [r7, #28]
 8007792:	b97c      	cbnz	r4, 80077b4 <__pow5mult+0x48>
 8007794:	2010      	movs	r0, #16
 8007796:	f7ff fd3d 	bl	8007214 <malloc>
 800779a:	4602      	mov	r2, r0
 800779c:	61f8      	str	r0, [r7, #28]
 800779e:	b928      	cbnz	r0, 80077ac <__pow5mult+0x40>
 80077a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007818 <__pow5mult+0xac>)
 80077a2:	481e      	ldr	r0, [pc, #120]	@ (800781c <__pow5mult+0xb0>)
 80077a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077a8:	f001 fb6e 	bl	8008e88 <__assert_func>
 80077ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077b0:	6004      	str	r4, [r0, #0]
 80077b2:	60c4      	str	r4, [r0, #12]
 80077b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077bc:	b94c      	cbnz	r4, 80077d2 <__pow5mult+0x66>
 80077be:	f240 2171 	movw	r1, #625	@ 0x271
 80077c2:	4638      	mov	r0, r7
 80077c4:	f7ff ff1a 	bl	80075fc <__i2b>
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80077ce:	4604      	mov	r4, r0
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	f04f 0900 	mov.w	r9, #0
 80077d6:	07eb      	lsls	r3, r5, #31
 80077d8:	d50a      	bpl.n	80077f0 <__pow5mult+0x84>
 80077da:	4631      	mov	r1, r6
 80077dc:	4622      	mov	r2, r4
 80077de:	4638      	mov	r0, r7
 80077e0:	f7ff ff22 	bl	8007628 <__multiply>
 80077e4:	4631      	mov	r1, r6
 80077e6:	4680      	mov	r8, r0
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff fe09 	bl	8007400 <_Bfree>
 80077ee:	4646      	mov	r6, r8
 80077f0:	106d      	asrs	r5, r5, #1
 80077f2:	d00b      	beq.n	800780c <__pow5mult+0xa0>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	b938      	cbnz	r0, 8007808 <__pow5mult+0x9c>
 80077f8:	4622      	mov	r2, r4
 80077fa:	4621      	mov	r1, r4
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7ff ff13 	bl	8007628 <__multiply>
 8007802:	6020      	str	r0, [r4, #0]
 8007804:	f8c0 9000 	str.w	r9, [r0]
 8007808:	4604      	mov	r4, r0
 800780a:	e7e4      	b.n	80077d6 <__pow5mult+0x6a>
 800780c:	4630      	mov	r0, r6
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007812:	bf00      	nop
 8007814:	0800a15c 	.word	0x0800a15c
 8007818:	08009fca 	.word	0x08009fca
 800781c:	0800a04a 	.word	0x0800a04a

08007820 <__lshift>:
 8007820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	460c      	mov	r4, r1
 8007826:	6849      	ldr	r1, [r1, #4]
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800782e:	68a3      	ldr	r3, [r4, #8]
 8007830:	4607      	mov	r7, r0
 8007832:	4691      	mov	r9, r2
 8007834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007838:	f108 0601 	add.w	r6, r8, #1
 800783c:	42b3      	cmp	r3, r6
 800783e:	db0b      	blt.n	8007858 <__lshift+0x38>
 8007840:	4638      	mov	r0, r7
 8007842:	f7ff fd9d 	bl	8007380 <_Balloc>
 8007846:	4605      	mov	r5, r0
 8007848:	b948      	cbnz	r0, 800785e <__lshift+0x3e>
 800784a:	4602      	mov	r2, r0
 800784c:	4b28      	ldr	r3, [pc, #160]	@ (80078f0 <__lshift+0xd0>)
 800784e:	4829      	ldr	r0, [pc, #164]	@ (80078f4 <__lshift+0xd4>)
 8007850:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007854:	f001 fb18 	bl	8008e88 <__assert_func>
 8007858:	3101      	adds	r1, #1
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	e7ee      	b.n	800783c <__lshift+0x1c>
 800785e:	2300      	movs	r3, #0
 8007860:	f100 0114 	add.w	r1, r0, #20
 8007864:	f100 0210 	add.w	r2, r0, #16
 8007868:	4618      	mov	r0, r3
 800786a:	4553      	cmp	r3, sl
 800786c:	db33      	blt.n	80078d6 <__lshift+0xb6>
 800786e:	6920      	ldr	r0, [r4, #16]
 8007870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007874:	f104 0314 	add.w	r3, r4, #20
 8007878:	f019 091f 	ands.w	r9, r9, #31
 800787c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007884:	d02b      	beq.n	80078de <__lshift+0xbe>
 8007886:	f1c9 0e20 	rsb	lr, r9, #32
 800788a:	468a      	mov	sl, r1
 800788c:	2200      	movs	r2, #0
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	fa00 f009 	lsl.w	r0, r0, r9
 8007894:	4310      	orrs	r0, r2
 8007896:	f84a 0b04 	str.w	r0, [sl], #4
 800789a:	f853 2b04 	ldr.w	r2, [r3], #4
 800789e:	459c      	cmp	ip, r3
 80078a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80078a4:	d8f3      	bhi.n	800788e <__lshift+0x6e>
 80078a6:	ebac 0304 	sub.w	r3, ip, r4
 80078aa:	3b15      	subs	r3, #21
 80078ac:	f023 0303 	bic.w	r3, r3, #3
 80078b0:	3304      	adds	r3, #4
 80078b2:	f104 0015 	add.w	r0, r4, #21
 80078b6:	4560      	cmp	r0, ip
 80078b8:	bf88      	it	hi
 80078ba:	2304      	movhi	r3, #4
 80078bc:	50ca      	str	r2, [r1, r3]
 80078be:	b10a      	cbz	r2, 80078c4 <__lshift+0xa4>
 80078c0:	f108 0602 	add.w	r6, r8, #2
 80078c4:	3e01      	subs	r6, #1
 80078c6:	4638      	mov	r0, r7
 80078c8:	612e      	str	r6, [r5, #16]
 80078ca:	4621      	mov	r1, r4
 80078cc:	f7ff fd98 	bl	8007400 <_Bfree>
 80078d0:	4628      	mov	r0, r5
 80078d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80078da:	3301      	adds	r3, #1
 80078dc:	e7c5      	b.n	800786a <__lshift+0x4a>
 80078de:	3904      	subs	r1, #4
 80078e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80078e8:	459c      	cmp	ip, r3
 80078ea:	d8f9      	bhi.n	80078e0 <__lshift+0xc0>
 80078ec:	e7ea      	b.n	80078c4 <__lshift+0xa4>
 80078ee:	bf00      	nop
 80078f0:	0800a039 	.word	0x0800a039
 80078f4:	0800a04a 	.word	0x0800a04a

080078f8 <__mcmp>:
 80078f8:	690a      	ldr	r2, [r1, #16]
 80078fa:	4603      	mov	r3, r0
 80078fc:	6900      	ldr	r0, [r0, #16]
 80078fe:	1a80      	subs	r0, r0, r2
 8007900:	b530      	push	{r4, r5, lr}
 8007902:	d10e      	bne.n	8007922 <__mcmp+0x2a>
 8007904:	3314      	adds	r3, #20
 8007906:	3114      	adds	r1, #20
 8007908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800790c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007918:	4295      	cmp	r5, r2
 800791a:	d003      	beq.n	8007924 <__mcmp+0x2c>
 800791c:	d205      	bcs.n	800792a <__mcmp+0x32>
 800791e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007922:	bd30      	pop	{r4, r5, pc}
 8007924:	42a3      	cmp	r3, r4
 8007926:	d3f3      	bcc.n	8007910 <__mcmp+0x18>
 8007928:	e7fb      	b.n	8007922 <__mcmp+0x2a>
 800792a:	2001      	movs	r0, #1
 800792c:	e7f9      	b.n	8007922 <__mcmp+0x2a>
	...

08007930 <__mdiff>:
 8007930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	4689      	mov	r9, r1
 8007936:	4606      	mov	r6, r0
 8007938:	4611      	mov	r1, r2
 800793a:	4648      	mov	r0, r9
 800793c:	4614      	mov	r4, r2
 800793e:	f7ff ffdb 	bl	80078f8 <__mcmp>
 8007942:	1e05      	subs	r5, r0, #0
 8007944:	d112      	bne.n	800796c <__mdiff+0x3c>
 8007946:	4629      	mov	r1, r5
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff fd19 	bl	8007380 <_Balloc>
 800794e:	4602      	mov	r2, r0
 8007950:	b928      	cbnz	r0, 800795e <__mdiff+0x2e>
 8007952:	4b3f      	ldr	r3, [pc, #252]	@ (8007a50 <__mdiff+0x120>)
 8007954:	f240 2137 	movw	r1, #567	@ 0x237
 8007958:	483e      	ldr	r0, [pc, #248]	@ (8007a54 <__mdiff+0x124>)
 800795a:	f001 fa95 	bl	8008e88 <__assert_func>
 800795e:	2301      	movs	r3, #1
 8007960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007964:	4610      	mov	r0, r2
 8007966:	b003      	add	sp, #12
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	bfbc      	itt	lt
 800796e:	464b      	movlt	r3, r9
 8007970:	46a1      	movlt	r9, r4
 8007972:	4630      	mov	r0, r6
 8007974:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007978:	bfba      	itte	lt
 800797a:	461c      	movlt	r4, r3
 800797c:	2501      	movlt	r5, #1
 800797e:	2500      	movge	r5, #0
 8007980:	f7ff fcfe 	bl	8007380 <_Balloc>
 8007984:	4602      	mov	r2, r0
 8007986:	b918      	cbnz	r0, 8007990 <__mdiff+0x60>
 8007988:	4b31      	ldr	r3, [pc, #196]	@ (8007a50 <__mdiff+0x120>)
 800798a:	f240 2145 	movw	r1, #581	@ 0x245
 800798e:	e7e3      	b.n	8007958 <__mdiff+0x28>
 8007990:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007994:	6926      	ldr	r6, [r4, #16]
 8007996:	60c5      	str	r5, [r0, #12]
 8007998:	f109 0310 	add.w	r3, r9, #16
 800799c:	f109 0514 	add.w	r5, r9, #20
 80079a0:	f104 0e14 	add.w	lr, r4, #20
 80079a4:	f100 0b14 	add.w	fp, r0, #20
 80079a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80079ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	46d9      	mov	r9, fp
 80079b4:	f04f 0c00 	mov.w	ip, #0
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	fa1f f38a 	uxth.w	r3, sl
 80079c8:	4619      	mov	r1, r3
 80079ca:	b283      	uxth	r3, r0
 80079cc:	1acb      	subs	r3, r1, r3
 80079ce:	0c00      	lsrs	r0, r0, #16
 80079d0:	4463      	add	r3, ip
 80079d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80079d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80079da:	b29b      	uxth	r3, r3
 80079dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079e0:	4576      	cmp	r6, lr
 80079e2:	f849 3b04 	str.w	r3, [r9], #4
 80079e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079ea:	d8e5      	bhi.n	80079b8 <__mdiff+0x88>
 80079ec:	1b33      	subs	r3, r6, r4
 80079ee:	3b15      	subs	r3, #21
 80079f0:	f023 0303 	bic.w	r3, r3, #3
 80079f4:	3415      	adds	r4, #21
 80079f6:	3304      	adds	r3, #4
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	bf38      	it	cc
 80079fc:	2304      	movcc	r3, #4
 80079fe:	441d      	add	r5, r3
 8007a00:	445b      	add	r3, fp
 8007a02:	461e      	mov	r6, r3
 8007a04:	462c      	mov	r4, r5
 8007a06:	4544      	cmp	r4, r8
 8007a08:	d30e      	bcc.n	8007a28 <__mdiff+0xf8>
 8007a0a:	f108 0103 	add.w	r1, r8, #3
 8007a0e:	1b49      	subs	r1, r1, r5
 8007a10:	f021 0103 	bic.w	r1, r1, #3
 8007a14:	3d03      	subs	r5, #3
 8007a16:	45a8      	cmp	r8, r5
 8007a18:	bf38      	it	cc
 8007a1a:	2100      	movcc	r1, #0
 8007a1c:	440b      	add	r3, r1
 8007a1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a22:	b191      	cbz	r1, 8007a4a <__mdiff+0x11a>
 8007a24:	6117      	str	r7, [r2, #16]
 8007a26:	e79d      	b.n	8007964 <__mdiff+0x34>
 8007a28:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a2c:	46e6      	mov	lr, ip
 8007a2e:	0c08      	lsrs	r0, r1, #16
 8007a30:	fa1c fc81 	uxtah	ip, ip, r1
 8007a34:	4471      	add	r1, lr
 8007a36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a3a:	b289      	uxth	r1, r1
 8007a3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a40:	f846 1b04 	str.w	r1, [r6], #4
 8007a44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a48:	e7dd      	b.n	8007a06 <__mdiff+0xd6>
 8007a4a:	3f01      	subs	r7, #1
 8007a4c:	e7e7      	b.n	8007a1e <__mdiff+0xee>
 8007a4e:	bf00      	nop
 8007a50:	0800a039 	.word	0x0800a039
 8007a54:	0800a04a 	.word	0x0800a04a

08007a58 <__ulp>:
 8007a58:	b082      	sub	sp, #8
 8007a5a:	ed8d 0b00 	vstr	d0, [sp]
 8007a5e:	9a01      	ldr	r2, [sp, #4]
 8007a60:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa0 <__ulp+0x48>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dc08      	bgt.n	8007a7e <__ulp+0x26>
 8007a6c:	425b      	negs	r3, r3
 8007a6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007a72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a76:	da04      	bge.n	8007a82 <__ulp+0x2a>
 8007a78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a7c:	4113      	asrs	r3, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	e008      	b.n	8007a94 <__ulp+0x3c>
 8007a82:	f1a2 0314 	sub.w	r3, r2, #20
 8007a86:	2b1e      	cmp	r3, #30
 8007a88:	bfda      	itte	le
 8007a8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007a8e:	40da      	lsrle	r2, r3
 8007a90:	2201      	movgt	r2, #1
 8007a92:	2300      	movs	r3, #0
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	ec41 0b10 	vmov	d0, r0, r1
 8007a9c:	b002      	add	sp, #8
 8007a9e:	4770      	bx	lr
 8007aa0:	7ff00000 	.word	0x7ff00000

08007aa4 <__b2d>:
 8007aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa8:	6906      	ldr	r6, [r0, #16]
 8007aaa:	f100 0814 	add.w	r8, r0, #20
 8007aae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007ab2:	1f37      	subs	r7, r6, #4
 8007ab4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7ff fd53 	bl	8007564 <__hi0bits>
 8007abe:	f1c0 0320 	rsb	r3, r0, #32
 8007ac2:	280a      	cmp	r0, #10
 8007ac4:	600b      	str	r3, [r1, #0]
 8007ac6:	491b      	ldr	r1, [pc, #108]	@ (8007b34 <__b2d+0x90>)
 8007ac8:	dc15      	bgt.n	8007af6 <__b2d+0x52>
 8007aca:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ace:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ad2:	45b8      	cmp	r8, r7
 8007ad4:	ea43 0501 	orr.w	r5, r3, r1
 8007ad8:	bf34      	ite	cc
 8007ada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ade:	2300      	movcs	r3, #0
 8007ae0:	3015      	adds	r0, #21
 8007ae2:	fa02 f000 	lsl.w	r0, r2, r0
 8007ae6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007aea:	4303      	orrs	r3, r0
 8007aec:	461c      	mov	r4, r3
 8007aee:	ec45 4b10 	vmov	d0, r4, r5
 8007af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af6:	45b8      	cmp	r8, r7
 8007af8:	bf3a      	itte	cc
 8007afa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007afe:	f1a6 0708 	subcc.w	r7, r6, #8
 8007b02:	2300      	movcs	r3, #0
 8007b04:	380b      	subs	r0, #11
 8007b06:	d012      	beq.n	8007b2e <__b2d+0x8a>
 8007b08:	f1c0 0120 	rsb	r1, r0, #32
 8007b0c:	fa23 f401 	lsr.w	r4, r3, r1
 8007b10:	4082      	lsls	r2, r0
 8007b12:	4322      	orrs	r2, r4
 8007b14:	4547      	cmp	r7, r8
 8007b16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007b1a:	bf8c      	ite	hi
 8007b1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007b20:	2200      	movls	r2, #0
 8007b22:	4083      	lsls	r3, r0
 8007b24:	40ca      	lsrs	r2, r1
 8007b26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	e7de      	b.n	8007aec <__b2d+0x48>
 8007b2e:	ea42 0501 	orr.w	r5, r2, r1
 8007b32:	e7db      	b.n	8007aec <__b2d+0x48>
 8007b34:	3ff00000 	.word	0x3ff00000

08007b38 <__d2b>:
 8007b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b3c:	460f      	mov	r7, r1
 8007b3e:	2101      	movs	r1, #1
 8007b40:	ec59 8b10 	vmov	r8, r9, d0
 8007b44:	4616      	mov	r6, r2
 8007b46:	f7ff fc1b 	bl	8007380 <_Balloc>
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	b930      	cbnz	r0, 8007b5c <__d2b+0x24>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	4b23      	ldr	r3, [pc, #140]	@ (8007be0 <__d2b+0xa8>)
 8007b52:	4824      	ldr	r0, [pc, #144]	@ (8007be4 <__d2b+0xac>)
 8007b54:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b58:	f001 f996 	bl	8008e88 <__assert_func>
 8007b5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b64:	b10d      	cbz	r5, 8007b6a <__d2b+0x32>
 8007b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	f1b8 0300 	subs.w	r3, r8, #0
 8007b70:	d023      	beq.n	8007bba <__d2b+0x82>
 8007b72:	4668      	mov	r0, sp
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	f7ff fd14 	bl	80075a2 <__lo0bits>
 8007b7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b7e:	b1d0      	cbz	r0, 8007bb6 <__d2b+0x7e>
 8007b80:	f1c0 0320 	rsb	r3, r0, #32
 8007b84:	fa02 f303 	lsl.w	r3, r2, r3
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	40c2      	lsrs	r2, r0
 8007b8c:	6163      	str	r3, [r4, #20]
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	61a3      	str	r3, [r4, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bf0c      	ite	eq
 8007b98:	2201      	moveq	r2, #1
 8007b9a:	2202      	movne	r2, #2
 8007b9c:	6122      	str	r2, [r4, #16]
 8007b9e:	b1a5      	cbz	r5, 8007bca <__d2b+0x92>
 8007ba0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ba4:	4405      	add	r5, r0
 8007ba6:	603d      	str	r5, [r7, #0]
 8007ba8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bac:	6030      	str	r0, [r6, #0]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	b003      	add	sp, #12
 8007bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bb6:	6161      	str	r1, [r4, #20]
 8007bb8:	e7ea      	b.n	8007b90 <__d2b+0x58>
 8007bba:	a801      	add	r0, sp, #4
 8007bbc:	f7ff fcf1 	bl	80075a2 <__lo0bits>
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	6163      	str	r3, [r4, #20]
 8007bc4:	3020      	adds	r0, #32
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	e7e8      	b.n	8007b9c <__d2b+0x64>
 8007bca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bd2:	6038      	str	r0, [r7, #0]
 8007bd4:	6918      	ldr	r0, [r3, #16]
 8007bd6:	f7ff fcc5 	bl	8007564 <__hi0bits>
 8007bda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bde:	e7e5      	b.n	8007bac <__d2b+0x74>
 8007be0:	0800a039 	.word	0x0800a039
 8007be4:	0800a04a 	.word	0x0800a04a

08007be8 <__ratio>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	b085      	sub	sp, #20
 8007bee:	e9cd 1000 	strd	r1, r0, [sp]
 8007bf2:	a902      	add	r1, sp, #8
 8007bf4:	f7ff ff56 	bl	8007aa4 <__b2d>
 8007bf8:	9800      	ldr	r0, [sp, #0]
 8007bfa:	a903      	add	r1, sp, #12
 8007bfc:	ec55 4b10 	vmov	r4, r5, d0
 8007c00:	f7ff ff50 	bl	8007aa4 <__b2d>
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	6919      	ldr	r1, [r3, #16]
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	1ac9      	subs	r1, r1, r3
 8007c0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	ec5b ab10 	vmov	sl, fp, d0
 8007c18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bfce      	itee	gt
 8007c20:	462a      	movgt	r2, r5
 8007c22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c26:	465a      	movle	r2, fp
 8007c28:	462f      	mov	r7, r5
 8007c2a:	46d9      	mov	r9, fp
 8007c2c:	bfcc      	ite	gt
 8007c2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007c36:	464b      	mov	r3, r9
 8007c38:	4652      	mov	r2, sl
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fe05 	bl	800084c <__aeabi_ddiv>
 8007c42:	ec41 0b10 	vmov	d0, r0, r1
 8007c46:	b005      	add	sp, #20
 8007c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c4c <__copybits>:
 8007c4c:	3901      	subs	r1, #1
 8007c4e:	b570      	push	{r4, r5, r6, lr}
 8007c50:	1149      	asrs	r1, r1, #5
 8007c52:	6914      	ldr	r4, [r2, #16]
 8007c54:	3101      	adds	r1, #1
 8007c56:	f102 0314 	add.w	r3, r2, #20
 8007c5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c62:	1f05      	subs	r5, r0, #4
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	d30c      	bcc.n	8007c82 <__copybits+0x36>
 8007c68:	1aa3      	subs	r3, r4, r2
 8007c6a:	3b11      	subs	r3, #17
 8007c6c:	f023 0303 	bic.w	r3, r3, #3
 8007c70:	3211      	adds	r2, #17
 8007c72:	42a2      	cmp	r2, r4
 8007c74:	bf88      	it	hi
 8007c76:	2300      	movhi	r3, #0
 8007c78:	4418      	add	r0, r3
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4288      	cmp	r0, r1
 8007c7e:	d305      	bcc.n	8007c8c <__copybits+0x40>
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
 8007c82:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c86:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c8a:	e7eb      	b.n	8007c64 <__copybits+0x18>
 8007c8c:	f840 3b04 	str.w	r3, [r0], #4
 8007c90:	e7f4      	b.n	8007c7c <__copybits+0x30>

08007c92 <__any_on>:
 8007c92:	f100 0214 	add.w	r2, r0, #20
 8007c96:	6900      	ldr	r0, [r0, #16]
 8007c98:	114b      	asrs	r3, r1, #5
 8007c9a:	4298      	cmp	r0, r3
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	db11      	blt.n	8007cc4 <__any_on+0x32>
 8007ca0:	dd0a      	ble.n	8007cb8 <__any_on+0x26>
 8007ca2:	f011 011f 	ands.w	r1, r1, #31
 8007ca6:	d007      	beq.n	8007cb8 <__any_on+0x26>
 8007ca8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007cac:	fa24 f001 	lsr.w	r0, r4, r1
 8007cb0:	fa00 f101 	lsl.w	r1, r0, r1
 8007cb4:	428c      	cmp	r4, r1
 8007cb6:	d10b      	bne.n	8007cd0 <__any_on+0x3e>
 8007cb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d803      	bhi.n	8007cc8 <__any_on+0x36>
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	bd10      	pop	{r4, pc}
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	e7f7      	b.n	8007cb8 <__any_on+0x26>
 8007cc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	d0f5      	beq.n	8007cbc <__any_on+0x2a>
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	e7f6      	b.n	8007cc2 <__any_on+0x30>

08007cd4 <sulp>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	460d      	mov	r5, r1
 8007cda:	ec45 4b10 	vmov	d0, r4, r5
 8007cde:	4616      	mov	r6, r2
 8007ce0:	f7ff feba 	bl	8007a58 <__ulp>
 8007ce4:	ec51 0b10 	vmov	r0, r1, d0
 8007ce8:	b17e      	cbz	r6, 8007d0a <sulp+0x36>
 8007cea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	dd09      	ble.n	8007d0a <sulp+0x36>
 8007cf6:	051b      	lsls	r3, r3, #20
 8007cf8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007cfc:	2400      	movs	r4, #0
 8007cfe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007d02:	4622      	mov	r2, r4
 8007d04:	462b      	mov	r3, r5
 8007d06:	f7f8 fc77 	bl	80005f8 <__aeabi_dmul>
 8007d0a:	ec41 0b10 	vmov	d0, r0, r1
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}

08007d10 <_strtod_l>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	b09f      	sub	sp, #124	@ 0x7c
 8007d16:	460c      	mov	r4, r1
 8007d18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007d1e:	9005      	str	r0, [sp, #20]
 8007d20:	f04f 0a00 	mov.w	sl, #0
 8007d24:	f04f 0b00 	mov.w	fp, #0
 8007d28:	460a      	mov	r2, r1
 8007d2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d2c:	7811      	ldrb	r1, [r2, #0]
 8007d2e:	292b      	cmp	r1, #43	@ 0x2b
 8007d30:	d04a      	beq.n	8007dc8 <_strtod_l+0xb8>
 8007d32:	d838      	bhi.n	8007da6 <_strtod_l+0x96>
 8007d34:	290d      	cmp	r1, #13
 8007d36:	d832      	bhi.n	8007d9e <_strtod_l+0x8e>
 8007d38:	2908      	cmp	r1, #8
 8007d3a:	d832      	bhi.n	8007da2 <_strtod_l+0x92>
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d03b      	beq.n	8007db8 <_strtod_l+0xa8>
 8007d40:	2200      	movs	r2, #0
 8007d42:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007d46:	782a      	ldrb	r2, [r5, #0]
 8007d48:	2a30      	cmp	r2, #48	@ 0x30
 8007d4a:	f040 80b2 	bne.w	8007eb2 <_strtod_l+0x1a2>
 8007d4e:	786a      	ldrb	r2, [r5, #1]
 8007d50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d54:	2a58      	cmp	r2, #88	@ 0x58
 8007d56:	d16e      	bne.n	8007e36 <_strtod_l+0x126>
 8007d58:	9302      	str	r3, [sp, #8]
 8007d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	4a8f      	ldr	r2, [pc, #572]	@ (8007fa0 <_strtod_l+0x290>)
 8007d64:	9805      	ldr	r0, [sp, #20]
 8007d66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d68:	a919      	add	r1, sp, #100	@ 0x64
 8007d6a:	f001 f927 	bl	8008fbc <__gethex>
 8007d6e:	f010 060f 	ands.w	r6, r0, #15
 8007d72:	4604      	mov	r4, r0
 8007d74:	d005      	beq.n	8007d82 <_strtod_l+0x72>
 8007d76:	2e06      	cmp	r6, #6
 8007d78:	d128      	bne.n	8007dcc <_strtod_l+0xbc>
 8007d7a:	3501      	adds	r5, #1
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007d80:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f040 858e 	bne.w	80088a6 <_strtod_l+0xb96>
 8007d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8c:	b1cb      	cbz	r3, 8007dc2 <_strtod_l+0xb2>
 8007d8e:	4652      	mov	r2, sl
 8007d90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007d94:	ec43 2b10 	vmov	d0, r2, r3
 8007d98:	b01f      	add	sp, #124	@ 0x7c
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	2920      	cmp	r1, #32
 8007da0:	d1ce      	bne.n	8007d40 <_strtod_l+0x30>
 8007da2:	3201      	adds	r2, #1
 8007da4:	e7c1      	b.n	8007d2a <_strtod_l+0x1a>
 8007da6:	292d      	cmp	r1, #45	@ 0x2d
 8007da8:	d1ca      	bne.n	8007d40 <_strtod_l+0x30>
 8007daa:	2101      	movs	r1, #1
 8007dac:	910e      	str	r1, [sp, #56]	@ 0x38
 8007dae:	1c51      	adds	r1, r2, #1
 8007db0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007db2:	7852      	ldrb	r2, [r2, #1]
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	d1c5      	bne.n	8007d44 <_strtod_l+0x34>
 8007db8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007dba:	9419      	str	r4, [sp, #100]	@ 0x64
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 8570 	bne.w	80088a2 <_strtod_l+0xb92>
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	e7e5      	b.n	8007d94 <_strtod_l+0x84>
 8007dc8:	2100      	movs	r1, #0
 8007dca:	e7ef      	b.n	8007dac <_strtod_l+0x9c>
 8007dcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007dce:	b13a      	cbz	r2, 8007de0 <_strtod_l+0xd0>
 8007dd0:	2135      	movs	r1, #53	@ 0x35
 8007dd2:	a81c      	add	r0, sp, #112	@ 0x70
 8007dd4:	f7ff ff3a 	bl	8007c4c <__copybits>
 8007dd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dda:	9805      	ldr	r0, [sp, #20]
 8007ddc:	f7ff fb10 	bl	8007400 <_Bfree>
 8007de0:	3e01      	subs	r6, #1
 8007de2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007de4:	2e04      	cmp	r6, #4
 8007de6:	d806      	bhi.n	8007df6 <_strtod_l+0xe6>
 8007de8:	e8df f006 	tbb	[pc, r6]
 8007dec:	201d0314 	.word	0x201d0314
 8007df0:	14          	.byte	0x14
 8007df1:	00          	.byte	0x00
 8007df2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007df6:	05e1      	lsls	r1, r4, #23
 8007df8:	bf48      	it	mi
 8007dfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e02:	0d1b      	lsrs	r3, r3, #20
 8007e04:	051b      	lsls	r3, r3, #20
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1bb      	bne.n	8007d82 <_strtod_l+0x72>
 8007e0a:	f7fe fb2d 	bl	8006468 <__errno>
 8007e0e:	2322      	movs	r3, #34	@ 0x22
 8007e10:	6003      	str	r3, [r0, #0]
 8007e12:	e7b6      	b.n	8007d82 <_strtod_l+0x72>
 8007e14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007e18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007e1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007e20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007e24:	e7e7      	b.n	8007df6 <_strtod_l+0xe6>
 8007e26:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007fa8 <_strtod_l+0x298>
 8007e2a:	e7e4      	b.n	8007df6 <_strtod_l+0xe6>
 8007e2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007e30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007e34:	e7df      	b.n	8007df6 <_strtod_l+0xe6>
 8007e36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b30      	cmp	r3, #48	@ 0x30
 8007e40:	d0f9      	beq.n	8007e36 <_strtod_l+0x126>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d09d      	beq.n	8007d82 <_strtod_l+0x72>
 8007e46:	2301      	movs	r3, #1
 8007e48:	2700      	movs	r7, #0
 8007e4a:	9308      	str	r3, [sp, #32]
 8007e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e50:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007e52:	46b9      	mov	r9, r7
 8007e54:	220a      	movs	r2, #10
 8007e56:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007e58:	7805      	ldrb	r5, [r0, #0]
 8007e5a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007e5e:	b2d9      	uxtb	r1, r3
 8007e60:	2909      	cmp	r1, #9
 8007e62:	d928      	bls.n	8007eb6 <_strtod_l+0x1a6>
 8007e64:	494f      	ldr	r1, [pc, #316]	@ (8007fa4 <_strtod_l+0x294>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	f000 ffd6 	bl	8008e18 <strncmp>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d032      	beq.n	8007ed6 <_strtod_l+0x1c6>
 8007e70:	2000      	movs	r0, #0
 8007e72:	462a      	mov	r2, r5
 8007e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e76:	464d      	mov	r5, r9
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2a65      	cmp	r2, #101	@ 0x65
 8007e7c:	d001      	beq.n	8007e82 <_strtod_l+0x172>
 8007e7e:	2a45      	cmp	r2, #69	@ 0x45
 8007e80:	d114      	bne.n	8007eac <_strtod_l+0x19c>
 8007e82:	b91d      	cbnz	r5, 8007e8c <_strtod_l+0x17c>
 8007e84:	9a08      	ldr	r2, [sp, #32]
 8007e86:	4302      	orrs	r2, r0
 8007e88:	d096      	beq.n	8007db8 <_strtod_l+0xa8>
 8007e8a:	2500      	movs	r5, #0
 8007e8c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007e8e:	1c62      	adds	r2, r4, #1
 8007e90:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e92:	7862      	ldrb	r2, [r4, #1]
 8007e94:	2a2b      	cmp	r2, #43	@ 0x2b
 8007e96:	d07a      	beq.n	8007f8e <_strtod_l+0x27e>
 8007e98:	2a2d      	cmp	r2, #45	@ 0x2d
 8007e9a:	d07e      	beq.n	8007f9a <_strtod_l+0x28a>
 8007e9c:	f04f 0c00 	mov.w	ip, #0
 8007ea0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007ea4:	2909      	cmp	r1, #9
 8007ea6:	f240 8085 	bls.w	8007fb4 <_strtod_l+0x2a4>
 8007eaa:	9419      	str	r4, [sp, #100]	@ 0x64
 8007eac:	f04f 0800 	mov.w	r8, #0
 8007eb0:	e0a5      	b.n	8007ffe <_strtod_l+0x2ee>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e7c8      	b.n	8007e48 <_strtod_l+0x138>
 8007eb6:	f1b9 0f08 	cmp.w	r9, #8
 8007eba:	bfd8      	it	le
 8007ebc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007ebe:	f100 0001 	add.w	r0, r0, #1
 8007ec2:	bfda      	itte	le
 8007ec4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ec8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007eca:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007ece:	f109 0901 	add.w	r9, r9, #1
 8007ed2:	9019      	str	r0, [sp, #100]	@ 0x64
 8007ed4:	e7bf      	b.n	8007e56 <_strtod_l+0x146>
 8007ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	9219      	str	r2, [sp, #100]	@ 0x64
 8007edc:	785a      	ldrb	r2, [r3, #1]
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	d03b      	beq.n	8007f5c <_strtod_l+0x24c>
 8007ee4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ee6:	464d      	mov	r5, r9
 8007ee8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007eec:	2b09      	cmp	r3, #9
 8007eee:	d912      	bls.n	8007f16 <_strtod_l+0x206>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7c2      	b.n	8007e7a <_strtod_l+0x16a>
 8007ef4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007efa:	785a      	ldrb	r2, [r3, #1]
 8007efc:	3001      	adds	r0, #1
 8007efe:	2a30      	cmp	r2, #48	@ 0x30
 8007f00:	d0f8      	beq.n	8007ef4 <_strtod_l+0x1e4>
 8007f02:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	f200 84d2 	bhi.w	80088b0 <_strtod_l+0xba0>
 8007f0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f0e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f10:	2000      	movs	r0, #0
 8007f12:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f14:	4605      	mov	r5, r0
 8007f16:	3a30      	subs	r2, #48	@ 0x30
 8007f18:	f100 0301 	add.w	r3, r0, #1
 8007f1c:	d018      	beq.n	8007f50 <_strtod_l+0x240>
 8007f1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f20:	4419      	add	r1, r3
 8007f22:	910a      	str	r1, [sp, #40]	@ 0x28
 8007f24:	462e      	mov	r6, r5
 8007f26:	f04f 0e0a 	mov.w	lr, #10
 8007f2a:	1c71      	adds	r1, r6, #1
 8007f2c:	eba1 0c05 	sub.w	ip, r1, r5
 8007f30:	4563      	cmp	r3, ip
 8007f32:	dc15      	bgt.n	8007f60 <_strtod_l+0x250>
 8007f34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007f38:	182b      	adds	r3, r5, r0
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	f105 0501 	add.w	r5, r5, #1
 8007f40:	4405      	add	r5, r0
 8007f42:	dc1a      	bgt.n	8007f7a <_strtod_l+0x26a>
 8007f44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f46:	230a      	movs	r3, #10
 8007f48:	fb03 2301 	mla	r3, r3, r1, r2
 8007f4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f52:	1c51      	adds	r1, r2, #1
 8007f54:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f56:	7852      	ldrb	r2, [r2, #1]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	e7c5      	b.n	8007ee8 <_strtod_l+0x1d8>
 8007f5c:	4648      	mov	r0, r9
 8007f5e:	e7ce      	b.n	8007efe <_strtod_l+0x1ee>
 8007f60:	2e08      	cmp	r6, #8
 8007f62:	dc05      	bgt.n	8007f70 <_strtod_l+0x260>
 8007f64:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007f66:	fb0e f606 	mul.w	r6, lr, r6
 8007f6a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	e7dc      	b.n	8007f2a <_strtod_l+0x21a>
 8007f70:	2910      	cmp	r1, #16
 8007f72:	bfd8      	it	le
 8007f74:	fb0e f707 	mulle.w	r7, lr, r7
 8007f78:	e7f8      	b.n	8007f6c <_strtod_l+0x25c>
 8007f7a:	2b0f      	cmp	r3, #15
 8007f7c:	bfdc      	itt	le
 8007f7e:	230a      	movle	r3, #10
 8007f80:	fb03 2707 	mlale	r7, r3, r7, r2
 8007f84:	e7e3      	b.n	8007f4e <_strtod_l+0x23e>
 8007f86:	2300      	movs	r3, #0
 8007f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e77a      	b.n	8007e84 <_strtod_l+0x174>
 8007f8e:	f04f 0c00 	mov.w	ip, #0
 8007f92:	1ca2      	adds	r2, r4, #2
 8007f94:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f96:	78a2      	ldrb	r2, [r4, #2]
 8007f98:	e782      	b.n	8007ea0 <_strtod_l+0x190>
 8007f9a:	f04f 0c01 	mov.w	ip, #1
 8007f9e:	e7f8      	b.n	8007f92 <_strtod_l+0x282>
 8007fa0:	0800a26c 	.word	0x0800a26c
 8007fa4:	0800a0a3 	.word	0x0800a0a3
 8007fa8:	7ff00000 	.word	0x7ff00000
 8007fac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fae:	1c51      	adds	r1, r2, #1
 8007fb0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007fb2:	7852      	ldrb	r2, [r2, #1]
 8007fb4:	2a30      	cmp	r2, #48	@ 0x30
 8007fb6:	d0f9      	beq.n	8007fac <_strtod_l+0x29c>
 8007fb8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007fbc:	2908      	cmp	r1, #8
 8007fbe:	f63f af75 	bhi.w	8007eac <_strtod_l+0x19c>
 8007fc2:	3a30      	subs	r2, #48	@ 0x30
 8007fc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fc6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fc8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007fca:	f04f 080a 	mov.w	r8, #10
 8007fce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fd0:	1c56      	adds	r6, r2, #1
 8007fd2:	9619      	str	r6, [sp, #100]	@ 0x64
 8007fd4:	7852      	ldrb	r2, [r2, #1]
 8007fd6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007fda:	f1be 0f09 	cmp.w	lr, #9
 8007fde:	d939      	bls.n	8008054 <_strtod_l+0x344>
 8007fe0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007fe2:	1a76      	subs	r6, r6, r1
 8007fe4:	2e08      	cmp	r6, #8
 8007fe6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007fea:	dc03      	bgt.n	8007ff4 <_strtod_l+0x2e4>
 8007fec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fee:	4588      	cmp	r8, r1
 8007ff0:	bfa8      	it	ge
 8007ff2:	4688      	movge	r8, r1
 8007ff4:	f1bc 0f00 	cmp.w	ip, #0
 8007ff8:	d001      	beq.n	8007ffe <_strtod_l+0x2ee>
 8007ffa:	f1c8 0800 	rsb	r8, r8, #0
 8007ffe:	2d00      	cmp	r5, #0
 8008000:	d14e      	bne.n	80080a0 <_strtod_l+0x390>
 8008002:	9908      	ldr	r1, [sp, #32]
 8008004:	4308      	orrs	r0, r1
 8008006:	f47f aebc 	bne.w	8007d82 <_strtod_l+0x72>
 800800a:	2b00      	cmp	r3, #0
 800800c:	f47f aed4 	bne.w	8007db8 <_strtod_l+0xa8>
 8008010:	2a69      	cmp	r2, #105	@ 0x69
 8008012:	d028      	beq.n	8008066 <_strtod_l+0x356>
 8008014:	dc25      	bgt.n	8008062 <_strtod_l+0x352>
 8008016:	2a49      	cmp	r2, #73	@ 0x49
 8008018:	d025      	beq.n	8008066 <_strtod_l+0x356>
 800801a:	2a4e      	cmp	r2, #78	@ 0x4e
 800801c:	f47f aecc 	bne.w	8007db8 <_strtod_l+0xa8>
 8008020:	499a      	ldr	r1, [pc, #616]	@ (800828c <_strtod_l+0x57c>)
 8008022:	a819      	add	r0, sp, #100	@ 0x64
 8008024:	f001 f9ec 	bl	8009400 <__match>
 8008028:	2800      	cmp	r0, #0
 800802a:	f43f aec5 	beq.w	8007db8 <_strtod_l+0xa8>
 800802e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b28      	cmp	r3, #40	@ 0x28
 8008034:	d12e      	bne.n	8008094 <_strtod_l+0x384>
 8008036:	4996      	ldr	r1, [pc, #600]	@ (8008290 <_strtod_l+0x580>)
 8008038:	aa1c      	add	r2, sp, #112	@ 0x70
 800803a:	a819      	add	r0, sp, #100	@ 0x64
 800803c:	f001 f9f4 	bl	8009428 <__hexnan>
 8008040:	2805      	cmp	r0, #5
 8008042:	d127      	bne.n	8008094 <_strtod_l+0x384>
 8008044:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008046:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800804a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800804e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008052:	e696      	b.n	8007d82 <_strtod_l+0x72>
 8008054:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008056:	fb08 2101 	mla	r1, r8, r1, r2
 800805a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800805e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008060:	e7b5      	b.n	8007fce <_strtod_l+0x2be>
 8008062:	2a6e      	cmp	r2, #110	@ 0x6e
 8008064:	e7da      	b.n	800801c <_strtod_l+0x30c>
 8008066:	498b      	ldr	r1, [pc, #556]	@ (8008294 <_strtod_l+0x584>)
 8008068:	a819      	add	r0, sp, #100	@ 0x64
 800806a:	f001 f9c9 	bl	8009400 <__match>
 800806e:	2800      	cmp	r0, #0
 8008070:	f43f aea2 	beq.w	8007db8 <_strtod_l+0xa8>
 8008074:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008076:	4988      	ldr	r1, [pc, #544]	@ (8008298 <_strtod_l+0x588>)
 8008078:	3b01      	subs	r3, #1
 800807a:	a819      	add	r0, sp, #100	@ 0x64
 800807c:	9319      	str	r3, [sp, #100]	@ 0x64
 800807e:	f001 f9bf 	bl	8009400 <__match>
 8008082:	b910      	cbnz	r0, 800808a <_strtod_l+0x37a>
 8008084:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008086:	3301      	adds	r3, #1
 8008088:	9319      	str	r3, [sp, #100]	@ 0x64
 800808a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80082a8 <_strtod_l+0x598>
 800808e:	f04f 0a00 	mov.w	sl, #0
 8008092:	e676      	b.n	8007d82 <_strtod_l+0x72>
 8008094:	4881      	ldr	r0, [pc, #516]	@ (800829c <_strtod_l+0x58c>)
 8008096:	f000 feef 	bl	8008e78 <nan>
 800809a:	ec5b ab10 	vmov	sl, fp, d0
 800809e:	e670      	b.n	8007d82 <_strtod_l+0x72>
 80080a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80080a4:	eba8 0303 	sub.w	r3, r8, r3
 80080a8:	f1b9 0f00 	cmp.w	r9, #0
 80080ac:	bf08      	it	eq
 80080ae:	46a9      	moveq	r9, r5
 80080b0:	2d10      	cmp	r5, #16
 80080b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b4:	462c      	mov	r4, r5
 80080b6:	bfa8      	it	ge
 80080b8:	2410      	movge	r4, #16
 80080ba:	f7f8 fa23 	bl	8000504 <__aeabi_ui2d>
 80080be:	2d09      	cmp	r5, #9
 80080c0:	4682      	mov	sl, r0
 80080c2:	468b      	mov	fp, r1
 80080c4:	dc13      	bgt.n	80080ee <_strtod_l+0x3de>
 80080c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f43f ae5a 	beq.w	8007d82 <_strtod_l+0x72>
 80080ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d0:	dd78      	ble.n	80081c4 <_strtod_l+0x4b4>
 80080d2:	2b16      	cmp	r3, #22
 80080d4:	dc5f      	bgt.n	8008196 <_strtod_l+0x486>
 80080d6:	4972      	ldr	r1, [pc, #456]	@ (80082a0 <_strtod_l+0x590>)
 80080d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e0:	4652      	mov	r2, sl
 80080e2:	465b      	mov	r3, fp
 80080e4:	f7f8 fa88 	bl	80005f8 <__aeabi_dmul>
 80080e8:	4682      	mov	sl, r0
 80080ea:	468b      	mov	fp, r1
 80080ec:	e649      	b.n	8007d82 <_strtod_l+0x72>
 80080ee:	4b6c      	ldr	r3, [pc, #432]	@ (80082a0 <_strtod_l+0x590>)
 80080f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80080f8:	f7f8 fa7e 	bl	80005f8 <__aeabi_dmul>
 80080fc:	4682      	mov	sl, r0
 80080fe:	4638      	mov	r0, r7
 8008100:	468b      	mov	fp, r1
 8008102:	f7f8 f9ff 	bl	8000504 <__aeabi_ui2d>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4650      	mov	r0, sl
 800810c:	4659      	mov	r1, fp
 800810e:	f7f8 f8bd 	bl	800028c <__adddf3>
 8008112:	2d0f      	cmp	r5, #15
 8008114:	4682      	mov	sl, r0
 8008116:	468b      	mov	fp, r1
 8008118:	ddd5      	ble.n	80080c6 <_strtod_l+0x3b6>
 800811a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800811c:	1b2c      	subs	r4, r5, r4
 800811e:	441c      	add	r4, r3
 8008120:	2c00      	cmp	r4, #0
 8008122:	f340 8093 	ble.w	800824c <_strtod_l+0x53c>
 8008126:	f014 030f 	ands.w	r3, r4, #15
 800812a:	d00a      	beq.n	8008142 <_strtod_l+0x432>
 800812c:	495c      	ldr	r1, [pc, #368]	@ (80082a0 <_strtod_l+0x590>)
 800812e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008132:	4652      	mov	r2, sl
 8008134:	465b      	mov	r3, fp
 8008136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813a:	f7f8 fa5d 	bl	80005f8 <__aeabi_dmul>
 800813e:	4682      	mov	sl, r0
 8008140:	468b      	mov	fp, r1
 8008142:	f034 040f 	bics.w	r4, r4, #15
 8008146:	d073      	beq.n	8008230 <_strtod_l+0x520>
 8008148:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800814c:	dd49      	ble.n	80081e2 <_strtod_l+0x4d2>
 800814e:	2400      	movs	r4, #0
 8008150:	46a0      	mov	r8, r4
 8008152:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008154:	46a1      	mov	r9, r4
 8008156:	9a05      	ldr	r2, [sp, #20]
 8008158:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80082a8 <_strtod_l+0x598>
 800815c:	2322      	movs	r3, #34	@ 0x22
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	f04f 0a00 	mov.w	sl, #0
 8008164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008166:	2b00      	cmp	r3, #0
 8008168:	f43f ae0b 	beq.w	8007d82 <_strtod_l+0x72>
 800816c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800816e:	9805      	ldr	r0, [sp, #20]
 8008170:	f7ff f946 	bl	8007400 <_Bfree>
 8008174:	9805      	ldr	r0, [sp, #20]
 8008176:	4649      	mov	r1, r9
 8008178:	f7ff f942 	bl	8007400 <_Bfree>
 800817c:	9805      	ldr	r0, [sp, #20]
 800817e:	4641      	mov	r1, r8
 8008180:	f7ff f93e 	bl	8007400 <_Bfree>
 8008184:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008186:	9805      	ldr	r0, [sp, #20]
 8008188:	f7ff f93a 	bl	8007400 <_Bfree>
 800818c:	9805      	ldr	r0, [sp, #20]
 800818e:	4621      	mov	r1, r4
 8008190:	f7ff f936 	bl	8007400 <_Bfree>
 8008194:	e5f5      	b.n	8007d82 <_strtod_l+0x72>
 8008196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008198:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800819c:	4293      	cmp	r3, r2
 800819e:	dbbc      	blt.n	800811a <_strtod_l+0x40a>
 80081a0:	4c3f      	ldr	r4, [pc, #252]	@ (80082a0 <_strtod_l+0x590>)
 80081a2:	f1c5 050f 	rsb	r5, r5, #15
 80081a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80081aa:	4652      	mov	r2, sl
 80081ac:	465b      	mov	r3, fp
 80081ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b2:	f7f8 fa21 	bl	80005f8 <__aeabi_dmul>
 80081b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b8:	1b5d      	subs	r5, r3, r5
 80081ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80081be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081c2:	e78f      	b.n	80080e4 <_strtod_l+0x3d4>
 80081c4:	3316      	adds	r3, #22
 80081c6:	dba8      	blt.n	800811a <_strtod_l+0x40a>
 80081c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ca:	eba3 0808 	sub.w	r8, r3, r8
 80081ce:	4b34      	ldr	r3, [pc, #208]	@ (80082a0 <_strtod_l+0x590>)
 80081d0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80081d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80081d8:	4650      	mov	r0, sl
 80081da:	4659      	mov	r1, fp
 80081dc:	f7f8 fb36 	bl	800084c <__aeabi_ddiv>
 80081e0:	e782      	b.n	80080e8 <_strtod_l+0x3d8>
 80081e2:	2300      	movs	r3, #0
 80081e4:	4f2f      	ldr	r7, [pc, #188]	@ (80082a4 <_strtod_l+0x594>)
 80081e6:	1124      	asrs	r4, r4, #4
 80081e8:	4650      	mov	r0, sl
 80081ea:	4659      	mov	r1, fp
 80081ec:	461e      	mov	r6, r3
 80081ee:	2c01      	cmp	r4, #1
 80081f0:	dc21      	bgt.n	8008236 <_strtod_l+0x526>
 80081f2:	b10b      	cbz	r3, 80081f8 <_strtod_l+0x4e8>
 80081f4:	4682      	mov	sl, r0
 80081f6:	468b      	mov	fp, r1
 80081f8:	492a      	ldr	r1, [pc, #168]	@ (80082a4 <_strtod_l+0x594>)
 80081fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80081fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008202:	4652      	mov	r2, sl
 8008204:	465b      	mov	r3, fp
 8008206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800820a:	f7f8 f9f5 	bl	80005f8 <__aeabi_dmul>
 800820e:	4b26      	ldr	r3, [pc, #152]	@ (80082a8 <_strtod_l+0x598>)
 8008210:	460a      	mov	r2, r1
 8008212:	400b      	ands	r3, r1
 8008214:	4925      	ldr	r1, [pc, #148]	@ (80082ac <_strtod_l+0x59c>)
 8008216:	428b      	cmp	r3, r1
 8008218:	4682      	mov	sl, r0
 800821a:	d898      	bhi.n	800814e <_strtod_l+0x43e>
 800821c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008220:	428b      	cmp	r3, r1
 8008222:	bf86      	itte	hi
 8008224:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80082b0 <_strtod_l+0x5a0>
 8008228:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800822c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008230:	2300      	movs	r3, #0
 8008232:	9308      	str	r3, [sp, #32]
 8008234:	e076      	b.n	8008324 <_strtod_l+0x614>
 8008236:	07e2      	lsls	r2, r4, #31
 8008238:	d504      	bpl.n	8008244 <_strtod_l+0x534>
 800823a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800823e:	f7f8 f9db 	bl	80005f8 <__aeabi_dmul>
 8008242:	2301      	movs	r3, #1
 8008244:	3601      	adds	r6, #1
 8008246:	1064      	asrs	r4, r4, #1
 8008248:	3708      	adds	r7, #8
 800824a:	e7d0      	b.n	80081ee <_strtod_l+0x4de>
 800824c:	d0f0      	beq.n	8008230 <_strtod_l+0x520>
 800824e:	4264      	negs	r4, r4
 8008250:	f014 020f 	ands.w	r2, r4, #15
 8008254:	d00a      	beq.n	800826c <_strtod_l+0x55c>
 8008256:	4b12      	ldr	r3, [pc, #72]	@ (80082a0 <_strtod_l+0x590>)
 8008258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800825c:	4650      	mov	r0, sl
 800825e:	4659      	mov	r1, fp
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 faf2 	bl	800084c <__aeabi_ddiv>
 8008268:	4682      	mov	sl, r0
 800826a:	468b      	mov	fp, r1
 800826c:	1124      	asrs	r4, r4, #4
 800826e:	d0df      	beq.n	8008230 <_strtod_l+0x520>
 8008270:	2c1f      	cmp	r4, #31
 8008272:	dd1f      	ble.n	80082b4 <_strtod_l+0x5a4>
 8008274:	2400      	movs	r4, #0
 8008276:	46a0      	mov	r8, r4
 8008278:	940b      	str	r4, [sp, #44]	@ 0x2c
 800827a:	46a1      	mov	r9, r4
 800827c:	9a05      	ldr	r2, [sp, #20]
 800827e:	2322      	movs	r3, #34	@ 0x22
 8008280:	f04f 0a00 	mov.w	sl, #0
 8008284:	f04f 0b00 	mov.w	fp, #0
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	e76b      	b.n	8008164 <_strtod_l+0x454>
 800828c:	08009f91 	.word	0x08009f91
 8008290:	0800a258 	.word	0x0800a258
 8008294:	08009f89 	.word	0x08009f89
 8008298:	08009fc0 	.word	0x08009fc0
 800829c:	0800a0f9 	.word	0x0800a0f9
 80082a0:	0800a190 	.word	0x0800a190
 80082a4:	0800a168 	.word	0x0800a168
 80082a8:	7ff00000 	.word	0x7ff00000
 80082ac:	7ca00000 	.word	0x7ca00000
 80082b0:	7fefffff 	.word	0x7fefffff
 80082b4:	f014 0310 	ands.w	r3, r4, #16
 80082b8:	bf18      	it	ne
 80082ba:	236a      	movne	r3, #106	@ 0x6a
 80082bc:	4ea9      	ldr	r6, [pc, #676]	@ (8008564 <_strtod_l+0x854>)
 80082be:	9308      	str	r3, [sp, #32]
 80082c0:	4650      	mov	r0, sl
 80082c2:	4659      	mov	r1, fp
 80082c4:	2300      	movs	r3, #0
 80082c6:	07e7      	lsls	r7, r4, #31
 80082c8:	d504      	bpl.n	80082d4 <_strtod_l+0x5c4>
 80082ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082ce:	f7f8 f993 	bl	80005f8 <__aeabi_dmul>
 80082d2:	2301      	movs	r3, #1
 80082d4:	1064      	asrs	r4, r4, #1
 80082d6:	f106 0608 	add.w	r6, r6, #8
 80082da:	d1f4      	bne.n	80082c6 <_strtod_l+0x5b6>
 80082dc:	b10b      	cbz	r3, 80082e2 <_strtod_l+0x5d2>
 80082de:	4682      	mov	sl, r0
 80082e0:	468b      	mov	fp, r1
 80082e2:	9b08      	ldr	r3, [sp, #32]
 80082e4:	b1b3      	cbz	r3, 8008314 <_strtod_l+0x604>
 80082e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80082ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	4659      	mov	r1, fp
 80082f2:	dd0f      	ble.n	8008314 <_strtod_l+0x604>
 80082f4:	2b1f      	cmp	r3, #31
 80082f6:	dd56      	ble.n	80083a6 <_strtod_l+0x696>
 80082f8:	2b34      	cmp	r3, #52	@ 0x34
 80082fa:	bfde      	ittt	le
 80082fc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008300:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008304:	4093      	lslle	r3, r2
 8008306:	f04f 0a00 	mov.w	sl, #0
 800830a:	bfcc      	ite	gt
 800830c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008310:	ea03 0b01 	andle.w	fp, r3, r1
 8008314:	2200      	movs	r2, #0
 8008316:	2300      	movs	r3, #0
 8008318:	4650      	mov	r0, sl
 800831a:	4659      	mov	r1, fp
 800831c:	f7f8 fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008320:	2800      	cmp	r0, #0
 8008322:	d1a7      	bne.n	8008274 <_strtod_l+0x564>
 8008324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800832a:	9805      	ldr	r0, [sp, #20]
 800832c:	462b      	mov	r3, r5
 800832e:	464a      	mov	r2, r9
 8008330:	f7ff f8ce 	bl	80074d0 <__s2b>
 8008334:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f af09 	beq.w	800814e <_strtod_l+0x43e>
 800833c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008340:	2a00      	cmp	r2, #0
 8008342:	eba3 0308 	sub.w	r3, r3, r8
 8008346:	bfa8      	it	ge
 8008348:	2300      	movge	r3, #0
 800834a:	9312      	str	r3, [sp, #72]	@ 0x48
 800834c:	2400      	movs	r4, #0
 800834e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008352:	9316      	str	r3, [sp, #88]	@ 0x58
 8008354:	46a0      	mov	r8, r4
 8008356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008358:	9805      	ldr	r0, [sp, #20]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	f7ff f810 	bl	8007380 <_Balloc>
 8008360:	4681      	mov	r9, r0
 8008362:	2800      	cmp	r0, #0
 8008364:	f43f aef7 	beq.w	8008156 <_strtod_l+0x446>
 8008368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	3202      	adds	r2, #2
 800836e:	f103 010c 	add.w	r1, r3, #12
 8008372:	0092      	lsls	r2, r2, #2
 8008374:	300c      	adds	r0, #12
 8008376:	f000 fd71 	bl	8008e5c <memcpy>
 800837a:	ec4b ab10 	vmov	d0, sl, fp
 800837e:	9805      	ldr	r0, [sp, #20]
 8008380:	aa1c      	add	r2, sp, #112	@ 0x70
 8008382:	a91b      	add	r1, sp, #108	@ 0x6c
 8008384:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008388:	f7ff fbd6 	bl	8007b38 <__d2b>
 800838c:	901a      	str	r0, [sp, #104]	@ 0x68
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f aee1 	beq.w	8008156 <_strtod_l+0x446>
 8008394:	9805      	ldr	r0, [sp, #20]
 8008396:	2101      	movs	r1, #1
 8008398:	f7ff f930 	bl	80075fc <__i2b>
 800839c:	4680      	mov	r8, r0
 800839e:	b948      	cbnz	r0, 80083b4 <_strtod_l+0x6a4>
 80083a0:	f04f 0800 	mov.w	r8, #0
 80083a4:	e6d7      	b.n	8008156 <_strtod_l+0x446>
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	ea03 0a0a 	and.w	sl, r3, sl
 80083b2:	e7af      	b.n	8008314 <_strtod_l+0x604>
 80083b4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80083b6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	bfab      	itete	ge
 80083bc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80083be:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80083c0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80083c2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80083c4:	bfac      	ite	ge
 80083c6:	18ef      	addge	r7, r5, r3
 80083c8:	1b5e      	sublt	r6, r3, r5
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	1aed      	subs	r5, r5, r3
 80083ce:	4415      	add	r5, r2
 80083d0:	4b65      	ldr	r3, [pc, #404]	@ (8008568 <_strtod_l+0x858>)
 80083d2:	3d01      	subs	r5, #1
 80083d4:	429d      	cmp	r5, r3
 80083d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80083da:	da50      	bge.n	800847e <_strtod_l+0x76e>
 80083dc:	1b5b      	subs	r3, r3, r5
 80083de:	2b1f      	cmp	r3, #31
 80083e0:	eba2 0203 	sub.w	r2, r2, r3
 80083e4:	f04f 0101 	mov.w	r1, #1
 80083e8:	dc3d      	bgt.n	8008466 <_strtod_l+0x756>
 80083ea:	fa01 f303 	lsl.w	r3, r1, r3
 80083ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083f0:	2300      	movs	r3, #0
 80083f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80083f4:	18bd      	adds	r5, r7, r2
 80083f6:	9b08      	ldr	r3, [sp, #32]
 80083f8:	42af      	cmp	r7, r5
 80083fa:	4416      	add	r6, r2
 80083fc:	441e      	add	r6, r3
 80083fe:	463b      	mov	r3, r7
 8008400:	bfa8      	it	ge
 8008402:	462b      	movge	r3, r5
 8008404:	42b3      	cmp	r3, r6
 8008406:	bfa8      	it	ge
 8008408:	4633      	movge	r3, r6
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfc2      	ittt	gt
 800840e:	1aed      	subgt	r5, r5, r3
 8008410:	1af6      	subgt	r6, r6, r3
 8008412:	1aff      	subgt	r7, r7, r3
 8008414:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd16      	ble.n	8008448 <_strtod_l+0x738>
 800841a:	4641      	mov	r1, r8
 800841c:	9805      	ldr	r0, [sp, #20]
 800841e:	461a      	mov	r2, r3
 8008420:	f7ff f9a4 	bl	800776c <__pow5mult>
 8008424:	4680      	mov	r8, r0
 8008426:	2800      	cmp	r0, #0
 8008428:	d0ba      	beq.n	80083a0 <_strtod_l+0x690>
 800842a:	4601      	mov	r1, r0
 800842c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800842e:	9805      	ldr	r0, [sp, #20]
 8008430:	f7ff f8fa 	bl	8007628 <__multiply>
 8008434:	900a      	str	r0, [sp, #40]	@ 0x28
 8008436:	2800      	cmp	r0, #0
 8008438:	f43f ae8d 	beq.w	8008156 <_strtod_l+0x446>
 800843c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800843e:	9805      	ldr	r0, [sp, #20]
 8008440:	f7fe ffde 	bl	8007400 <_Bfree>
 8008444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008446:	931a      	str	r3, [sp, #104]	@ 0x68
 8008448:	2d00      	cmp	r5, #0
 800844a:	dc1d      	bgt.n	8008488 <_strtod_l+0x778>
 800844c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd23      	ble.n	800849a <_strtod_l+0x78a>
 8008452:	4649      	mov	r1, r9
 8008454:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008456:	9805      	ldr	r0, [sp, #20]
 8008458:	f7ff f988 	bl	800776c <__pow5mult>
 800845c:	4681      	mov	r9, r0
 800845e:	b9e0      	cbnz	r0, 800849a <_strtod_l+0x78a>
 8008460:	f04f 0900 	mov.w	r9, #0
 8008464:	e677      	b.n	8008156 <_strtod_l+0x446>
 8008466:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800846a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800846e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008472:	35e2      	adds	r5, #226	@ 0xe2
 8008474:	fa01 f305 	lsl.w	r3, r1, r5
 8008478:	9310      	str	r3, [sp, #64]	@ 0x40
 800847a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800847c:	e7ba      	b.n	80083f4 <_strtod_l+0x6e4>
 800847e:	2300      	movs	r3, #0
 8008480:	9310      	str	r3, [sp, #64]	@ 0x40
 8008482:	2301      	movs	r3, #1
 8008484:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008486:	e7b5      	b.n	80083f4 <_strtod_l+0x6e4>
 8008488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800848a:	9805      	ldr	r0, [sp, #20]
 800848c:	462a      	mov	r2, r5
 800848e:	f7ff f9c7 	bl	8007820 <__lshift>
 8008492:	901a      	str	r0, [sp, #104]	@ 0x68
 8008494:	2800      	cmp	r0, #0
 8008496:	d1d9      	bne.n	800844c <_strtod_l+0x73c>
 8008498:	e65d      	b.n	8008156 <_strtod_l+0x446>
 800849a:	2e00      	cmp	r6, #0
 800849c:	dd07      	ble.n	80084ae <_strtod_l+0x79e>
 800849e:	4649      	mov	r1, r9
 80084a0:	9805      	ldr	r0, [sp, #20]
 80084a2:	4632      	mov	r2, r6
 80084a4:	f7ff f9bc 	bl	8007820 <__lshift>
 80084a8:	4681      	mov	r9, r0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d0d8      	beq.n	8008460 <_strtod_l+0x750>
 80084ae:	2f00      	cmp	r7, #0
 80084b0:	dd08      	ble.n	80084c4 <_strtod_l+0x7b4>
 80084b2:	4641      	mov	r1, r8
 80084b4:	9805      	ldr	r0, [sp, #20]
 80084b6:	463a      	mov	r2, r7
 80084b8:	f7ff f9b2 	bl	8007820 <__lshift>
 80084bc:	4680      	mov	r8, r0
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f ae49 	beq.w	8008156 <_strtod_l+0x446>
 80084c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084c6:	9805      	ldr	r0, [sp, #20]
 80084c8:	464a      	mov	r2, r9
 80084ca:	f7ff fa31 	bl	8007930 <__mdiff>
 80084ce:	4604      	mov	r4, r0
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f43f ae40 	beq.w	8008156 <_strtod_l+0x446>
 80084d6:	68c3      	ldr	r3, [r0, #12]
 80084d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084da:	2300      	movs	r3, #0
 80084dc:	60c3      	str	r3, [r0, #12]
 80084de:	4641      	mov	r1, r8
 80084e0:	f7ff fa0a 	bl	80078f8 <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	da45      	bge.n	8008574 <_strtod_l+0x864>
 80084e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ea:	ea53 030a 	orrs.w	r3, r3, sl
 80084ee:	d16b      	bne.n	80085c8 <_strtod_l+0x8b8>
 80084f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d167      	bne.n	80085c8 <_strtod_l+0x8b8>
 80084f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084fc:	0d1b      	lsrs	r3, r3, #20
 80084fe:	051b      	lsls	r3, r3, #20
 8008500:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008504:	d960      	bls.n	80085c8 <_strtod_l+0x8b8>
 8008506:	6963      	ldr	r3, [r4, #20]
 8008508:	b913      	cbnz	r3, 8008510 <_strtod_l+0x800>
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	2b01      	cmp	r3, #1
 800850e:	dd5b      	ble.n	80085c8 <_strtod_l+0x8b8>
 8008510:	4621      	mov	r1, r4
 8008512:	2201      	movs	r2, #1
 8008514:	9805      	ldr	r0, [sp, #20]
 8008516:	f7ff f983 	bl	8007820 <__lshift>
 800851a:	4641      	mov	r1, r8
 800851c:	4604      	mov	r4, r0
 800851e:	f7ff f9eb 	bl	80078f8 <__mcmp>
 8008522:	2800      	cmp	r0, #0
 8008524:	dd50      	ble.n	80085c8 <_strtod_l+0x8b8>
 8008526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800852a:	9a08      	ldr	r2, [sp, #32]
 800852c:	0d1b      	lsrs	r3, r3, #20
 800852e:	051b      	lsls	r3, r3, #20
 8008530:	2a00      	cmp	r2, #0
 8008532:	d06a      	beq.n	800860a <_strtod_l+0x8fa>
 8008534:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008538:	d867      	bhi.n	800860a <_strtod_l+0x8fa>
 800853a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800853e:	f67f ae9d 	bls.w	800827c <_strtod_l+0x56c>
 8008542:	4b0a      	ldr	r3, [pc, #40]	@ (800856c <_strtod_l+0x85c>)
 8008544:	4650      	mov	r0, sl
 8008546:	4659      	mov	r1, fp
 8008548:	2200      	movs	r2, #0
 800854a:	f7f8 f855 	bl	80005f8 <__aeabi_dmul>
 800854e:	4b08      	ldr	r3, [pc, #32]	@ (8008570 <_strtod_l+0x860>)
 8008550:	400b      	ands	r3, r1
 8008552:	4682      	mov	sl, r0
 8008554:	468b      	mov	fp, r1
 8008556:	2b00      	cmp	r3, #0
 8008558:	f47f ae08 	bne.w	800816c <_strtod_l+0x45c>
 800855c:	9a05      	ldr	r2, [sp, #20]
 800855e:	2322      	movs	r3, #34	@ 0x22
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e603      	b.n	800816c <_strtod_l+0x45c>
 8008564:	0800a280 	.word	0x0800a280
 8008568:	fffffc02 	.word	0xfffffc02
 800856c:	39500000 	.word	0x39500000
 8008570:	7ff00000 	.word	0x7ff00000
 8008574:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008578:	d165      	bne.n	8008646 <_strtod_l+0x936>
 800857a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800857c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008580:	b35a      	cbz	r2, 80085da <_strtod_l+0x8ca>
 8008582:	4a9f      	ldr	r2, [pc, #636]	@ (8008800 <_strtod_l+0xaf0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d12b      	bne.n	80085e0 <_strtod_l+0x8d0>
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	4651      	mov	r1, sl
 800858c:	b303      	cbz	r3, 80085d0 <_strtod_l+0x8c0>
 800858e:	4b9d      	ldr	r3, [pc, #628]	@ (8008804 <_strtod_l+0xaf4>)
 8008590:	465a      	mov	r2, fp
 8008592:	4013      	ands	r3, r2
 8008594:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800859c:	d81b      	bhi.n	80085d6 <_strtod_l+0x8c6>
 800859e:	0d1b      	lsrs	r3, r3, #20
 80085a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	4299      	cmp	r1, r3
 80085aa:	d119      	bne.n	80085e0 <_strtod_l+0x8d0>
 80085ac:	4b96      	ldr	r3, [pc, #600]	@ (8008808 <_strtod_l+0xaf8>)
 80085ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d102      	bne.n	80085ba <_strtod_l+0x8aa>
 80085b4:	3101      	adds	r1, #1
 80085b6:	f43f adce 	beq.w	8008156 <_strtod_l+0x446>
 80085ba:	4b92      	ldr	r3, [pc, #584]	@ (8008804 <_strtod_l+0xaf4>)
 80085bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085be:	401a      	ands	r2, r3
 80085c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80085c4:	f04f 0a00 	mov.w	sl, #0
 80085c8:	9b08      	ldr	r3, [sp, #32]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1b9      	bne.n	8008542 <_strtod_l+0x832>
 80085ce:	e5cd      	b.n	800816c <_strtod_l+0x45c>
 80085d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085d4:	e7e8      	b.n	80085a8 <_strtod_l+0x898>
 80085d6:	4613      	mov	r3, r2
 80085d8:	e7e6      	b.n	80085a8 <_strtod_l+0x898>
 80085da:	ea53 030a 	orrs.w	r3, r3, sl
 80085de:	d0a2      	beq.n	8008526 <_strtod_l+0x816>
 80085e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085e2:	b1db      	cbz	r3, 800861c <_strtod_l+0x90c>
 80085e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085e6:	4213      	tst	r3, r2
 80085e8:	d0ee      	beq.n	80085c8 <_strtod_l+0x8b8>
 80085ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ec:	9a08      	ldr	r2, [sp, #32]
 80085ee:	4650      	mov	r0, sl
 80085f0:	4659      	mov	r1, fp
 80085f2:	b1bb      	cbz	r3, 8008624 <_strtod_l+0x914>
 80085f4:	f7ff fb6e 	bl	8007cd4 <sulp>
 80085f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085fc:	ec53 2b10 	vmov	r2, r3, d0
 8008600:	f7f7 fe44 	bl	800028c <__adddf3>
 8008604:	4682      	mov	sl, r0
 8008606:	468b      	mov	fp, r1
 8008608:	e7de      	b.n	80085c8 <_strtod_l+0x8b8>
 800860a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800860e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008616:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800861a:	e7d5      	b.n	80085c8 <_strtod_l+0x8b8>
 800861c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800861e:	ea13 0f0a 	tst.w	r3, sl
 8008622:	e7e1      	b.n	80085e8 <_strtod_l+0x8d8>
 8008624:	f7ff fb56 	bl	8007cd4 <sulp>
 8008628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800862c:	ec53 2b10 	vmov	r2, r3, d0
 8008630:	f7f7 fe2a 	bl	8000288 <__aeabi_dsub>
 8008634:	2200      	movs	r2, #0
 8008636:	2300      	movs	r3, #0
 8008638:	4682      	mov	sl, r0
 800863a:	468b      	mov	fp, r1
 800863c:	f7f8 fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8008640:	2800      	cmp	r0, #0
 8008642:	d0c1      	beq.n	80085c8 <_strtod_l+0x8b8>
 8008644:	e61a      	b.n	800827c <_strtod_l+0x56c>
 8008646:	4641      	mov	r1, r8
 8008648:	4620      	mov	r0, r4
 800864a:	f7ff facd 	bl	8007be8 <__ratio>
 800864e:	ec57 6b10 	vmov	r6, r7, d0
 8008652:	2200      	movs	r2, #0
 8008654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	f7f8 fa48 	bl	8000af0 <__aeabi_dcmple>
 8008660:	2800      	cmp	r0, #0
 8008662:	d06f      	beq.n	8008744 <_strtod_l+0xa34>
 8008664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008666:	2b00      	cmp	r3, #0
 8008668:	d17a      	bne.n	8008760 <_strtod_l+0xa50>
 800866a:	f1ba 0f00 	cmp.w	sl, #0
 800866e:	d158      	bne.n	8008722 <_strtod_l+0xa12>
 8008670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008676:	2b00      	cmp	r3, #0
 8008678:	d15a      	bne.n	8008730 <_strtod_l+0xa20>
 800867a:	4b64      	ldr	r3, [pc, #400]	@ (800880c <_strtod_l+0xafc>)
 800867c:	2200      	movs	r2, #0
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f8 fa2b 	bl	8000adc <__aeabi_dcmplt>
 8008686:	2800      	cmp	r0, #0
 8008688:	d159      	bne.n	800873e <_strtod_l+0xa2e>
 800868a:	4630      	mov	r0, r6
 800868c:	4639      	mov	r1, r7
 800868e:	4b60      	ldr	r3, [pc, #384]	@ (8008810 <_strtod_l+0xb00>)
 8008690:	2200      	movs	r2, #0
 8008692:	f7f7 ffb1 	bl	80005f8 <__aeabi_dmul>
 8008696:	4606      	mov	r6, r0
 8008698:	460f      	mov	r7, r1
 800869a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800869e:	9606      	str	r6, [sp, #24]
 80086a0:	9307      	str	r3, [sp, #28]
 80086a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086a6:	4d57      	ldr	r5, [pc, #348]	@ (8008804 <_strtod_l+0xaf4>)
 80086a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80086ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ae:	401d      	ands	r5, r3
 80086b0:	4b58      	ldr	r3, [pc, #352]	@ (8008814 <_strtod_l+0xb04>)
 80086b2:	429d      	cmp	r5, r3
 80086b4:	f040 80b2 	bne.w	800881c <_strtod_l+0xb0c>
 80086b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80086be:	ec4b ab10 	vmov	d0, sl, fp
 80086c2:	f7ff f9c9 	bl	8007a58 <__ulp>
 80086c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ca:	ec51 0b10 	vmov	r0, r1, d0
 80086ce:	f7f7 ff93 	bl	80005f8 <__aeabi_dmul>
 80086d2:	4652      	mov	r2, sl
 80086d4:	465b      	mov	r3, fp
 80086d6:	f7f7 fdd9 	bl	800028c <__adddf3>
 80086da:	460b      	mov	r3, r1
 80086dc:	4949      	ldr	r1, [pc, #292]	@ (8008804 <_strtod_l+0xaf4>)
 80086de:	4a4e      	ldr	r2, [pc, #312]	@ (8008818 <_strtod_l+0xb08>)
 80086e0:	4019      	ands	r1, r3
 80086e2:	4291      	cmp	r1, r2
 80086e4:	4682      	mov	sl, r0
 80086e6:	d942      	bls.n	800876e <_strtod_l+0xa5e>
 80086e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086ea:	4b47      	ldr	r3, [pc, #284]	@ (8008808 <_strtod_l+0xaf8>)
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d103      	bne.n	80086f8 <_strtod_l+0x9e8>
 80086f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086f2:	3301      	adds	r3, #1
 80086f4:	f43f ad2f 	beq.w	8008156 <_strtod_l+0x446>
 80086f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008808 <_strtod_l+0xaf8>
 80086fc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008702:	9805      	ldr	r0, [sp, #20]
 8008704:	f7fe fe7c 	bl	8007400 <_Bfree>
 8008708:	9805      	ldr	r0, [sp, #20]
 800870a:	4649      	mov	r1, r9
 800870c:	f7fe fe78 	bl	8007400 <_Bfree>
 8008710:	9805      	ldr	r0, [sp, #20]
 8008712:	4641      	mov	r1, r8
 8008714:	f7fe fe74 	bl	8007400 <_Bfree>
 8008718:	9805      	ldr	r0, [sp, #20]
 800871a:	4621      	mov	r1, r4
 800871c:	f7fe fe70 	bl	8007400 <_Bfree>
 8008720:	e619      	b.n	8008356 <_strtod_l+0x646>
 8008722:	f1ba 0f01 	cmp.w	sl, #1
 8008726:	d103      	bne.n	8008730 <_strtod_l+0xa20>
 8008728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	f43f ada6 	beq.w	800827c <_strtod_l+0x56c>
 8008730:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80087e0 <_strtod_l+0xad0>
 8008734:	4f35      	ldr	r7, [pc, #212]	@ (800880c <_strtod_l+0xafc>)
 8008736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800873a:	2600      	movs	r6, #0
 800873c:	e7b1      	b.n	80086a2 <_strtod_l+0x992>
 800873e:	4f34      	ldr	r7, [pc, #208]	@ (8008810 <_strtod_l+0xb00>)
 8008740:	2600      	movs	r6, #0
 8008742:	e7aa      	b.n	800869a <_strtod_l+0x98a>
 8008744:	4b32      	ldr	r3, [pc, #200]	@ (8008810 <_strtod_l+0xb00>)
 8008746:	4630      	mov	r0, r6
 8008748:	4639      	mov	r1, r7
 800874a:	2200      	movs	r2, #0
 800874c:	f7f7 ff54 	bl	80005f8 <__aeabi_dmul>
 8008750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d09f      	beq.n	800869a <_strtod_l+0x98a>
 800875a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800875e:	e7a0      	b.n	80086a2 <_strtod_l+0x992>
 8008760:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80087e8 <_strtod_l+0xad8>
 8008764:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008768:	ec57 6b17 	vmov	r6, r7, d7
 800876c:	e799      	b.n	80086a2 <_strtod_l+0x992>
 800876e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008772:	9b08      	ldr	r3, [sp, #32]
 8008774:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1c1      	bne.n	8008700 <_strtod_l+0x9f0>
 800877c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008780:	0d1b      	lsrs	r3, r3, #20
 8008782:	051b      	lsls	r3, r3, #20
 8008784:	429d      	cmp	r5, r3
 8008786:	d1bb      	bne.n	8008700 <_strtod_l+0x9f0>
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 fa94 	bl	8000cb8 <__aeabi_d2lz>
 8008790:	f7f7 ff04 	bl	800059c <__aeabi_l2d>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f7 fd74 	bl	8000288 <__aeabi_dsub>
 80087a0:	460b      	mov	r3, r1
 80087a2:	4602      	mov	r2, r0
 80087a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80087a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80087ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087ae:	ea46 060a 	orr.w	r6, r6, sl
 80087b2:	431e      	orrs	r6, r3
 80087b4:	d06f      	beq.n	8008896 <_strtod_l+0xb86>
 80087b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80087f0 <_strtod_l+0xae0>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f7f8 f98e 	bl	8000adc <__aeabi_dcmplt>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	f47f acd3 	bne.w	800816c <_strtod_l+0x45c>
 80087c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80087f8 <_strtod_l+0xae8>)
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087d0:	f7f8 f9a2 	bl	8000b18 <__aeabi_dcmpgt>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d093      	beq.n	8008700 <_strtod_l+0x9f0>
 80087d8:	e4c8      	b.n	800816c <_strtod_l+0x45c>
 80087da:	bf00      	nop
 80087dc:	f3af 8000 	nop.w
 80087e0:	00000000 	.word	0x00000000
 80087e4:	bff00000 	.word	0xbff00000
 80087e8:	00000000 	.word	0x00000000
 80087ec:	3ff00000 	.word	0x3ff00000
 80087f0:	94a03595 	.word	0x94a03595
 80087f4:	3fdfffff 	.word	0x3fdfffff
 80087f8:	35afe535 	.word	0x35afe535
 80087fc:	3fe00000 	.word	0x3fe00000
 8008800:	000fffff 	.word	0x000fffff
 8008804:	7ff00000 	.word	0x7ff00000
 8008808:	7fefffff 	.word	0x7fefffff
 800880c:	3ff00000 	.word	0x3ff00000
 8008810:	3fe00000 	.word	0x3fe00000
 8008814:	7fe00000 	.word	0x7fe00000
 8008818:	7c9fffff 	.word	0x7c9fffff
 800881c:	9b08      	ldr	r3, [sp, #32]
 800881e:	b323      	cbz	r3, 800886a <_strtod_l+0xb5a>
 8008820:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008824:	d821      	bhi.n	800886a <_strtod_l+0xb5a>
 8008826:	a328      	add	r3, pc, #160	@ (adr r3, 80088c8 <_strtod_l+0xbb8>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	4630      	mov	r0, r6
 800882e:	4639      	mov	r1, r7
 8008830:	f7f8 f95e 	bl	8000af0 <__aeabi_dcmple>
 8008834:	b1a0      	cbz	r0, 8008860 <_strtod_l+0xb50>
 8008836:	4639      	mov	r1, r7
 8008838:	4630      	mov	r0, r6
 800883a:	f7f8 f9b5 	bl	8000ba8 <__aeabi_d2uiz>
 800883e:	2801      	cmp	r0, #1
 8008840:	bf38      	it	cc
 8008842:	2001      	movcc	r0, #1
 8008844:	f7f7 fe5e 	bl	8000504 <__aeabi_ui2d>
 8008848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800884a:	4606      	mov	r6, r0
 800884c:	460f      	mov	r7, r1
 800884e:	b9fb      	cbnz	r3, 8008890 <_strtod_l+0xb80>
 8008850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008854:	9014      	str	r0, [sp, #80]	@ 0x50
 8008856:	9315      	str	r3, [sp, #84]	@ 0x54
 8008858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800885c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008862:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008866:	1b5b      	subs	r3, r3, r5
 8008868:	9311      	str	r3, [sp, #68]	@ 0x44
 800886a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800886e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008872:	f7ff f8f1 	bl	8007a58 <__ulp>
 8008876:	4650      	mov	r0, sl
 8008878:	ec53 2b10 	vmov	r2, r3, d0
 800887c:	4659      	mov	r1, fp
 800887e:	f7f7 febb 	bl	80005f8 <__aeabi_dmul>
 8008882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008886:	f7f7 fd01 	bl	800028c <__adddf3>
 800888a:	4682      	mov	sl, r0
 800888c:	468b      	mov	fp, r1
 800888e:	e770      	b.n	8008772 <_strtod_l+0xa62>
 8008890:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008894:	e7e0      	b.n	8008858 <_strtod_l+0xb48>
 8008896:	a30e      	add	r3, pc, #56	@ (adr r3, 80088d0 <_strtod_l+0xbc0>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f8 f91e 	bl	8000adc <__aeabi_dcmplt>
 80088a0:	e798      	b.n	80087d4 <_strtod_l+0xac4>
 80088a2:	2300      	movs	r3, #0
 80088a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80088a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80088a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	f7ff ba6d 	b.w	8007d8a <_strtod_l+0x7a>
 80088b0:	2a65      	cmp	r2, #101	@ 0x65
 80088b2:	f43f ab68 	beq.w	8007f86 <_strtod_l+0x276>
 80088b6:	2a45      	cmp	r2, #69	@ 0x45
 80088b8:	f43f ab65 	beq.w	8007f86 <_strtod_l+0x276>
 80088bc:	2301      	movs	r3, #1
 80088be:	f7ff bba0 	b.w	8008002 <_strtod_l+0x2f2>
 80088c2:	bf00      	nop
 80088c4:	f3af 8000 	nop.w
 80088c8:	ffc00000 	.word	0xffc00000
 80088cc:	41dfffff 	.word	0x41dfffff
 80088d0:	94a03595 	.word	0x94a03595
 80088d4:	3fcfffff 	.word	0x3fcfffff

080088d8 <_strtod_r>:
 80088d8:	4b01      	ldr	r3, [pc, #4]	@ (80088e0 <_strtod_r+0x8>)
 80088da:	f7ff ba19 	b.w	8007d10 <_strtod_l>
 80088de:	bf00      	nop
 80088e0:	2000006c 	.word	0x2000006c

080088e4 <_strtol_l.isra.0>:
 80088e4:	2b24      	cmp	r3, #36	@ 0x24
 80088e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ea:	4686      	mov	lr, r0
 80088ec:	4690      	mov	r8, r2
 80088ee:	d801      	bhi.n	80088f4 <_strtol_l.isra.0+0x10>
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d106      	bne.n	8008902 <_strtol_l.isra.0+0x1e>
 80088f4:	f7fd fdb8 	bl	8006468 <__errno>
 80088f8:	2316      	movs	r3, #22
 80088fa:	6003      	str	r3, [r0, #0]
 80088fc:	2000      	movs	r0, #0
 80088fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008902:	4834      	ldr	r0, [pc, #208]	@ (80089d4 <_strtol_l.isra.0+0xf0>)
 8008904:	460d      	mov	r5, r1
 8008906:	462a      	mov	r2, r5
 8008908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800890c:	5d06      	ldrb	r6, [r0, r4]
 800890e:	f016 0608 	ands.w	r6, r6, #8
 8008912:	d1f8      	bne.n	8008906 <_strtol_l.isra.0+0x22>
 8008914:	2c2d      	cmp	r4, #45	@ 0x2d
 8008916:	d110      	bne.n	800893a <_strtol_l.isra.0+0x56>
 8008918:	782c      	ldrb	r4, [r5, #0]
 800891a:	2601      	movs	r6, #1
 800891c:	1c95      	adds	r5, r2, #2
 800891e:	f033 0210 	bics.w	r2, r3, #16
 8008922:	d115      	bne.n	8008950 <_strtol_l.isra.0+0x6c>
 8008924:	2c30      	cmp	r4, #48	@ 0x30
 8008926:	d10d      	bne.n	8008944 <_strtol_l.isra.0+0x60>
 8008928:	782a      	ldrb	r2, [r5, #0]
 800892a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800892e:	2a58      	cmp	r2, #88	@ 0x58
 8008930:	d108      	bne.n	8008944 <_strtol_l.isra.0+0x60>
 8008932:	786c      	ldrb	r4, [r5, #1]
 8008934:	3502      	adds	r5, #2
 8008936:	2310      	movs	r3, #16
 8008938:	e00a      	b.n	8008950 <_strtol_l.isra.0+0x6c>
 800893a:	2c2b      	cmp	r4, #43	@ 0x2b
 800893c:	bf04      	itt	eq
 800893e:	782c      	ldrbeq	r4, [r5, #0]
 8008940:	1c95      	addeq	r5, r2, #2
 8008942:	e7ec      	b.n	800891e <_strtol_l.isra.0+0x3a>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f6      	bne.n	8008936 <_strtol_l.isra.0+0x52>
 8008948:	2c30      	cmp	r4, #48	@ 0x30
 800894a:	bf14      	ite	ne
 800894c:	230a      	movne	r3, #10
 800894e:	2308      	moveq	r3, #8
 8008950:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008954:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008958:	2200      	movs	r2, #0
 800895a:	fbbc f9f3 	udiv	r9, ip, r3
 800895e:	4610      	mov	r0, r2
 8008960:	fb03 ca19 	mls	sl, r3, r9, ip
 8008964:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008968:	2f09      	cmp	r7, #9
 800896a:	d80f      	bhi.n	800898c <_strtol_l.isra.0+0xa8>
 800896c:	463c      	mov	r4, r7
 800896e:	42a3      	cmp	r3, r4
 8008970:	dd1b      	ble.n	80089aa <_strtol_l.isra.0+0xc6>
 8008972:	1c57      	adds	r7, r2, #1
 8008974:	d007      	beq.n	8008986 <_strtol_l.isra.0+0xa2>
 8008976:	4581      	cmp	r9, r0
 8008978:	d314      	bcc.n	80089a4 <_strtol_l.isra.0+0xc0>
 800897a:	d101      	bne.n	8008980 <_strtol_l.isra.0+0x9c>
 800897c:	45a2      	cmp	sl, r4
 800897e:	db11      	blt.n	80089a4 <_strtol_l.isra.0+0xc0>
 8008980:	fb00 4003 	mla	r0, r0, r3, r4
 8008984:	2201      	movs	r2, #1
 8008986:	f815 4b01 	ldrb.w	r4, [r5], #1
 800898a:	e7eb      	b.n	8008964 <_strtol_l.isra.0+0x80>
 800898c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008990:	2f19      	cmp	r7, #25
 8008992:	d801      	bhi.n	8008998 <_strtol_l.isra.0+0xb4>
 8008994:	3c37      	subs	r4, #55	@ 0x37
 8008996:	e7ea      	b.n	800896e <_strtol_l.isra.0+0x8a>
 8008998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800899c:	2f19      	cmp	r7, #25
 800899e:	d804      	bhi.n	80089aa <_strtol_l.isra.0+0xc6>
 80089a0:	3c57      	subs	r4, #87	@ 0x57
 80089a2:	e7e4      	b.n	800896e <_strtol_l.isra.0+0x8a>
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089a8:	e7ed      	b.n	8008986 <_strtol_l.isra.0+0xa2>
 80089aa:	1c53      	adds	r3, r2, #1
 80089ac:	d108      	bne.n	80089c0 <_strtol_l.isra.0+0xdc>
 80089ae:	2322      	movs	r3, #34	@ 0x22
 80089b0:	f8ce 3000 	str.w	r3, [lr]
 80089b4:	4660      	mov	r0, ip
 80089b6:	f1b8 0f00 	cmp.w	r8, #0
 80089ba:	d0a0      	beq.n	80088fe <_strtol_l.isra.0+0x1a>
 80089bc:	1e69      	subs	r1, r5, #1
 80089be:	e006      	b.n	80089ce <_strtol_l.isra.0+0xea>
 80089c0:	b106      	cbz	r6, 80089c4 <_strtol_l.isra.0+0xe0>
 80089c2:	4240      	negs	r0, r0
 80089c4:	f1b8 0f00 	cmp.w	r8, #0
 80089c8:	d099      	beq.n	80088fe <_strtol_l.isra.0+0x1a>
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	d1f6      	bne.n	80089bc <_strtol_l.isra.0+0xd8>
 80089ce:	f8c8 1000 	str.w	r1, [r8]
 80089d2:	e794      	b.n	80088fe <_strtol_l.isra.0+0x1a>
 80089d4:	0800a2a9 	.word	0x0800a2a9

080089d8 <_strtol_r>:
 80089d8:	f7ff bf84 	b.w	80088e4 <_strtol_l.isra.0>

080089dc <__ssputs_r>:
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	688e      	ldr	r6, [r1, #8]
 80089e2:	461f      	mov	r7, r3
 80089e4:	42be      	cmp	r6, r7
 80089e6:	680b      	ldr	r3, [r1, #0]
 80089e8:	4682      	mov	sl, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	4690      	mov	r8, r2
 80089ee:	d82d      	bhi.n	8008a4c <__ssputs_r+0x70>
 80089f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089f8:	d026      	beq.n	8008a48 <__ssputs_r+0x6c>
 80089fa:	6965      	ldr	r5, [r4, #20]
 80089fc:	6909      	ldr	r1, [r1, #16]
 80089fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a02:	eba3 0901 	sub.w	r9, r3, r1
 8008a06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a0a:	1c7b      	adds	r3, r7, #1
 8008a0c:	444b      	add	r3, r9
 8008a0e:	106d      	asrs	r5, r5, #1
 8008a10:	429d      	cmp	r5, r3
 8008a12:	bf38      	it	cc
 8008a14:	461d      	movcc	r5, r3
 8008a16:	0553      	lsls	r3, r2, #21
 8008a18:	d527      	bpl.n	8008a6a <__ssputs_r+0x8e>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f7fe fc24 	bl	8007268 <_malloc_r>
 8008a20:	4606      	mov	r6, r0
 8008a22:	b360      	cbz	r0, 8008a7e <__ssputs_r+0xa2>
 8008a24:	6921      	ldr	r1, [r4, #16]
 8008a26:	464a      	mov	r2, r9
 8008a28:	f000 fa18 	bl	8008e5c <memcpy>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	6126      	str	r6, [r4, #16]
 8008a3a:	6165      	str	r5, [r4, #20]
 8008a3c:	444e      	add	r6, r9
 8008a3e:	eba5 0509 	sub.w	r5, r5, r9
 8008a42:	6026      	str	r6, [r4, #0]
 8008a44:	60a5      	str	r5, [r4, #8]
 8008a46:	463e      	mov	r6, r7
 8008a48:	42be      	cmp	r6, r7
 8008a4a:	d900      	bls.n	8008a4e <__ssputs_r+0x72>
 8008a4c:	463e      	mov	r6, r7
 8008a4e:	6820      	ldr	r0, [r4, #0]
 8008a50:	4632      	mov	r2, r6
 8008a52:	4641      	mov	r1, r8
 8008a54:	f000 f9c6 	bl	8008de4 <memmove>
 8008a58:	68a3      	ldr	r3, [r4, #8]
 8008a5a:	1b9b      	subs	r3, r3, r6
 8008a5c:	60a3      	str	r3, [r4, #8]
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	4433      	add	r3, r6
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	2000      	movs	r0, #0
 8008a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	f000 fd89 	bl	8009582 <_realloc_r>
 8008a70:	4606      	mov	r6, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d1e0      	bne.n	8008a38 <__ssputs_r+0x5c>
 8008a76:	6921      	ldr	r1, [r4, #16]
 8008a78:	4650      	mov	r0, sl
 8008a7a:	f7fe fb81 	bl	8007180 <_free_r>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	f8ca 3000 	str.w	r3, [sl]
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a90:	e7e9      	b.n	8008a66 <__ssputs_r+0x8a>
	...

08008a94 <_svfiprintf_r>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	4698      	mov	r8, r3
 8008a9a:	898b      	ldrh	r3, [r1, #12]
 8008a9c:	061b      	lsls	r3, r3, #24
 8008a9e:	b09d      	sub	sp, #116	@ 0x74
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	d510      	bpl.n	8008aca <_svfiprintf_r+0x36>
 8008aa8:	690b      	ldr	r3, [r1, #16]
 8008aaa:	b973      	cbnz	r3, 8008aca <_svfiprintf_r+0x36>
 8008aac:	2140      	movs	r1, #64	@ 0x40
 8008aae:	f7fe fbdb 	bl	8007268 <_malloc_r>
 8008ab2:	6028      	str	r0, [r5, #0]
 8008ab4:	6128      	str	r0, [r5, #16]
 8008ab6:	b930      	cbnz	r0, 8008ac6 <_svfiprintf_r+0x32>
 8008ab8:	230c      	movs	r3, #12
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ac0:	b01d      	add	sp, #116	@ 0x74
 8008ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac6:	2340      	movs	r3, #64	@ 0x40
 8008ac8:	616b      	str	r3, [r5, #20]
 8008aca:	2300      	movs	r3, #0
 8008acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ace:	2320      	movs	r3, #32
 8008ad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad8:	2330      	movs	r3, #48	@ 0x30
 8008ada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c78 <_svfiprintf_r+0x1e4>
 8008ade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ae2:	f04f 0901 	mov.w	r9, #1
 8008ae6:	4623      	mov	r3, r4
 8008ae8:	469a      	mov	sl, r3
 8008aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aee:	b10a      	cbz	r2, 8008af4 <_svfiprintf_r+0x60>
 8008af0:	2a25      	cmp	r2, #37	@ 0x25
 8008af2:	d1f9      	bne.n	8008ae8 <_svfiprintf_r+0x54>
 8008af4:	ebba 0b04 	subs.w	fp, sl, r4
 8008af8:	d00b      	beq.n	8008b12 <_svfiprintf_r+0x7e>
 8008afa:	465b      	mov	r3, fp
 8008afc:	4622      	mov	r2, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7ff ff6b 	bl	80089dc <__ssputs_r>
 8008b06:	3001      	adds	r0, #1
 8008b08:	f000 80a7 	beq.w	8008c5a <_svfiprintf_r+0x1c6>
 8008b0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b0e:	445a      	add	r2, fp
 8008b10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b12:	f89a 3000 	ldrb.w	r3, [sl]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 809f 	beq.w	8008c5a <_svfiprintf_r+0x1c6>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b26:	f10a 0a01 	add.w	sl, sl, #1
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	9307      	str	r3, [sp, #28]
 8008b2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b34:	4654      	mov	r4, sl
 8008b36:	2205      	movs	r2, #5
 8008b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3c:	484e      	ldr	r0, [pc, #312]	@ (8008c78 <_svfiprintf_r+0x1e4>)
 8008b3e:	f7f7 fb47 	bl	80001d0 <memchr>
 8008b42:	9a04      	ldr	r2, [sp, #16]
 8008b44:	b9d8      	cbnz	r0, 8008b7e <_svfiprintf_r+0xea>
 8008b46:	06d0      	lsls	r0, r2, #27
 8008b48:	bf44      	itt	mi
 8008b4a:	2320      	movmi	r3, #32
 8008b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b50:	0711      	lsls	r1, r2, #28
 8008b52:	bf44      	itt	mi
 8008b54:	232b      	movmi	r3, #43	@ 0x2b
 8008b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b60:	d015      	beq.n	8008b8e <_svfiprintf_r+0xfa>
 8008b62:	9a07      	ldr	r2, [sp, #28]
 8008b64:	4654      	mov	r4, sl
 8008b66:	2000      	movs	r0, #0
 8008b68:	f04f 0c0a 	mov.w	ip, #10
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b72:	3b30      	subs	r3, #48	@ 0x30
 8008b74:	2b09      	cmp	r3, #9
 8008b76:	d94b      	bls.n	8008c10 <_svfiprintf_r+0x17c>
 8008b78:	b1b0      	cbz	r0, 8008ba8 <_svfiprintf_r+0x114>
 8008b7a:	9207      	str	r2, [sp, #28]
 8008b7c:	e014      	b.n	8008ba8 <_svfiprintf_r+0x114>
 8008b7e:	eba0 0308 	sub.w	r3, r0, r8
 8008b82:	fa09 f303 	lsl.w	r3, r9, r3
 8008b86:	4313      	orrs	r3, r2
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	46a2      	mov	sl, r4
 8008b8c:	e7d2      	b.n	8008b34 <_svfiprintf_r+0xa0>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	1d19      	adds	r1, r3, #4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	9103      	str	r1, [sp, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	bfbb      	ittet	lt
 8008b9a:	425b      	neglt	r3, r3
 8008b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008ba0:	9307      	strge	r3, [sp, #28]
 8008ba2:	9307      	strlt	r3, [sp, #28]
 8008ba4:	bfb8      	it	lt
 8008ba6:	9204      	strlt	r2, [sp, #16]
 8008ba8:	7823      	ldrb	r3, [r4, #0]
 8008baa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bac:	d10a      	bne.n	8008bc4 <_svfiprintf_r+0x130>
 8008bae:	7863      	ldrb	r3, [r4, #1]
 8008bb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bb2:	d132      	bne.n	8008c1a <_svfiprintf_r+0x186>
 8008bb4:	9b03      	ldr	r3, [sp, #12]
 8008bb6:	1d1a      	adds	r2, r3, #4
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	9203      	str	r2, [sp, #12]
 8008bbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bc0:	3402      	adds	r4, #2
 8008bc2:	9305      	str	r3, [sp, #20]
 8008bc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c88 <_svfiprintf_r+0x1f4>
 8008bc8:	7821      	ldrb	r1, [r4, #0]
 8008bca:	2203      	movs	r2, #3
 8008bcc:	4650      	mov	r0, sl
 8008bce:	f7f7 faff 	bl	80001d0 <memchr>
 8008bd2:	b138      	cbz	r0, 8008be4 <_svfiprintf_r+0x150>
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	eba0 000a 	sub.w	r0, r0, sl
 8008bda:	2240      	movs	r2, #64	@ 0x40
 8008bdc:	4082      	lsls	r2, r0
 8008bde:	4313      	orrs	r3, r2
 8008be0:	3401      	adds	r4, #1
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be8:	4824      	ldr	r0, [pc, #144]	@ (8008c7c <_svfiprintf_r+0x1e8>)
 8008bea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bee:	2206      	movs	r2, #6
 8008bf0:	f7f7 faee 	bl	80001d0 <memchr>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d036      	beq.n	8008c66 <_svfiprintf_r+0x1d2>
 8008bf8:	4b21      	ldr	r3, [pc, #132]	@ (8008c80 <_svfiprintf_r+0x1ec>)
 8008bfa:	bb1b      	cbnz	r3, 8008c44 <_svfiprintf_r+0x1b0>
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	3307      	adds	r3, #7
 8008c00:	f023 0307 	bic.w	r3, r3, #7
 8008c04:	3308      	adds	r3, #8
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c0a:	4433      	add	r3, r6
 8008c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c0e:	e76a      	b.n	8008ae6 <_svfiprintf_r+0x52>
 8008c10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c14:	460c      	mov	r4, r1
 8008c16:	2001      	movs	r0, #1
 8008c18:	e7a8      	b.n	8008b6c <_svfiprintf_r+0xd8>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	3401      	adds	r4, #1
 8008c1e:	9305      	str	r3, [sp, #20]
 8008c20:	4619      	mov	r1, r3
 8008c22:	f04f 0c0a 	mov.w	ip, #10
 8008c26:	4620      	mov	r0, r4
 8008c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c2c:	3a30      	subs	r2, #48	@ 0x30
 8008c2e:	2a09      	cmp	r2, #9
 8008c30:	d903      	bls.n	8008c3a <_svfiprintf_r+0x1a6>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0c6      	beq.n	8008bc4 <_svfiprintf_r+0x130>
 8008c36:	9105      	str	r1, [sp, #20]
 8008c38:	e7c4      	b.n	8008bc4 <_svfiprintf_r+0x130>
 8008c3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c3e:	4604      	mov	r4, r0
 8008c40:	2301      	movs	r3, #1
 8008c42:	e7f0      	b.n	8008c26 <_svfiprintf_r+0x192>
 8008c44:	ab03      	add	r3, sp, #12
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c84 <_svfiprintf_r+0x1f0>)
 8008c4c:	a904      	add	r1, sp, #16
 8008c4e:	4638      	mov	r0, r7
 8008c50:	f7fc fccc 	bl	80055ec <_printf_float>
 8008c54:	1c42      	adds	r2, r0, #1
 8008c56:	4606      	mov	r6, r0
 8008c58:	d1d6      	bne.n	8008c08 <_svfiprintf_r+0x174>
 8008c5a:	89ab      	ldrh	r3, [r5, #12]
 8008c5c:	065b      	lsls	r3, r3, #25
 8008c5e:	f53f af2d 	bmi.w	8008abc <_svfiprintf_r+0x28>
 8008c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c64:	e72c      	b.n	8008ac0 <_svfiprintf_r+0x2c>
 8008c66:	ab03      	add	r3, sp, #12
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	462a      	mov	r2, r5
 8008c6c:	4b05      	ldr	r3, [pc, #20]	@ (8008c84 <_svfiprintf_r+0x1f0>)
 8008c6e:	a904      	add	r1, sp, #16
 8008c70:	4638      	mov	r0, r7
 8008c72:	f7fc ff53 	bl	8005b1c <_printf_i>
 8008c76:	e7ed      	b.n	8008c54 <_svfiprintf_r+0x1c0>
 8008c78:	0800a0a5 	.word	0x0800a0a5
 8008c7c:	0800a0af 	.word	0x0800a0af
 8008c80:	080055ed 	.word	0x080055ed
 8008c84:	080089dd 	.word	0x080089dd
 8008c88:	0800a0ab 	.word	0x0800a0ab

08008c8c <__sflush_r>:
 8008c8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c94:	0716      	lsls	r6, r2, #28
 8008c96:	4605      	mov	r5, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	d454      	bmi.n	8008d46 <__sflush_r+0xba>
 8008c9c:	684b      	ldr	r3, [r1, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dc02      	bgt.n	8008ca8 <__sflush_r+0x1c>
 8008ca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd48      	ble.n	8008d3a <__sflush_r+0xae>
 8008ca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	d045      	beq.n	8008d3a <__sflush_r+0xae>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cb4:	682f      	ldr	r7, [r5, #0]
 8008cb6:	6a21      	ldr	r1, [r4, #32]
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	d030      	beq.n	8008d1e <__sflush_r+0x92>
 8008cbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	0759      	lsls	r1, r3, #29
 8008cc2:	d505      	bpl.n	8008cd0 <__sflush_r+0x44>
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	1ad2      	subs	r2, r2, r3
 8008cc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cca:	b10b      	cbz	r3, 8008cd0 <__sflush_r+0x44>
 8008ccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cd4:	6a21      	ldr	r1, [r4, #32]
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b0      	blx	r6
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	d106      	bne.n	8008cee <__sflush_r+0x62>
 8008ce0:	6829      	ldr	r1, [r5, #0]
 8008ce2:	291d      	cmp	r1, #29
 8008ce4:	d82b      	bhi.n	8008d3e <__sflush_r+0xb2>
 8008ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8008d90 <__sflush_r+0x104>)
 8008ce8:	40ca      	lsrs	r2, r1
 8008cea:	07d6      	lsls	r6, r2, #31
 8008cec:	d527      	bpl.n	8008d3e <__sflush_r+0xb2>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	6062      	str	r2, [r4, #4]
 8008cf2:	04d9      	lsls	r1, r3, #19
 8008cf4:	6922      	ldr	r2, [r4, #16]
 8008cf6:	6022      	str	r2, [r4, #0]
 8008cf8:	d504      	bpl.n	8008d04 <__sflush_r+0x78>
 8008cfa:	1c42      	adds	r2, r0, #1
 8008cfc:	d101      	bne.n	8008d02 <__sflush_r+0x76>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	b903      	cbnz	r3, 8008d04 <__sflush_r+0x78>
 8008d02:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d06:	602f      	str	r7, [r5, #0]
 8008d08:	b1b9      	cbz	r1, 8008d3a <__sflush_r+0xae>
 8008d0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d002      	beq.n	8008d18 <__sflush_r+0x8c>
 8008d12:	4628      	mov	r0, r5
 8008d14:	f7fe fa34 	bl	8007180 <_free_r>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d1c:	e00d      	b.n	8008d3a <__sflush_r+0xae>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b0      	blx	r6
 8008d24:	4602      	mov	r2, r0
 8008d26:	1c50      	adds	r0, r2, #1
 8008d28:	d1c9      	bne.n	8008cbe <__sflush_r+0x32>
 8008d2a:	682b      	ldr	r3, [r5, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0c6      	beq.n	8008cbe <__sflush_r+0x32>
 8008d30:	2b1d      	cmp	r3, #29
 8008d32:	d001      	beq.n	8008d38 <__sflush_r+0xac>
 8008d34:	2b16      	cmp	r3, #22
 8008d36:	d11e      	bne.n	8008d76 <__sflush_r+0xea>
 8008d38:	602f      	str	r7, [r5, #0]
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e022      	b.n	8008d84 <__sflush_r+0xf8>
 8008d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d42:	b21b      	sxth	r3, r3
 8008d44:	e01b      	b.n	8008d7e <__sflush_r+0xf2>
 8008d46:	690f      	ldr	r7, [r1, #16]
 8008d48:	2f00      	cmp	r7, #0
 8008d4a:	d0f6      	beq.n	8008d3a <__sflush_r+0xae>
 8008d4c:	0793      	lsls	r3, r2, #30
 8008d4e:	680e      	ldr	r6, [r1, #0]
 8008d50:	bf08      	it	eq
 8008d52:	694b      	ldreq	r3, [r1, #20]
 8008d54:	600f      	str	r7, [r1, #0]
 8008d56:	bf18      	it	ne
 8008d58:	2300      	movne	r3, #0
 8008d5a:	eba6 0807 	sub.w	r8, r6, r7
 8008d5e:	608b      	str	r3, [r1, #8]
 8008d60:	f1b8 0f00 	cmp.w	r8, #0
 8008d64:	dde9      	ble.n	8008d3a <__sflush_r+0xae>
 8008d66:	6a21      	ldr	r1, [r4, #32]
 8008d68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d6a:	4643      	mov	r3, r8
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b0      	blx	r6
 8008d72:	2800      	cmp	r0, #0
 8008d74:	dc08      	bgt.n	8008d88 <__sflush_r+0xfc>
 8008d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d88:	4407      	add	r7, r0
 8008d8a:	eba8 0800 	sub.w	r8, r8, r0
 8008d8e:	e7e7      	b.n	8008d60 <__sflush_r+0xd4>
 8008d90:	20400001 	.word	0x20400001

08008d94 <_fflush_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	690b      	ldr	r3, [r1, #16]
 8008d98:	4605      	mov	r5, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	b913      	cbnz	r3, 8008da4 <_fflush_r+0x10>
 8008d9e:	2500      	movs	r5, #0
 8008da0:	4628      	mov	r0, r5
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	b118      	cbz	r0, 8008dae <_fflush_r+0x1a>
 8008da6:	6a03      	ldr	r3, [r0, #32]
 8008da8:	b90b      	cbnz	r3, 8008dae <_fflush_r+0x1a>
 8008daa:	f7fd fa6f 	bl	800628c <__sinit>
 8008dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f3      	beq.n	8008d9e <_fflush_r+0xa>
 8008db6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008db8:	07d0      	lsls	r0, r2, #31
 8008dba:	d404      	bmi.n	8008dc6 <_fflush_r+0x32>
 8008dbc:	0599      	lsls	r1, r3, #22
 8008dbe:	d402      	bmi.n	8008dc6 <_fflush_r+0x32>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dc2:	f7fd fb7c 	bl	80064be <__retarget_lock_acquire_recursive>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	4621      	mov	r1, r4
 8008dca:	f7ff ff5f 	bl	8008c8c <__sflush_r>
 8008dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dd0:	07da      	lsls	r2, r3, #31
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	d4e4      	bmi.n	8008da0 <_fflush_r+0xc>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	059b      	lsls	r3, r3, #22
 8008dda:	d4e1      	bmi.n	8008da0 <_fflush_r+0xc>
 8008ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dde:	f7fd fb6f 	bl	80064c0 <__retarget_lock_release_recursive>
 8008de2:	e7dd      	b.n	8008da0 <_fflush_r+0xc>

08008de4 <memmove>:
 8008de4:	4288      	cmp	r0, r1
 8008de6:	b510      	push	{r4, lr}
 8008de8:	eb01 0402 	add.w	r4, r1, r2
 8008dec:	d902      	bls.n	8008df4 <memmove+0x10>
 8008dee:	4284      	cmp	r4, r0
 8008df0:	4623      	mov	r3, r4
 8008df2:	d807      	bhi.n	8008e04 <memmove+0x20>
 8008df4:	1e43      	subs	r3, r0, #1
 8008df6:	42a1      	cmp	r1, r4
 8008df8:	d008      	beq.n	8008e0c <memmove+0x28>
 8008dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e02:	e7f8      	b.n	8008df6 <memmove+0x12>
 8008e04:	4402      	add	r2, r0
 8008e06:	4601      	mov	r1, r0
 8008e08:	428a      	cmp	r2, r1
 8008e0a:	d100      	bne.n	8008e0e <memmove+0x2a>
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e16:	e7f7      	b.n	8008e08 <memmove+0x24>

08008e18 <strncmp>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	b16a      	cbz	r2, 8008e38 <strncmp+0x20>
 8008e1c:	3901      	subs	r1, #1
 8008e1e:	1884      	adds	r4, r0, r2
 8008e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d103      	bne.n	8008e34 <strncmp+0x1c>
 8008e2c:	42a0      	cmp	r0, r4
 8008e2e:	d001      	beq.n	8008e34 <strncmp+0x1c>
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	d1f5      	bne.n	8008e20 <strncmp+0x8>
 8008e34:	1ad0      	subs	r0, r2, r3
 8008e36:	bd10      	pop	{r4, pc}
 8008e38:	4610      	mov	r0, r2
 8008e3a:	e7fc      	b.n	8008e36 <strncmp+0x1e>

08008e3c <_sbrk_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	@ (8008e58 <_sbrk_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7f9 f90a 	bl	8002060 <_sbrk>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_sbrk_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_sbrk_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	200005b0 	.word	0x200005b0

08008e5c <memcpy>:
 8008e5c:	440a      	add	r2, r1
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e64:	d100      	bne.n	8008e68 <memcpy+0xc>
 8008e66:	4770      	bx	lr
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e72:	4291      	cmp	r1, r2
 8008e74:	d1f9      	bne.n	8008e6a <memcpy+0xe>
 8008e76:	bd10      	pop	{r4, pc}

08008e78 <nan>:
 8008e78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e80 <nan+0x8>
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	00000000 	.word	0x00000000
 8008e84:	7ff80000 	.word	0x7ff80000

08008e88 <__assert_func>:
 8008e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4b09      	ldr	r3, [pc, #36]	@ (8008eb4 <__assert_func+0x2c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4605      	mov	r5, r0
 8008e94:	68d8      	ldr	r0, [r3, #12]
 8008e96:	b14c      	cbz	r4, 8008eac <__assert_func+0x24>
 8008e98:	4b07      	ldr	r3, [pc, #28]	@ (8008eb8 <__assert_func+0x30>)
 8008e9a:	9100      	str	r1, [sp, #0]
 8008e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ea0:	4906      	ldr	r1, [pc, #24]	@ (8008ebc <__assert_func+0x34>)
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	f000 fba8 	bl	80095f8 <fiprintf>
 8008ea8:	f000 fbb8 	bl	800961c <abort>
 8008eac:	4b04      	ldr	r3, [pc, #16]	@ (8008ec0 <__assert_func+0x38>)
 8008eae:	461c      	mov	r4, r3
 8008eb0:	e7f3      	b.n	8008e9a <__assert_func+0x12>
 8008eb2:	bf00      	nop
 8008eb4:	2000001c 	.word	0x2000001c
 8008eb8:	0800a0be 	.word	0x0800a0be
 8008ebc:	0800a0cb 	.word	0x0800a0cb
 8008ec0:	0800a0f9 	.word	0x0800a0f9

08008ec4 <_calloc_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	fba1 5402 	umull	r5, r4, r1, r2
 8008eca:	b934      	cbnz	r4, 8008eda <_calloc_r+0x16>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7fe f9cb 	bl	8007268 <_malloc_r>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b928      	cbnz	r0, 8008ee2 <_calloc_r+0x1e>
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
 8008eda:	220c      	movs	r2, #12
 8008edc:	6002      	str	r2, [r0, #0]
 8008ede:	2600      	movs	r6, #0
 8008ee0:	e7f9      	b.n	8008ed6 <_calloc_r+0x12>
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7fd fa6c 	bl	80063c2 <memset>
 8008eea:	e7f4      	b.n	8008ed6 <_calloc_r+0x12>

08008eec <rshift>:
 8008eec:	6903      	ldr	r3, [r0, #16]
 8008eee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008efa:	f100 0414 	add.w	r4, r0, #20
 8008efe:	dd45      	ble.n	8008f8c <rshift+0xa0>
 8008f00:	f011 011f 	ands.w	r1, r1, #31
 8008f04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f0c:	d10c      	bne.n	8008f28 <rshift+0x3c>
 8008f0e:	f100 0710 	add.w	r7, r0, #16
 8008f12:	4629      	mov	r1, r5
 8008f14:	42b1      	cmp	r1, r6
 8008f16:	d334      	bcc.n	8008f82 <rshift+0x96>
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	1eea      	subs	r2, r5, #3
 8008f1e:	4296      	cmp	r6, r2
 8008f20:	bf38      	it	cc
 8008f22:	2300      	movcc	r3, #0
 8008f24:	4423      	add	r3, r4
 8008f26:	e015      	b.n	8008f54 <rshift+0x68>
 8008f28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f2c:	f1c1 0820 	rsb	r8, r1, #32
 8008f30:	40cf      	lsrs	r7, r1
 8008f32:	f105 0e04 	add.w	lr, r5, #4
 8008f36:	46a1      	mov	r9, r4
 8008f38:	4576      	cmp	r6, lr
 8008f3a:	46f4      	mov	ip, lr
 8008f3c:	d815      	bhi.n	8008f6a <rshift+0x7e>
 8008f3e:	1a9a      	subs	r2, r3, r2
 8008f40:	0092      	lsls	r2, r2, #2
 8008f42:	3a04      	subs	r2, #4
 8008f44:	3501      	adds	r5, #1
 8008f46:	42ae      	cmp	r6, r5
 8008f48:	bf38      	it	cc
 8008f4a:	2200      	movcc	r2, #0
 8008f4c:	18a3      	adds	r3, r4, r2
 8008f4e:	50a7      	str	r7, [r4, r2]
 8008f50:	b107      	cbz	r7, 8008f54 <rshift+0x68>
 8008f52:	3304      	adds	r3, #4
 8008f54:	1b1a      	subs	r2, r3, r4
 8008f56:	42a3      	cmp	r3, r4
 8008f58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f5c:	bf08      	it	eq
 8008f5e:	2300      	moveq	r3, #0
 8008f60:	6102      	str	r2, [r0, #16]
 8008f62:	bf08      	it	eq
 8008f64:	6143      	streq	r3, [r0, #20]
 8008f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f6a:	f8dc c000 	ldr.w	ip, [ip]
 8008f6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f72:	ea4c 0707 	orr.w	r7, ip, r7
 8008f76:	f849 7b04 	str.w	r7, [r9], #4
 8008f7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f7e:	40cf      	lsrs	r7, r1
 8008f80:	e7da      	b.n	8008f38 <rshift+0x4c>
 8008f82:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f86:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f8a:	e7c3      	b.n	8008f14 <rshift+0x28>
 8008f8c:	4623      	mov	r3, r4
 8008f8e:	e7e1      	b.n	8008f54 <rshift+0x68>

08008f90 <__hexdig_fun>:
 8008f90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008f94:	2b09      	cmp	r3, #9
 8008f96:	d802      	bhi.n	8008f9e <__hexdig_fun+0xe>
 8008f98:	3820      	subs	r0, #32
 8008f9a:	b2c0      	uxtb	r0, r0
 8008f9c:	4770      	bx	lr
 8008f9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	d801      	bhi.n	8008faa <__hexdig_fun+0x1a>
 8008fa6:	3847      	subs	r0, #71	@ 0x47
 8008fa8:	e7f7      	b.n	8008f9a <__hexdig_fun+0xa>
 8008faa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	d801      	bhi.n	8008fb6 <__hexdig_fun+0x26>
 8008fb2:	3827      	subs	r0, #39	@ 0x27
 8008fb4:	e7f1      	b.n	8008f9a <__hexdig_fun+0xa>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	4770      	bx	lr
	...

08008fbc <__gethex>:
 8008fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	468a      	mov	sl, r1
 8008fc4:	9302      	str	r3, [sp, #8]
 8008fc6:	680b      	ldr	r3, [r1, #0]
 8008fc8:	9001      	str	r0, [sp, #4]
 8008fca:	4690      	mov	r8, r2
 8008fcc:	1c9c      	adds	r4, r3, #2
 8008fce:	46a1      	mov	r9, r4
 8008fd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008fd4:	2830      	cmp	r0, #48	@ 0x30
 8008fd6:	d0fa      	beq.n	8008fce <__gethex+0x12>
 8008fd8:	eba9 0303 	sub.w	r3, r9, r3
 8008fdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8008fe0:	f7ff ffd6 	bl	8008f90 <__hexdig_fun>
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d168      	bne.n	80090bc <__gethex+0x100>
 8008fea:	49a0      	ldr	r1, [pc, #640]	@ (800926c <__gethex+0x2b0>)
 8008fec:	2201      	movs	r2, #1
 8008fee:	4648      	mov	r0, r9
 8008ff0:	f7ff ff12 	bl	8008e18 <strncmp>
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d167      	bne.n	80090ca <__gethex+0x10e>
 8008ffa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ffe:	4626      	mov	r6, r4
 8009000:	f7ff ffc6 	bl	8008f90 <__hexdig_fun>
 8009004:	2800      	cmp	r0, #0
 8009006:	d062      	beq.n	80090ce <__gethex+0x112>
 8009008:	4623      	mov	r3, r4
 800900a:	7818      	ldrb	r0, [r3, #0]
 800900c:	2830      	cmp	r0, #48	@ 0x30
 800900e:	4699      	mov	r9, r3
 8009010:	f103 0301 	add.w	r3, r3, #1
 8009014:	d0f9      	beq.n	800900a <__gethex+0x4e>
 8009016:	f7ff ffbb 	bl	8008f90 <__hexdig_fun>
 800901a:	fab0 f580 	clz	r5, r0
 800901e:	096d      	lsrs	r5, r5, #5
 8009020:	f04f 0b01 	mov.w	fp, #1
 8009024:	464a      	mov	r2, r9
 8009026:	4616      	mov	r6, r2
 8009028:	3201      	adds	r2, #1
 800902a:	7830      	ldrb	r0, [r6, #0]
 800902c:	f7ff ffb0 	bl	8008f90 <__hexdig_fun>
 8009030:	2800      	cmp	r0, #0
 8009032:	d1f8      	bne.n	8009026 <__gethex+0x6a>
 8009034:	498d      	ldr	r1, [pc, #564]	@ (800926c <__gethex+0x2b0>)
 8009036:	2201      	movs	r2, #1
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff feed 	bl	8008e18 <strncmp>
 800903e:	2800      	cmp	r0, #0
 8009040:	d13f      	bne.n	80090c2 <__gethex+0x106>
 8009042:	b944      	cbnz	r4, 8009056 <__gethex+0x9a>
 8009044:	1c74      	adds	r4, r6, #1
 8009046:	4622      	mov	r2, r4
 8009048:	4616      	mov	r6, r2
 800904a:	3201      	adds	r2, #1
 800904c:	7830      	ldrb	r0, [r6, #0]
 800904e:	f7ff ff9f 	bl	8008f90 <__hexdig_fun>
 8009052:	2800      	cmp	r0, #0
 8009054:	d1f8      	bne.n	8009048 <__gethex+0x8c>
 8009056:	1ba4      	subs	r4, r4, r6
 8009058:	00a7      	lsls	r7, r4, #2
 800905a:	7833      	ldrb	r3, [r6, #0]
 800905c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009060:	2b50      	cmp	r3, #80	@ 0x50
 8009062:	d13e      	bne.n	80090e2 <__gethex+0x126>
 8009064:	7873      	ldrb	r3, [r6, #1]
 8009066:	2b2b      	cmp	r3, #43	@ 0x2b
 8009068:	d033      	beq.n	80090d2 <__gethex+0x116>
 800906a:	2b2d      	cmp	r3, #45	@ 0x2d
 800906c:	d034      	beq.n	80090d8 <__gethex+0x11c>
 800906e:	1c71      	adds	r1, r6, #1
 8009070:	2400      	movs	r4, #0
 8009072:	7808      	ldrb	r0, [r1, #0]
 8009074:	f7ff ff8c 	bl	8008f90 <__hexdig_fun>
 8009078:	1e43      	subs	r3, r0, #1
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b18      	cmp	r3, #24
 800907e:	d830      	bhi.n	80090e2 <__gethex+0x126>
 8009080:	f1a0 0210 	sub.w	r2, r0, #16
 8009084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009088:	f7ff ff82 	bl	8008f90 <__hexdig_fun>
 800908c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009090:	fa5f fc8c 	uxtb.w	ip, ip
 8009094:	f1bc 0f18 	cmp.w	ip, #24
 8009098:	f04f 030a 	mov.w	r3, #10
 800909c:	d91e      	bls.n	80090dc <__gethex+0x120>
 800909e:	b104      	cbz	r4, 80090a2 <__gethex+0xe6>
 80090a0:	4252      	negs	r2, r2
 80090a2:	4417      	add	r7, r2
 80090a4:	f8ca 1000 	str.w	r1, [sl]
 80090a8:	b1ed      	cbz	r5, 80090e6 <__gethex+0x12a>
 80090aa:	f1bb 0f00 	cmp.w	fp, #0
 80090ae:	bf0c      	ite	eq
 80090b0:	2506      	moveq	r5, #6
 80090b2:	2500      	movne	r5, #0
 80090b4:	4628      	mov	r0, r5
 80090b6:	b005      	add	sp, #20
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090bc:	2500      	movs	r5, #0
 80090be:	462c      	mov	r4, r5
 80090c0:	e7b0      	b.n	8009024 <__gethex+0x68>
 80090c2:	2c00      	cmp	r4, #0
 80090c4:	d1c7      	bne.n	8009056 <__gethex+0x9a>
 80090c6:	4627      	mov	r7, r4
 80090c8:	e7c7      	b.n	800905a <__gethex+0x9e>
 80090ca:	464e      	mov	r6, r9
 80090cc:	462f      	mov	r7, r5
 80090ce:	2501      	movs	r5, #1
 80090d0:	e7c3      	b.n	800905a <__gethex+0x9e>
 80090d2:	2400      	movs	r4, #0
 80090d4:	1cb1      	adds	r1, r6, #2
 80090d6:	e7cc      	b.n	8009072 <__gethex+0xb6>
 80090d8:	2401      	movs	r4, #1
 80090da:	e7fb      	b.n	80090d4 <__gethex+0x118>
 80090dc:	fb03 0002 	mla	r0, r3, r2, r0
 80090e0:	e7ce      	b.n	8009080 <__gethex+0xc4>
 80090e2:	4631      	mov	r1, r6
 80090e4:	e7de      	b.n	80090a4 <__gethex+0xe8>
 80090e6:	eba6 0309 	sub.w	r3, r6, r9
 80090ea:	3b01      	subs	r3, #1
 80090ec:	4629      	mov	r1, r5
 80090ee:	2b07      	cmp	r3, #7
 80090f0:	dc0a      	bgt.n	8009108 <__gethex+0x14c>
 80090f2:	9801      	ldr	r0, [sp, #4]
 80090f4:	f7fe f944 	bl	8007380 <_Balloc>
 80090f8:	4604      	mov	r4, r0
 80090fa:	b940      	cbnz	r0, 800910e <__gethex+0x152>
 80090fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009270 <__gethex+0x2b4>)
 80090fe:	4602      	mov	r2, r0
 8009100:	21e4      	movs	r1, #228	@ 0xe4
 8009102:	485c      	ldr	r0, [pc, #368]	@ (8009274 <__gethex+0x2b8>)
 8009104:	f7ff fec0 	bl	8008e88 <__assert_func>
 8009108:	3101      	adds	r1, #1
 800910a:	105b      	asrs	r3, r3, #1
 800910c:	e7ef      	b.n	80090ee <__gethex+0x132>
 800910e:	f100 0a14 	add.w	sl, r0, #20
 8009112:	2300      	movs	r3, #0
 8009114:	4655      	mov	r5, sl
 8009116:	469b      	mov	fp, r3
 8009118:	45b1      	cmp	r9, r6
 800911a:	d337      	bcc.n	800918c <__gethex+0x1d0>
 800911c:	f845 bb04 	str.w	fp, [r5], #4
 8009120:	eba5 050a 	sub.w	r5, r5, sl
 8009124:	10ad      	asrs	r5, r5, #2
 8009126:	6125      	str	r5, [r4, #16]
 8009128:	4658      	mov	r0, fp
 800912a:	f7fe fa1b 	bl	8007564 <__hi0bits>
 800912e:	016d      	lsls	r5, r5, #5
 8009130:	f8d8 6000 	ldr.w	r6, [r8]
 8009134:	1a2d      	subs	r5, r5, r0
 8009136:	42b5      	cmp	r5, r6
 8009138:	dd54      	ble.n	80091e4 <__gethex+0x228>
 800913a:	1bad      	subs	r5, r5, r6
 800913c:	4629      	mov	r1, r5
 800913e:	4620      	mov	r0, r4
 8009140:	f7fe fda7 	bl	8007c92 <__any_on>
 8009144:	4681      	mov	r9, r0
 8009146:	b178      	cbz	r0, 8009168 <__gethex+0x1ac>
 8009148:	1e6b      	subs	r3, r5, #1
 800914a:	1159      	asrs	r1, r3, #5
 800914c:	f003 021f 	and.w	r2, r3, #31
 8009150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009154:	f04f 0901 	mov.w	r9, #1
 8009158:	fa09 f202 	lsl.w	r2, r9, r2
 800915c:	420a      	tst	r2, r1
 800915e:	d003      	beq.n	8009168 <__gethex+0x1ac>
 8009160:	454b      	cmp	r3, r9
 8009162:	dc36      	bgt.n	80091d2 <__gethex+0x216>
 8009164:	f04f 0902 	mov.w	r9, #2
 8009168:	4629      	mov	r1, r5
 800916a:	4620      	mov	r0, r4
 800916c:	f7ff febe 	bl	8008eec <rshift>
 8009170:	442f      	add	r7, r5
 8009172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009176:	42bb      	cmp	r3, r7
 8009178:	da42      	bge.n	8009200 <__gethex+0x244>
 800917a:	9801      	ldr	r0, [sp, #4]
 800917c:	4621      	mov	r1, r4
 800917e:	f7fe f93f 	bl	8007400 <_Bfree>
 8009182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009184:	2300      	movs	r3, #0
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	25a3      	movs	r5, #163	@ 0xa3
 800918a:	e793      	b.n	80090b4 <__gethex+0xf8>
 800918c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009190:	2a2e      	cmp	r2, #46	@ 0x2e
 8009192:	d012      	beq.n	80091ba <__gethex+0x1fe>
 8009194:	2b20      	cmp	r3, #32
 8009196:	d104      	bne.n	80091a2 <__gethex+0x1e6>
 8009198:	f845 bb04 	str.w	fp, [r5], #4
 800919c:	f04f 0b00 	mov.w	fp, #0
 80091a0:	465b      	mov	r3, fp
 80091a2:	7830      	ldrb	r0, [r6, #0]
 80091a4:	9303      	str	r3, [sp, #12]
 80091a6:	f7ff fef3 	bl	8008f90 <__hexdig_fun>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	f000 000f 	and.w	r0, r0, #15
 80091b0:	4098      	lsls	r0, r3
 80091b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80091b6:	3304      	adds	r3, #4
 80091b8:	e7ae      	b.n	8009118 <__gethex+0x15c>
 80091ba:	45b1      	cmp	r9, r6
 80091bc:	d8ea      	bhi.n	8009194 <__gethex+0x1d8>
 80091be:	492b      	ldr	r1, [pc, #172]	@ (800926c <__gethex+0x2b0>)
 80091c0:	9303      	str	r3, [sp, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff fe27 	bl	8008e18 <strncmp>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d1e1      	bne.n	8009194 <__gethex+0x1d8>
 80091d0:	e7a2      	b.n	8009118 <__gethex+0x15c>
 80091d2:	1ea9      	subs	r1, r5, #2
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7fe fd5c 	bl	8007c92 <__any_on>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0c2      	beq.n	8009164 <__gethex+0x1a8>
 80091de:	f04f 0903 	mov.w	r9, #3
 80091e2:	e7c1      	b.n	8009168 <__gethex+0x1ac>
 80091e4:	da09      	bge.n	80091fa <__gethex+0x23e>
 80091e6:	1b75      	subs	r5, r6, r5
 80091e8:	4621      	mov	r1, r4
 80091ea:	9801      	ldr	r0, [sp, #4]
 80091ec:	462a      	mov	r2, r5
 80091ee:	f7fe fb17 	bl	8007820 <__lshift>
 80091f2:	1b7f      	subs	r7, r7, r5
 80091f4:	4604      	mov	r4, r0
 80091f6:	f100 0a14 	add.w	sl, r0, #20
 80091fa:	f04f 0900 	mov.w	r9, #0
 80091fe:	e7b8      	b.n	8009172 <__gethex+0x1b6>
 8009200:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009204:	42bd      	cmp	r5, r7
 8009206:	dd6f      	ble.n	80092e8 <__gethex+0x32c>
 8009208:	1bed      	subs	r5, r5, r7
 800920a:	42ae      	cmp	r6, r5
 800920c:	dc34      	bgt.n	8009278 <__gethex+0x2bc>
 800920e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009212:	2b02      	cmp	r3, #2
 8009214:	d022      	beq.n	800925c <__gethex+0x2a0>
 8009216:	2b03      	cmp	r3, #3
 8009218:	d024      	beq.n	8009264 <__gethex+0x2a8>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d115      	bne.n	800924a <__gethex+0x28e>
 800921e:	42ae      	cmp	r6, r5
 8009220:	d113      	bne.n	800924a <__gethex+0x28e>
 8009222:	2e01      	cmp	r6, #1
 8009224:	d10b      	bne.n	800923e <__gethex+0x282>
 8009226:	9a02      	ldr	r2, [sp, #8]
 8009228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	2301      	movs	r3, #1
 8009230:	6123      	str	r3, [r4, #16]
 8009232:	f8ca 3000 	str.w	r3, [sl]
 8009236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009238:	2562      	movs	r5, #98	@ 0x62
 800923a:	601c      	str	r4, [r3, #0]
 800923c:	e73a      	b.n	80090b4 <__gethex+0xf8>
 800923e:	1e71      	subs	r1, r6, #1
 8009240:	4620      	mov	r0, r4
 8009242:	f7fe fd26 	bl	8007c92 <__any_on>
 8009246:	2800      	cmp	r0, #0
 8009248:	d1ed      	bne.n	8009226 <__gethex+0x26a>
 800924a:	9801      	ldr	r0, [sp, #4]
 800924c:	4621      	mov	r1, r4
 800924e:	f7fe f8d7 	bl	8007400 <_Bfree>
 8009252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009254:	2300      	movs	r3, #0
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	2550      	movs	r5, #80	@ 0x50
 800925a:	e72b      	b.n	80090b4 <__gethex+0xf8>
 800925c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1f3      	bne.n	800924a <__gethex+0x28e>
 8009262:	e7e0      	b.n	8009226 <__gethex+0x26a>
 8009264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1dd      	bne.n	8009226 <__gethex+0x26a>
 800926a:	e7ee      	b.n	800924a <__gethex+0x28e>
 800926c:	0800a0a3 	.word	0x0800a0a3
 8009270:	0800a039 	.word	0x0800a039
 8009274:	0800a0fa 	.word	0x0800a0fa
 8009278:	1e6f      	subs	r7, r5, #1
 800927a:	f1b9 0f00 	cmp.w	r9, #0
 800927e:	d130      	bne.n	80092e2 <__gethex+0x326>
 8009280:	b127      	cbz	r7, 800928c <__gethex+0x2d0>
 8009282:	4639      	mov	r1, r7
 8009284:	4620      	mov	r0, r4
 8009286:	f7fe fd04 	bl	8007c92 <__any_on>
 800928a:	4681      	mov	r9, r0
 800928c:	117a      	asrs	r2, r7, #5
 800928e:	2301      	movs	r3, #1
 8009290:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009294:	f007 071f 	and.w	r7, r7, #31
 8009298:	40bb      	lsls	r3, r7
 800929a:	4213      	tst	r3, r2
 800929c:	4629      	mov	r1, r5
 800929e:	4620      	mov	r0, r4
 80092a0:	bf18      	it	ne
 80092a2:	f049 0902 	orrne.w	r9, r9, #2
 80092a6:	f7ff fe21 	bl	8008eec <rshift>
 80092aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80092ae:	1b76      	subs	r6, r6, r5
 80092b0:	2502      	movs	r5, #2
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	d047      	beq.n	8009348 <__gethex+0x38c>
 80092b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d015      	beq.n	80092ec <__gethex+0x330>
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d017      	beq.n	80092f4 <__gethex+0x338>
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d109      	bne.n	80092dc <__gethex+0x320>
 80092c8:	f019 0f02 	tst.w	r9, #2
 80092cc:	d006      	beq.n	80092dc <__gethex+0x320>
 80092ce:	f8da 3000 	ldr.w	r3, [sl]
 80092d2:	ea49 0903 	orr.w	r9, r9, r3
 80092d6:	f019 0f01 	tst.w	r9, #1
 80092da:	d10e      	bne.n	80092fa <__gethex+0x33e>
 80092dc:	f045 0510 	orr.w	r5, r5, #16
 80092e0:	e032      	b.n	8009348 <__gethex+0x38c>
 80092e2:	f04f 0901 	mov.w	r9, #1
 80092e6:	e7d1      	b.n	800928c <__gethex+0x2d0>
 80092e8:	2501      	movs	r5, #1
 80092ea:	e7e2      	b.n	80092b2 <__gethex+0x2f6>
 80092ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092ee:	f1c3 0301 	rsb	r3, r3, #1
 80092f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <__gethex+0x320>
 80092fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80092fe:	f104 0314 	add.w	r3, r4, #20
 8009302:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009306:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800930a:	f04f 0c00 	mov.w	ip, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f853 2b04 	ldr.w	r2, [r3], #4
 8009314:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009318:	d01b      	beq.n	8009352 <__gethex+0x396>
 800931a:	3201      	adds	r2, #1
 800931c:	6002      	str	r2, [r0, #0]
 800931e:	2d02      	cmp	r5, #2
 8009320:	f104 0314 	add.w	r3, r4, #20
 8009324:	d13c      	bne.n	80093a0 <__gethex+0x3e4>
 8009326:	f8d8 2000 	ldr.w	r2, [r8]
 800932a:	3a01      	subs	r2, #1
 800932c:	42b2      	cmp	r2, r6
 800932e:	d109      	bne.n	8009344 <__gethex+0x388>
 8009330:	1171      	asrs	r1, r6, #5
 8009332:	2201      	movs	r2, #1
 8009334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009338:	f006 061f 	and.w	r6, r6, #31
 800933c:	fa02 f606 	lsl.w	r6, r2, r6
 8009340:	421e      	tst	r6, r3
 8009342:	d13a      	bne.n	80093ba <__gethex+0x3fe>
 8009344:	f045 0520 	orr.w	r5, r5, #32
 8009348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800934a:	601c      	str	r4, [r3, #0]
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	601f      	str	r7, [r3, #0]
 8009350:	e6b0      	b.n	80090b4 <__gethex+0xf8>
 8009352:	4299      	cmp	r1, r3
 8009354:	f843 cc04 	str.w	ip, [r3, #-4]
 8009358:	d8d9      	bhi.n	800930e <__gethex+0x352>
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	459b      	cmp	fp, r3
 800935e:	db17      	blt.n	8009390 <__gethex+0x3d4>
 8009360:	6861      	ldr	r1, [r4, #4]
 8009362:	9801      	ldr	r0, [sp, #4]
 8009364:	3101      	adds	r1, #1
 8009366:	f7fe f80b 	bl	8007380 <_Balloc>
 800936a:	4681      	mov	r9, r0
 800936c:	b918      	cbnz	r0, 8009376 <__gethex+0x3ba>
 800936e:	4b1a      	ldr	r3, [pc, #104]	@ (80093d8 <__gethex+0x41c>)
 8009370:	4602      	mov	r2, r0
 8009372:	2184      	movs	r1, #132	@ 0x84
 8009374:	e6c5      	b.n	8009102 <__gethex+0x146>
 8009376:	6922      	ldr	r2, [r4, #16]
 8009378:	3202      	adds	r2, #2
 800937a:	f104 010c 	add.w	r1, r4, #12
 800937e:	0092      	lsls	r2, r2, #2
 8009380:	300c      	adds	r0, #12
 8009382:	f7ff fd6b 	bl	8008e5c <memcpy>
 8009386:	4621      	mov	r1, r4
 8009388:	9801      	ldr	r0, [sp, #4]
 800938a:	f7fe f839 	bl	8007400 <_Bfree>
 800938e:	464c      	mov	r4, r9
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009398:	6122      	str	r2, [r4, #16]
 800939a:	2201      	movs	r2, #1
 800939c:	615a      	str	r2, [r3, #20]
 800939e:	e7be      	b.n	800931e <__gethex+0x362>
 80093a0:	6922      	ldr	r2, [r4, #16]
 80093a2:	455a      	cmp	r2, fp
 80093a4:	dd0b      	ble.n	80093be <__gethex+0x402>
 80093a6:	2101      	movs	r1, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff fd9f 	bl	8008eec <rshift>
 80093ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093b2:	3701      	adds	r7, #1
 80093b4:	42bb      	cmp	r3, r7
 80093b6:	f6ff aee0 	blt.w	800917a <__gethex+0x1be>
 80093ba:	2501      	movs	r5, #1
 80093bc:	e7c2      	b.n	8009344 <__gethex+0x388>
 80093be:	f016 061f 	ands.w	r6, r6, #31
 80093c2:	d0fa      	beq.n	80093ba <__gethex+0x3fe>
 80093c4:	4453      	add	r3, sl
 80093c6:	f1c6 0620 	rsb	r6, r6, #32
 80093ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80093ce:	f7fe f8c9 	bl	8007564 <__hi0bits>
 80093d2:	42b0      	cmp	r0, r6
 80093d4:	dbe7      	blt.n	80093a6 <__gethex+0x3ea>
 80093d6:	e7f0      	b.n	80093ba <__gethex+0x3fe>
 80093d8:	0800a039 	.word	0x0800a039

080093dc <L_shift>:
 80093dc:	f1c2 0208 	rsb	r2, r2, #8
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	b570      	push	{r4, r5, r6, lr}
 80093e4:	f1c2 0620 	rsb	r6, r2, #32
 80093e8:	6843      	ldr	r3, [r0, #4]
 80093ea:	6804      	ldr	r4, [r0, #0]
 80093ec:	fa03 f506 	lsl.w	r5, r3, r6
 80093f0:	432c      	orrs	r4, r5
 80093f2:	40d3      	lsrs	r3, r2
 80093f4:	6004      	str	r4, [r0, #0]
 80093f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80093fa:	4288      	cmp	r0, r1
 80093fc:	d3f4      	bcc.n	80093e8 <L_shift+0xc>
 80093fe:	bd70      	pop	{r4, r5, r6, pc}

08009400 <__match>:
 8009400:	b530      	push	{r4, r5, lr}
 8009402:	6803      	ldr	r3, [r0, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	b914      	cbnz	r4, 8009412 <__match+0x12>
 800940c:	6003      	str	r3, [r0, #0]
 800940e:	2001      	movs	r0, #1
 8009410:	bd30      	pop	{r4, r5, pc}
 8009412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009416:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800941a:	2d19      	cmp	r5, #25
 800941c:	bf98      	it	ls
 800941e:	3220      	addls	r2, #32
 8009420:	42a2      	cmp	r2, r4
 8009422:	d0f0      	beq.n	8009406 <__match+0x6>
 8009424:	2000      	movs	r0, #0
 8009426:	e7f3      	b.n	8009410 <__match+0x10>

08009428 <__hexnan>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	680b      	ldr	r3, [r1, #0]
 800942e:	6801      	ldr	r1, [r0, #0]
 8009430:	115e      	asrs	r6, r3, #5
 8009432:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009436:	f013 031f 	ands.w	r3, r3, #31
 800943a:	b087      	sub	sp, #28
 800943c:	bf18      	it	ne
 800943e:	3604      	addne	r6, #4
 8009440:	2500      	movs	r5, #0
 8009442:	1f37      	subs	r7, r6, #4
 8009444:	4682      	mov	sl, r0
 8009446:	4690      	mov	r8, r2
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	f846 5c04 	str.w	r5, [r6, #-4]
 800944e:	46b9      	mov	r9, r7
 8009450:	463c      	mov	r4, r7
 8009452:	9502      	str	r5, [sp, #8]
 8009454:	46ab      	mov	fp, r5
 8009456:	784a      	ldrb	r2, [r1, #1]
 8009458:	1c4b      	adds	r3, r1, #1
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	b342      	cbz	r2, 80094b0 <__hexnan+0x88>
 800945e:	4610      	mov	r0, r2
 8009460:	9105      	str	r1, [sp, #20]
 8009462:	9204      	str	r2, [sp, #16]
 8009464:	f7ff fd94 	bl	8008f90 <__hexdig_fun>
 8009468:	2800      	cmp	r0, #0
 800946a:	d151      	bne.n	8009510 <__hexnan+0xe8>
 800946c:	9a04      	ldr	r2, [sp, #16]
 800946e:	9905      	ldr	r1, [sp, #20]
 8009470:	2a20      	cmp	r2, #32
 8009472:	d818      	bhi.n	80094a6 <__hexnan+0x7e>
 8009474:	9b02      	ldr	r3, [sp, #8]
 8009476:	459b      	cmp	fp, r3
 8009478:	dd13      	ble.n	80094a2 <__hexnan+0x7a>
 800947a:	454c      	cmp	r4, r9
 800947c:	d206      	bcs.n	800948c <__hexnan+0x64>
 800947e:	2d07      	cmp	r5, #7
 8009480:	dc04      	bgt.n	800948c <__hexnan+0x64>
 8009482:	462a      	mov	r2, r5
 8009484:	4649      	mov	r1, r9
 8009486:	4620      	mov	r0, r4
 8009488:	f7ff ffa8 	bl	80093dc <L_shift>
 800948c:	4544      	cmp	r4, r8
 800948e:	d952      	bls.n	8009536 <__hexnan+0x10e>
 8009490:	2300      	movs	r3, #0
 8009492:	f1a4 0904 	sub.w	r9, r4, #4
 8009496:	f844 3c04 	str.w	r3, [r4, #-4]
 800949a:	f8cd b008 	str.w	fp, [sp, #8]
 800949e:	464c      	mov	r4, r9
 80094a0:	461d      	mov	r5, r3
 80094a2:	9903      	ldr	r1, [sp, #12]
 80094a4:	e7d7      	b.n	8009456 <__hexnan+0x2e>
 80094a6:	2a29      	cmp	r2, #41	@ 0x29
 80094a8:	d157      	bne.n	800955a <__hexnan+0x132>
 80094aa:	3102      	adds	r1, #2
 80094ac:	f8ca 1000 	str.w	r1, [sl]
 80094b0:	f1bb 0f00 	cmp.w	fp, #0
 80094b4:	d051      	beq.n	800955a <__hexnan+0x132>
 80094b6:	454c      	cmp	r4, r9
 80094b8:	d206      	bcs.n	80094c8 <__hexnan+0xa0>
 80094ba:	2d07      	cmp	r5, #7
 80094bc:	dc04      	bgt.n	80094c8 <__hexnan+0xa0>
 80094be:	462a      	mov	r2, r5
 80094c0:	4649      	mov	r1, r9
 80094c2:	4620      	mov	r0, r4
 80094c4:	f7ff ff8a 	bl	80093dc <L_shift>
 80094c8:	4544      	cmp	r4, r8
 80094ca:	d936      	bls.n	800953a <__hexnan+0x112>
 80094cc:	f1a8 0204 	sub.w	r2, r8, #4
 80094d0:	4623      	mov	r3, r4
 80094d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80094d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80094da:	429f      	cmp	r7, r3
 80094dc:	d2f9      	bcs.n	80094d2 <__hexnan+0xaa>
 80094de:	1b3b      	subs	r3, r7, r4
 80094e0:	f023 0303 	bic.w	r3, r3, #3
 80094e4:	3304      	adds	r3, #4
 80094e6:	3401      	adds	r4, #1
 80094e8:	3e03      	subs	r6, #3
 80094ea:	42b4      	cmp	r4, r6
 80094ec:	bf88      	it	hi
 80094ee:	2304      	movhi	r3, #4
 80094f0:	4443      	add	r3, r8
 80094f2:	2200      	movs	r2, #0
 80094f4:	f843 2b04 	str.w	r2, [r3], #4
 80094f8:	429f      	cmp	r7, r3
 80094fa:	d2fb      	bcs.n	80094f4 <__hexnan+0xcc>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	b91b      	cbnz	r3, 8009508 <__hexnan+0xe0>
 8009500:	4547      	cmp	r7, r8
 8009502:	d128      	bne.n	8009556 <__hexnan+0x12e>
 8009504:	2301      	movs	r3, #1
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	2005      	movs	r0, #5
 800950a:	b007      	add	sp, #28
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	3501      	adds	r5, #1
 8009512:	2d08      	cmp	r5, #8
 8009514:	f10b 0b01 	add.w	fp, fp, #1
 8009518:	dd06      	ble.n	8009528 <__hexnan+0x100>
 800951a:	4544      	cmp	r4, r8
 800951c:	d9c1      	bls.n	80094a2 <__hexnan+0x7a>
 800951e:	2300      	movs	r3, #0
 8009520:	f844 3c04 	str.w	r3, [r4, #-4]
 8009524:	2501      	movs	r5, #1
 8009526:	3c04      	subs	r4, #4
 8009528:	6822      	ldr	r2, [r4, #0]
 800952a:	f000 000f 	and.w	r0, r0, #15
 800952e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009532:	6020      	str	r0, [r4, #0]
 8009534:	e7b5      	b.n	80094a2 <__hexnan+0x7a>
 8009536:	2508      	movs	r5, #8
 8009538:	e7b3      	b.n	80094a2 <__hexnan+0x7a>
 800953a:	9b01      	ldr	r3, [sp, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0dd      	beq.n	80094fc <__hexnan+0xd4>
 8009540:	f1c3 0320 	rsb	r3, r3, #32
 8009544:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009548:	40da      	lsrs	r2, r3
 800954a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800954e:	4013      	ands	r3, r2
 8009550:	f846 3c04 	str.w	r3, [r6, #-4]
 8009554:	e7d2      	b.n	80094fc <__hexnan+0xd4>
 8009556:	3f04      	subs	r7, #4
 8009558:	e7d0      	b.n	80094fc <__hexnan+0xd4>
 800955a:	2004      	movs	r0, #4
 800955c:	e7d5      	b.n	800950a <__hexnan+0xe2>

0800955e <__ascii_mbtowc>:
 800955e:	b082      	sub	sp, #8
 8009560:	b901      	cbnz	r1, 8009564 <__ascii_mbtowc+0x6>
 8009562:	a901      	add	r1, sp, #4
 8009564:	b142      	cbz	r2, 8009578 <__ascii_mbtowc+0x1a>
 8009566:	b14b      	cbz	r3, 800957c <__ascii_mbtowc+0x1e>
 8009568:	7813      	ldrb	r3, [r2, #0]
 800956a:	600b      	str	r3, [r1, #0]
 800956c:	7812      	ldrb	r2, [r2, #0]
 800956e:	1e10      	subs	r0, r2, #0
 8009570:	bf18      	it	ne
 8009572:	2001      	movne	r0, #1
 8009574:	b002      	add	sp, #8
 8009576:	4770      	bx	lr
 8009578:	4610      	mov	r0, r2
 800957a:	e7fb      	b.n	8009574 <__ascii_mbtowc+0x16>
 800957c:	f06f 0001 	mvn.w	r0, #1
 8009580:	e7f8      	b.n	8009574 <__ascii_mbtowc+0x16>

08009582 <_realloc_r>:
 8009582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	4607      	mov	r7, r0
 8009588:	4614      	mov	r4, r2
 800958a:	460d      	mov	r5, r1
 800958c:	b921      	cbnz	r1, 8009598 <_realloc_r+0x16>
 800958e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009592:	4611      	mov	r1, r2
 8009594:	f7fd be68 	b.w	8007268 <_malloc_r>
 8009598:	b92a      	cbnz	r2, 80095a6 <_realloc_r+0x24>
 800959a:	f7fd fdf1 	bl	8007180 <_free_r>
 800959e:	4625      	mov	r5, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a6:	f000 f840 	bl	800962a <_malloc_usable_size_r>
 80095aa:	4284      	cmp	r4, r0
 80095ac:	4606      	mov	r6, r0
 80095ae:	d802      	bhi.n	80095b6 <_realloc_r+0x34>
 80095b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095b4:	d8f4      	bhi.n	80095a0 <_realloc_r+0x1e>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7fd fe55 	bl	8007268 <_malloc_r>
 80095be:	4680      	mov	r8, r0
 80095c0:	b908      	cbnz	r0, 80095c6 <_realloc_r+0x44>
 80095c2:	4645      	mov	r5, r8
 80095c4:	e7ec      	b.n	80095a0 <_realloc_r+0x1e>
 80095c6:	42b4      	cmp	r4, r6
 80095c8:	4622      	mov	r2, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	bf28      	it	cs
 80095ce:	4632      	movcs	r2, r6
 80095d0:	f7ff fc44 	bl	8008e5c <memcpy>
 80095d4:	4629      	mov	r1, r5
 80095d6:	4638      	mov	r0, r7
 80095d8:	f7fd fdd2 	bl	8007180 <_free_r>
 80095dc:	e7f1      	b.n	80095c2 <_realloc_r+0x40>

080095de <__ascii_wctomb>:
 80095de:	4603      	mov	r3, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	b141      	cbz	r1, 80095f6 <__ascii_wctomb+0x18>
 80095e4:	2aff      	cmp	r2, #255	@ 0xff
 80095e6:	d904      	bls.n	80095f2 <__ascii_wctomb+0x14>
 80095e8:	228a      	movs	r2, #138	@ 0x8a
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095f0:	4770      	bx	lr
 80095f2:	700a      	strb	r2, [r1, #0]
 80095f4:	2001      	movs	r0, #1
 80095f6:	4770      	bx	lr

080095f8 <fiprintf>:
 80095f8:	b40e      	push	{r1, r2, r3}
 80095fa:	b503      	push	{r0, r1, lr}
 80095fc:	4601      	mov	r1, r0
 80095fe:	ab03      	add	r3, sp, #12
 8009600:	4805      	ldr	r0, [pc, #20]	@ (8009618 <fiprintf+0x20>)
 8009602:	f853 2b04 	ldr.w	r2, [r3], #4
 8009606:	6800      	ldr	r0, [r0, #0]
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	f000 f83f 	bl	800968c <_vfiprintf_r>
 800960e:	b002      	add	sp, #8
 8009610:	f85d eb04 	ldr.w	lr, [sp], #4
 8009614:	b003      	add	sp, #12
 8009616:	4770      	bx	lr
 8009618:	2000001c 	.word	0x2000001c

0800961c <abort>:
 800961c:	b508      	push	{r3, lr}
 800961e:	2006      	movs	r0, #6
 8009620:	f000 fa08 	bl	8009a34 <raise>
 8009624:	2001      	movs	r0, #1
 8009626:	f7f8 fca3 	bl	8001f70 <_exit>

0800962a <_malloc_usable_size_r>:
 800962a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962e:	1f18      	subs	r0, r3, #4
 8009630:	2b00      	cmp	r3, #0
 8009632:	bfbc      	itt	lt
 8009634:	580b      	ldrlt	r3, [r1, r0]
 8009636:	18c0      	addlt	r0, r0, r3
 8009638:	4770      	bx	lr

0800963a <__sfputc_r>:
 800963a:	6893      	ldr	r3, [r2, #8]
 800963c:	3b01      	subs	r3, #1
 800963e:	2b00      	cmp	r3, #0
 8009640:	b410      	push	{r4}
 8009642:	6093      	str	r3, [r2, #8]
 8009644:	da08      	bge.n	8009658 <__sfputc_r+0x1e>
 8009646:	6994      	ldr	r4, [r2, #24]
 8009648:	42a3      	cmp	r3, r4
 800964a:	db01      	blt.n	8009650 <__sfputc_r+0x16>
 800964c:	290a      	cmp	r1, #10
 800964e:	d103      	bne.n	8009658 <__sfputc_r+0x1e>
 8009650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009654:	f000 b932 	b.w	80098bc <__swbuf_r>
 8009658:	6813      	ldr	r3, [r2, #0]
 800965a:	1c58      	adds	r0, r3, #1
 800965c:	6010      	str	r0, [r2, #0]
 800965e:	7019      	strb	r1, [r3, #0]
 8009660:	4608      	mov	r0, r1
 8009662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009666:	4770      	bx	lr

08009668 <__sfputs_r>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	4614      	mov	r4, r2
 8009670:	18d5      	adds	r5, r2, r3
 8009672:	42ac      	cmp	r4, r5
 8009674:	d101      	bne.n	800967a <__sfputs_r+0x12>
 8009676:	2000      	movs	r0, #0
 8009678:	e007      	b.n	800968a <__sfputs_r+0x22>
 800967a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967e:	463a      	mov	r2, r7
 8009680:	4630      	mov	r0, r6
 8009682:	f7ff ffda 	bl	800963a <__sfputc_r>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d1f3      	bne.n	8009672 <__sfputs_r+0xa>
 800968a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800968c <_vfiprintf_r>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	460d      	mov	r5, r1
 8009692:	b09d      	sub	sp, #116	@ 0x74
 8009694:	4614      	mov	r4, r2
 8009696:	4698      	mov	r8, r3
 8009698:	4606      	mov	r6, r0
 800969a:	b118      	cbz	r0, 80096a4 <_vfiprintf_r+0x18>
 800969c:	6a03      	ldr	r3, [r0, #32]
 800969e:	b90b      	cbnz	r3, 80096a4 <_vfiprintf_r+0x18>
 80096a0:	f7fc fdf4 	bl	800628c <__sinit>
 80096a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096a6:	07d9      	lsls	r1, r3, #31
 80096a8:	d405      	bmi.n	80096b6 <_vfiprintf_r+0x2a>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	059a      	lsls	r2, r3, #22
 80096ae:	d402      	bmi.n	80096b6 <_vfiprintf_r+0x2a>
 80096b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096b2:	f7fc ff04 	bl	80064be <__retarget_lock_acquire_recursive>
 80096b6:	89ab      	ldrh	r3, [r5, #12]
 80096b8:	071b      	lsls	r3, r3, #28
 80096ba:	d501      	bpl.n	80096c0 <_vfiprintf_r+0x34>
 80096bc:	692b      	ldr	r3, [r5, #16]
 80096be:	b99b      	cbnz	r3, 80096e8 <_vfiprintf_r+0x5c>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4630      	mov	r0, r6
 80096c4:	f000 f938 	bl	8009938 <__swsetup_r>
 80096c8:	b170      	cbz	r0, 80096e8 <_vfiprintf_r+0x5c>
 80096ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096cc:	07dc      	lsls	r4, r3, #31
 80096ce:	d504      	bpl.n	80096da <_vfiprintf_r+0x4e>
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096d4:	b01d      	add	sp, #116	@ 0x74
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	89ab      	ldrh	r3, [r5, #12]
 80096dc:	0598      	lsls	r0, r3, #22
 80096de:	d4f7      	bmi.n	80096d0 <_vfiprintf_r+0x44>
 80096e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096e2:	f7fc feed 	bl	80064c0 <__retarget_lock_release_recursive>
 80096e6:	e7f3      	b.n	80096d0 <_vfiprintf_r+0x44>
 80096e8:	2300      	movs	r3, #0
 80096ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ec:	2320      	movs	r3, #32
 80096ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f6:	2330      	movs	r3, #48	@ 0x30
 80096f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80098a8 <_vfiprintf_r+0x21c>
 80096fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009700:	f04f 0901 	mov.w	r9, #1
 8009704:	4623      	mov	r3, r4
 8009706:	469a      	mov	sl, r3
 8009708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800970c:	b10a      	cbz	r2, 8009712 <_vfiprintf_r+0x86>
 800970e:	2a25      	cmp	r2, #37	@ 0x25
 8009710:	d1f9      	bne.n	8009706 <_vfiprintf_r+0x7a>
 8009712:	ebba 0b04 	subs.w	fp, sl, r4
 8009716:	d00b      	beq.n	8009730 <_vfiprintf_r+0xa4>
 8009718:	465b      	mov	r3, fp
 800971a:	4622      	mov	r2, r4
 800971c:	4629      	mov	r1, r5
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff ffa2 	bl	8009668 <__sfputs_r>
 8009724:	3001      	adds	r0, #1
 8009726:	f000 80a7 	beq.w	8009878 <_vfiprintf_r+0x1ec>
 800972a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800972c:	445a      	add	r2, fp
 800972e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009730:	f89a 3000 	ldrb.w	r3, [sl]
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 809f 	beq.w	8009878 <_vfiprintf_r+0x1ec>
 800973a:	2300      	movs	r3, #0
 800973c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009744:	f10a 0a01 	add.w	sl, sl, #1
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	9307      	str	r3, [sp, #28]
 800974c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009750:	931a      	str	r3, [sp, #104]	@ 0x68
 8009752:	4654      	mov	r4, sl
 8009754:	2205      	movs	r2, #5
 8009756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975a:	4853      	ldr	r0, [pc, #332]	@ (80098a8 <_vfiprintf_r+0x21c>)
 800975c:	f7f6 fd38 	bl	80001d0 <memchr>
 8009760:	9a04      	ldr	r2, [sp, #16]
 8009762:	b9d8      	cbnz	r0, 800979c <_vfiprintf_r+0x110>
 8009764:	06d1      	lsls	r1, r2, #27
 8009766:	bf44      	itt	mi
 8009768:	2320      	movmi	r3, #32
 800976a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800976e:	0713      	lsls	r3, r2, #28
 8009770:	bf44      	itt	mi
 8009772:	232b      	movmi	r3, #43	@ 0x2b
 8009774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009778:	f89a 3000 	ldrb.w	r3, [sl]
 800977c:	2b2a      	cmp	r3, #42	@ 0x2a
 800977e:	d015      	beq.n	80097ac <_vfiprintf_r+0x120>
 8009780:	9a07      	ldr	r2, [sp, #28]
 8009782:	4654      	mov	r4, sl
 8009784:	2000      	movs	r0, #0
 8009786:	f04f 0c0a 	mov.w	ip, #10
 800978a:	4621      	mov	r1, r4
 800978c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009790:	3b30      	subs	r3, #48	@ 0x30
 8009792:	2b09      	cmp	r3, #9
 8009794:	d94b      	bls.n	800982e <_vfiprintf_r+0x1a2>
 8009796:	b1b0      	cbz	r0, 80097c6 <_vfiprintf_r+0x13a>
 8009798:	9207      	str	r2, [sp, #28]
 800979a:	e014      	b.n	80097c6 <_vfiprintf_r+0x13a>
 800979c:	eba0 0308 	sub.w	r3, r0, r8
 80097a0:	fa09 f303 	lsl.w	r3, r9, r3
 80097a4:	4313      	orrs	r3, r2
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	46a2      	mov	sl, r4
 80097aa:	e7d2      	b.n	8009752 <_vfiprintf_r+0xc6>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	1d19      	adds	r1, r3, #4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	9103      	str	r1, [sp, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bfbb      	ittet	lt
 80097b8:	425b      	neglt	r3, r3
 80097ba:	f042 0202 	orrlt.w	r2, r2, #2
 80097be:	9307      	strge	r3, [sp, #28]
 80097c0:	9307      	strlt	r3, [sp, #28]
 80097c2:	bfb8      	it	lt
 80097c4:	9204      	strlt	r2, [sp, #16]
 80097c6:	7823      	ldrb	r3, [r4, #0]
 80097c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80097ca:	d10a      	bne.n	80097e2 <_vfiprintf_r+0x156>
 80097cc:	7863      	ldrb	r3, [r4, #1]
 80097ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80097d0:	d132      	bne.n	8009838 <_vfiprintf_r+0x1ac>
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	1d1a      	adds	r2, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	9203      	str	r2, [sp, #12]
 80097da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097de:	3402      	adds	r4, #2
 80097e0:	9305      	str	r3, [sp, #20]
 80097e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80098b8 <_vfiprintf_r+0x22c>
 80097e6:	7821      	ldrb	r1, [r4, #0]
 80097e8:	2203      	movs	r2, #3
 80097ea:	4650      	mov	r0, sl
 80097ec:	f7f6 fcf0 	bl	80001d0 <memchr>
 80097f0:	b138      	cbz	r0, 8009802 <_vfiprintf_r+0x176>
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	eba0 000a 	sub.w	r0, r0, sl
 80097f8:	2240      	movs	r2, #64	@ 0x40
 80097fa:	4082      	lsls	r2, r0
 80097fc:	4313      	orrs	r3, r2
 80097fe:	3401      	adds	r4, #1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009806:	4829      	ldr	r0, [pc, #164]	@ (80098ac <_vfiprintf_r+0x220>)
 8009808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800980c:	2206      	movs	r2, #6
 800980e:	f7f6 fcdf 	bl	80001d0 <memchr>
 8009812:	2800      	cmp	r0, #0
 8009814:	d03f      	beq.n	8009896 <_vfiprintf_r+0x20a>
 8009816:	4b26      	ldr	r3, [pc, #152]	@ (80098b0 <_vfiprintf_r+0x224>)
 8009818:	bb1b      	cbnz	r3, 8009862 <_vfiprintf_r+0x1d6>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	3307      	adds	r3, #7
 800981e:	f023 0307 	bic.w	r3, r3, #7
 8009822:	3308      	adds	r3, #8
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009828:	443b      	add	r3, r7
 800982a:	9309      	str	r3, [sp, #36]	@ 0x24
 800982c:	e76a      	b.n	8009704 <_vfiprintf_r+0x78>
 800982e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009832:	460c      	mov	r4, r1
 8009834:	2001      	movs	r0, #1
 8009836:	e7a8      	b.n	800978a <_vfiprintf_r+0xfe>
 8009838:	2300      	movs	r3, #0
 800983a:	3401      	adds	r4, #1
 800983c:	9305      	str	r3, [sp, #20]
 800983e:	4619      	mov	r1, r3
 8009840:	f04f 0c0a 	mov.w	ip, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800984a:	3a30      	subs	r2, #48	@ 0x30
 800984c:	2a09      	cmp	r2, #9
 800984e:	d903      	bls.n	8009858 <_vfiprintf_r+0x1cc>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0c6      	beq.n	80097e2 <_vfiprintf_r+0x156>
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	e7c4      	b.n	80097e2 <_vfiprintf_r+0x156>
 8009858:	fb0c 2101 	mla	r1, ip, r1, r2
 800985c:	4604      	mov	r4, r0
 800985e:	2301      	movs	r3, #1
 8009860:	e7f0      	b.n	8009844 <_vfiprintf_r+0x1b8>
 8009862:	ab03      	add	r3, sp, #12
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	462a      	mov	r2, r5
 8009868:	4b12      	ldr	r3, [pc, #72]	@ (80098b4 <_vfiprintf_r+0x228>)
 800986a:	a904      	add	r1, sp, #16
 800986c:	4630      	mov	r0, r6
 800986e:	f7fb febd 	bl	80055ec <_printf_float>
 8009872:	4607      	mov	r7, r0
 8009874:	1c78      	adds	r0, r7, #1
 8009876:	d1d6      	bne.n	8009826 <_vfiprintf_r+0x19a>
 8009878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800987a:	07d9      	lsls	r1, r3, #31
 800987c:	d405      	bmi.n	800988a <_vfiprintf_r+0x1fe>
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	059a      	lsls	r2, r3, #22
 8009882:	d402      	bmi.n	800988a <_vfiprintf_r+0x1fe>
 8009884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009886:	f7fc fe1b 	bl	80064c0 <__retarget_lock_release_recursive>
 800988a:	89ab      	ldrh	r3, [r5, #12]
 800988c:	065b      	lsls	r3, r3, #25
 800988e:	f53f af1f 	bmi.w	80096d0 <_vfiprintf_r+0x44>
 8009892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009894:	e71e      	b.n	80096d4 <_vfiprintf_r+0x48>
 8009896:	ab03      	add	r3, sp, #12
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	462a      	mov	r2, r5
 800989c:	4b05      	ldr	r3, [pc, #20]	@ (80098b4 <_vfiprintf_r+0x228>)
 800989e:	a904      	add	r1, sp, #16
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7fc f93b 	bl	8005b1c <_printf_i>
 80098a6:	e7e4      	b.n	8009872 <_vfiprintf_r+0x1e6>
 80098a8:	0800a0a5 	.word	0x0800a0a5
 80098ac:	0800a0af 	.word	0x0800a0af
 80098b0:	080055ed 	.word	0x080055ed
 80098b4:	08009669 	.word	0x08009669
 80098b8:	0800a0ab 	.word	0x0800a0ab

080098bc <__swbuf_r>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	460e      	mov	r6, r1
 80098c0:	4614      	mov	r4, r2
 80098c2:	4605      	mov	r5, r0
 80098c4:	b118      	cbz	r0, 80098ce <__swbuf_r+0x12>
 80098c6:	6a03      	ldr	r3, [r0, #32]
 80098c8:	b90b      	cbnz	r3, 80098ce <__swbuf_r+0x12>
 80098ca:	f7fc fcdf 	bl	800628c <__sinit>
 80098ce:	69a3      	ldr	r3, [r4, #24]
 80098d0:	60a3      	str	r3, [r4, #8]
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	071a      	lsls	r2, r3, #28
 80098d6:	d501      	bpl.n	80098dc <__swbuf_r+0x20>
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	b943      	cbnz	r3, 80098ee <__swbuf_r+0x32>
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f82a 	bl	8009938 <__swsetup_r>
 80098e4:	b118      	cbz	r0, 80098ee <__swbuf_r+0x32>
 80098e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80098ea:	4638      	mov	r0, r7
 80098ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	6922      	ldr	r2, [r4, #16]
 80098f2:	1a98      	subs	r0, r3, r2
 80098f4:	6963      	ldr	r3, [r4, #20]
 80098f6:	b2f6      	uxtb	r6, r6
 80098f8:	4283      	cmp	r3, r0
 80098fa:	4637      	mov	r7, r6
 80098fc:	dc05      	bgt.n	800990a <__swbuf_r+0x4e>
 80098fe:	4621      	mov	r1, r4
 8009900:	4628      	mov	r0, r5
 8009902:	f7ff fa47 	bl	8008d94 <_fflush_r>
 8009906:	2800      	cmp	r0, #0
 8009908:	d1ed      	bne.n	80098e6 <__swbuf_r+0x2a>
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	3b01      	subs	r3, #1
 800990e:	60a3      	str	r3, [r4, #8]
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	6022      	str	r2, [r4, #0]
 8009916:	701e      	strb	r6, [r3, #0]
 8009918:	6962      	ldr	r2, [r4, #20]
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	429a      	cmp	r2, r3
 800991e:	d004      	beq.n	800992a <__swbuf_r+0x6e>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	07db      	lsls	r3, r3, #31
 8009924:	d5e1      	bpl.n	80098ea <__swbuf_r+0x2e>
 8009926:	2e0a      	cmp	r6, #10
 8009928:	d1df      	bne.n	80098ea <__swbuf_r+0x2e>
 800992a:	4621      	mov	r1, r4
 800992c:	4628      	mov	r0, r5
 800992e:	f7ff fa31 	bl	8008d94 <_fflush_r>
 8009932:	2800      	cmp	r0, #0
 8009934:	d0d9      	beq.n	80098ea <__swbuf_r+0x2e>
 8009936:	e7d6      	b.n	80098e6 <__swbuf_r+0x2a>

08009938 <__swsetup_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4b29      	ldr	r3, [pc, #164]	@ (80099e0 <__swsetup_r+0xa8>)
 800993c:	4605      	mov	r5, r0
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	460c      	mov	r4, r1
 8009942:	b118      	cbz	r0, 800994c <__swsetup_r+0x14>
 8009944:	6a03      	ldr	r3, [r0, #32]
 8009946:	b90b      	cbnz	r3, 800994c <__swsetup_r+0x14>
 8009948:	f7fc fca0 	bl	800628c <__sinit>
 800994c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009950:	0719      	lsls	r1, r3, #28
 8009952:	d422      	bmi.n	800999a <__swsetup_r+0x62>
 8009954:	06da      	lsls	r2, r3, #27
 8009956:	d407      	bmi.n	8009968 <__swsetup_r+0x30>
 8009958:	2209      	movs	r2, #9
 800995a:	602a      	str	r2, [r5, #0]
 800995c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009966:	e033      	b.n	80099d0 <__swsetup_r+0x98>
 8009968:	0758      	lsls	r0, r3, #29
 800996a:	d512      	bpl.n	8009992 <__swsetup_r+0x5a>
 800996c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800996e:	b141      	cbz	r1, 8009982 <__swsetup_r+0x4a>
 8009970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009974:	4299      	cmp	r1, r3
 8009976:	d002      	beq.n	800997e <__swsetup_r+0x46>
 8009978:	4628      	mov	r0, r5
 800997a:	f7fd fc01 	bl	8007180 <_free_r>
 800997e:	2300      	movs	r3, #0
 8009980:	6363      	str	r3, [r4, #52]	@ 0x34
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	2300      	movs	r3, #0
 800998c:	6063      	str	r3, [r4, #4]
 800998e:	6923      	ldr	r3, [r4, #16]
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	f043 0308 	orr.w	r3, r3, #8
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	b94b      	cbnz	r3, 80099b2 <__swsetup_r+0x7a>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a8:	d003      	beq.n	80099b2 <__swsetup_r+0x7a>
 80099aa:	4621      	mov	r1, r4
 80099ac:	4628      	mov	r0, r5
 80099ae:	f000 f883 	bl	8009ab8 <__smakebuf_r>
 80099b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b6:	f013 0201 	ands.w	r2, r3, #1
 80099ba:	d00a      	beq.n	80099d2 <__swsetup_r+0x9a>
 80099bc:	2200      	movs	r2, #0
 80099be:	60a2      	str	r2, [r4, #8]
 80099c0:	6962      	ldr	r2, [r4, #20]
 80099c2:	4252      	negs	r2, r2
 80099c4:	61a2      	str	r2, [r4, #24]
 80099c6:	6922      	ldr	r2, [r4, #16]
 80099c8:	b942      	cbnz	r2, 80099dc <__swsetup_r+0xa4>
 80099ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099ce:	d1c5      	bne.n	800995c <__swsetup_r+0x24>
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	0799      	lsls	r1, r3, #30
 80099d4:	bf58      	it	pl
 80099d6:	6962      	ldrpl	r2, [r4, #20]
 80099d8:	60a2      	str	r2, [r4, #8]
 80099da:	e7f4      	b.n	80099c6 <__swsetup_r+0x8e>
 80099dc:	2000      	movs	r0, #0
 80099de:	e7f7      	b.n	80099d0 <__swsetup_r+0x98>
 80099e0:	2000001c 	.word	0x2000001c

080099e4 <_raise_r>:
 80099e4:	291f      	cmp	r1, #31
 80099e6:	b538      	push	{r3, r4, r5, lr}
 80099e8:	4605      	mov	r5, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	d904      	bls.n	80099f8 <_raise_r+0x14>
 80099ee:	2316      	movs	r3, #22
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80099fa:	b112      	cbz	r2, 8009a02 <_raise_r+0x1e>
 80099fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a00:	b94b      	cbnz	r3, 8009a16 <_raise_r+0x32>
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f830 	bl	8009a68 <_getpid_r>
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a12:	f000 b817 	b.w	8009a44 <_kill_r>
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d00a      	beq.n	8009a30 <_raise_r+0x4c>
 8009a1a:	1c59      	adds	r1, r3, #1
 8009a1c:	d103      	bne.n	8009a26 <_raise_r+0x42>
 8009a1e:	2316      	movs	r3, #22
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	2001      	movs	r0, #1
 8009a24:	e7e7      	b.n	80099f6 <_raise_r+0x12>
 8009a26:	2100      	movs	r1, #0
 8009a28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	4798      	blx	r3
 8009a30:	2000      	movs	r0, #0
 8009a32:	e7e0      	b.n	80099f6 <_raise_r+0x12>

08009a34 <raise>:
 8009a34:	4b02      	ldr	r3, [pc, #8]	@ (8009a40 <raise+0xc>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f7ff bfd3 	b.w	80099e4 <_raise_r>
 8009a3e:	bf00      	nop
 8009a40:	2000001c 	.word	0x2000001c

08009a44 <_kill_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d07      	ldr	r5, [pc, #28]	@ (8009a64 <_kill_r+0x20>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	4611      	mov	r1, r2
 8009a50:	602b      	str	r3, [r5, #0]
 8009a52:	f7f8 fa7d 	bl	8001f50 <_kill>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	d102      	bne.n	8009a60 <_kill_r+0x1c>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	b103      	cbz	r3, 8009a60 <_kill_r+0x1c>
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	bd38      	pop	{r3, r4, r5, pc}
 8009a62:	bf00      	nop
 8009a64:	200005b0 	.word	0x200005b0

08009a68 <_getpid_r>:
 8009a68:	f7f8 ba6a 	b.w	8001f40 <_getpid>

08009a6c <__swhatbuf_r>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	460c      	mov	r4, r1
 8009a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a74:	2900      	cmp	r1, #0
 8009a76:	b096      	sub	sp, #88	@ 0x58
 8009a78:	4615      	mov	r5, r2
 8009a7a:	461e      	mov	r6, r3
 8009a7c:	da0d      	bge.n	8009a9a <__swhatbuf_r+0x2e>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a84:	f04f 0100 	mov.w	r1, #0
 8009a88:	bf14      	ite	ne
 8009a8a:	2340      	movne	r3, #64	@ 0x40
 8009a8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a90:	2000      	movs	r0, #0
 8009a92:	6031      	str	r1, [r6, #0]
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	b016      	add	sp, #88	@ 0x58
 8009a98:	bd70      	pop	{r4, r5, r6, pc}
 8009a9a:	466a      	mov	r2, sp
 8009a9c:	f000 f848 	bl	8009b30 <_fstat_r>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	dbec      	blt.n	8009a7e <__swhatbuf_r+0x12>
 8009aa4:	9901      	ldr	r1, [sp, #4]
 8009aa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009aaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009aae:	4259      	negs	r1, r3
 8009ab0:	4159      	adcs	r1, r3
 8009ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ab6:	e7eb      	b.n	8009a90 <__swhatbuf_r+0x24>

08009ab8 <__smakebuf_r>:
 8009ab8:	898b      	ldrh	r3, [r1, #12]
 8009aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009abc:	079d      	lsls	r5, r3, #30
 8009abe:	4606      	mov	r6, r0
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	d507      	bpl.n	8009ad4 <__smakebuf_r+0x1c>
 8009ac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	2301      	movs	r3, #1
 8009ace:	6163      	str	r3, [r4, #20]
 8009ad0:	b003      	add	sp, #12
 8009ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad4:	ab01      	add	r3, sp, #4
 8009ad6:	466a      	mov	r2, sp
 8009ad8:	f7ff ffc8 	bl	8009a6c <__swhatbuf_r>
 8009adc:	9f00      	ldr	r7, [sp, #0]
 8009ade:	4605      	mov	r5, r0
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7fd fbc0 	bl	8007268 <_malloc_r>
 8009ae8:	b948      	cbnz	r0, 8009afe <__smakebuf_r+0x46>
 8009aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aee:	059a      	lsls	r2, r3, #22
 8009af0:	d4ee      	bmi.n	8009ad0 <__smakebuf_r+0x18>
 8009af2:	f023 0303 	bic.w	r3, r3, #3
 8009af6:	f043 0302 	orr.w	r3, r3, #2
 8009afa:	81a3      	strh	r3, [r4, #12]
 8009afc:	e7e2      	b.n	8009ac4 <__smakebuf_r+0xc>
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	6020      	str	r0, [r4, #0]
 8009b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	9b01      	ldr	r3, [sp, #4]
 8009b0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b0e:	b15b      	cbz	r3, 8009b28 <__smakebuf_r+0x70>
 8009b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b14:	4630      	mov	r0, r6
 8009b16:	f000 f81d 	bl	8009b54 <_isatty_r>
 8009b1a:	b128      	cbz	r0, 8009b28 <__smakebuf_r+0x70>
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	f023 0303 	bic.w	r3, r3, #3
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	81a3      	strh	r3, [r4, #12]
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	431d      	orrs	r5, r3
 8009b2c:	81a5      	strh	r5, [r4, #12]
 8009b2e:	e7cf      	b.n	8009ad0 <__smakebuf_r+0x18>

08009b30 <_fstat_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d07      	ldr	r5, [pc, #28]	@ (8009b50 <_fstat_r+0x20>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	f7f8 fa67 	bl	8002010 <_fstat>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d102      	bne.n	8009b4c <_fstat_r+0x1c>
 8009b46:	682b      	ldr	r3, [r5, #0]
 8009b48:	b103      	cbz	r3, 8009b4c <_fstat_r+0x1c>
 8009b4a:	6023      	str	r3, [r4, #0]
 8009b4c:	bd38      	pop	{r3, r4, r5, pc}
 8009b4e:	bf00      	nop
 8009b50:	200005b0 	.word	0x200005b0

08009b54 <_isatty_r>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	4d06      	ldr	r5, [pc, #24]	@ (8009b70 <_isatty_r+0x1c>)
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	4608      	mov	r0, r1
 8009b5e:	602b      	str	r3, [r5, #0]
 8009b60:	f7f8 fa66 	bl	8002030 <_isatty>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_isatty_r+0x1a>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_isatty_r+0x1a>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	200005b0 	.word	0x200005b0

08009b74 <_init>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr

08009b80 <_fini>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr
